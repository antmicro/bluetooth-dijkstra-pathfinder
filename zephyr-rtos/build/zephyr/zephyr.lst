
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	c0 0b 00 20 1d 16 00 00 d1 44 00 00 f1 15 00 00     ... .....D......
  10:	f1 15 00 00 f1 15 00 00 f1 15 00 00 00 00 00 00     ................
	...
  2c:	05 13 00 00 f1 15 00 00 00 00 00 00 b1 12 00 00     ................
  3c:	f1 15 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  50:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  60:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  70:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  80:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  90:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  a0:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  b0:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  c0:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  d0:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  e0:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................
  f0:	b5 13 00 00 b5 13 00 00 b5 13 00 00 b5 13 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_IDLE_STACK_SIZE+0x198>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_IDLE_STACK_SIZE+0xa2>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_IDLE_STACK_SIZE+0x5a>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_IDLE_STACK_SIZE+0x5a>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_IDLE_STACK_SIZE+0x9e>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_IDLE_STACK_SIZE+0x5a>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_IDLE_STACK_SIZE+0x84>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_IDLE_STACK_SIZE+0xa6>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_IDLE_STACK_SIZE+0x10a>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_IDLE_STACK_SIZE+0x190>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_IDLE_STACK_SIZE+0xda>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_IDLE_STACK_SIZE+0xda>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_IDLE_STACK_SIZE+0x194>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_IDLE_STACK_SIZE+0x188>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_IDLE_STACK_SIZE+0x152>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_IDLE_STACK_SIZE+0x152>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_IDLE_STACK_SIZE+0x17e>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_IDLE_STACK_SIZE+0x17e>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_IDLE_STACK_SIZE+0xac>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_IDLE_STACK_SIZE+0x152>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_IDLE_STACK_SIZE+0x17e>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_IDLE_STACK_SIZE+0xda>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_IDLE_STACK_SIZE+0x1a8>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_IDLE_STACK_SIZE+0x1a2>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_IDLE_STACK_SIZE+0x1d0>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_IDLE_STACK_SIZE+0x1b6>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_IDLE_STACK_SIZE+0x1cc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_IDLE_STACK_SIZE+0x296>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_IDLE_STACK_SIZE+0x1c0>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_IDLE_STACK_SIZE+0x28e>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_IDLE_STACK_SIZE+0x222>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_IDLE_STACK_SIZE+0x222>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_IDLE_STACK_SIZE+0x292>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     3a2:	d106      	bne.n	3b2 <CONFIG_IDLE_STACK_SIZE+0x272>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_IDLE_STACK_SIZE+0x272>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_IDLE_STACK_SIZE+0x296>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_IDLE_STACK_SIZE+0x1c8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_IDLE_STACK_SIZE+0x222>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
	...

000003dc <main>:

    
struct k_mutex graph_mutex;

void main(void)
{
     3dc:	b507      	push	{r0, r1, r2, lr}
    struct node_t * graph;
    uint8_t graph_init_error_code = graph_init(&graph, &graph_mutex);
     3de:	4908      	ldr	r1, [pc, #32]	; (400 <CONFIG_FLASH_SIZE>)
     3e0:	a801      	add	r0, sp, #4
     3e2:	f003 fca2 	bl	3d2a <graph_init>
    //uint8_t list_error_code = create_unvisited_slist(&lst, graph, 5, 0x0);
    //print_slist(&lst);
    //printk("list init code %d\n", list_error_code); 

    // dijkstra 
    dijkstra_shortest_path(graph, 5, 0, 2);
     3e6:	9801      	ldr	r0, [sp, #4]
     3e8:	2302      	movs	r3, #2
     3ea:	2200      	movs	r2, #0
     3ec:	2105      	movs	r1, #5
     3ee:	f000 f895 	bl	51c <dijkstra_shortest_path>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3f2:	2100      	movs	r1, #0
     3f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     3f8:	f003 faaa 	bl	3950 <z_impl_k_sleep>
     3fc:	e7f9      	b.n	3f2 <main+0x16>
     3fe:	bf00      	nop
     400:	200001f0 	.word	0x200001f0

00000404 <get_smallest_td_node>:

    return 0;
}


uint8_t get_smallest_td_node(sys_slist_t * lst, struct node_container ** container_buffer){
     404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     406:	6804      	ldr	r4, [r0, #0]
    uint8_t smallest_td = INF;
    struct node_container * iterator;
    if(sys_slist_is_empty(lst)){
     408:	b924      	cbnz	r4, 414 <get_smallest_td_node+0x10>
        printk("List empty, returning\n");
     40a:	480c      	ldr	r0, [pc, #48]	; (43c <get_smallest_td_node+0x38>)
     40c:	f003 fd6c 	bl	3ee8 <printk>
        return 1; 
     410:	2001      	movs	r0, #1
            container_buffer = iterator;
            printk("found smallest td: %d\n", smallest_td);
        }
    }
    return 0;
}
     412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printk("for each container loop\n");
     414:	4e0a      	ldr	r6, [pc, #40]	; (440 <get_smallest_td_node+0x3c>)
            printk("found smallest td: %d\n", smallest_td);
     416:	4f0b      	ldr	r7, [pc, #44]	; (444 <get_smallest_td_node+0x40>)
    uint8_t smallest_td = INF;
     418:	25ff      	movs	r5, #255	; 0xff
        printk("for each container loop\n");
     41a:	4630      	mov	r0, r6
     41c:	f003 fd64 	bl	3ee8 <printk>
        if(iterator->node->tentative_distance < smallest_td){
     420:	6863      	ldr	r3, [r4, #4]
     422:	8899      	ldrh	r1, [r3, #4]
     424:	42a9      	cmp	r1, r5
     426:	d203      	bcs.n	430 <get_smallest_td_node+0x2c>
            printk("found smallest td: %d\n", smallest_td);
     428:	4638      	mov	r0, r7
            smallest_td = iterator->node->tentative_distance;
     42a:	b2cd      	uxtb	r5, r1
            printk("found smallest td: %d\n", smallest_td);
     42c:	f003 fd5c 	bl	3ee8 <printk>
	return node->next;
     430:	6824      	ldr	r4, [r4, #0]
    SYS_SLIST_FOR_EACH_CONTAINER(lst, iterator, next_container_node_ptr){
     432:	2c00      	cmp	r4, #0
     434:	d1f1      	bne.n	41a <get_smallest_td_node+0x16>
    return 0;
     436:	4620      	mov	r0, r4
     438:	e7eb      	b.n	412 <get_smallest_td_node+0xe>
     43a:	bf00      	nop
     43c:	00005150 	.word	0x00005150
     440:	00005167 	.word	0x00005167
     444:	00005180 	.word	0x00005180

00000448 <create_unvisited_slist>:


uint8_t create_unvisited_slist(
        sys_slist_t * lst, 
        struct node_t * graph, 
        uint8_t graph_size){
     448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	list->head = NULL;
     44a:	2700      	movs	r7, #0
	list->tail = NULL;
     44c:	e9c0 7700 	strd	r7, r7, [r0]
    sys_slist_init(lst);
    for(uint8_t i = 0; i < graph_size; i++){
     450:	260c      	movs	r6, #12
        uint8_t graph_size){
     452:	4605      	mov	r5, r0
     454:	460c      	mov	r4, r1
     456:	fb06 1602 	mla	r6, r6, r2, r1
    for(uint8_t i = 0; i < graph_size; i++){
     45a:	42b4      	cmp	r4, r6
     45c:	d101      	bne.n	462 <create_unvisited_slist+0x1a>
            }
            container->node = graph + i; 
            sys_slist_append(lst, &container->next_container_node_ptr); 
        }
    }
    return 0;
     45e:	2000      	movs	r0, #0
     460:	e009      	b.n	476 <create_unvisited_slist+0x2e>
        if(graph[i].reserved){
     462:	7863      	ldrb	r3, [r4, #1]
     464:	b173      	cbz	r3, 484 <create_unvisited_slist+0x3c>
                k_malloc(sizeof(struct node_container));
     466:	2008      	movs	r0, #8
     468:	f004 fc44 	bl	4cf4 <k_malloc>
            if(!container){
     46c:	b920      	cbnz	r0, 478 <create_unvisited_slist+0x30>
                printk("k_malloc failed in create_unvisited_list\n");
     46e:	4808      	ldr	r0, [pc, #32]	; (490 <create_unvisited_slist+0x48>)
     470:	f003 fd3a 	bl	3ee8 <printk>
                return 1;
     474:	2001      	movs	r0, #1
}
     476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
     478:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
     47a:	e9c0 7400 	strd	r7, r4, [r0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     47e:	b91b      	cbnz	r3, 488 <create_unvisited_slist+0x40>
	list->head = node;
     480:	e9c5 0000 	strd	r0, r0, [r5]
    for(uint8_t i = 0; i < graph_size; i++){
     484:	340c      	adds	r4, #12
     486:	e7e8      	b.n	45a <create_unvisited_slist+0x12>
	parent->next = child;
     488:	6018      	str	r0, [r3, #0]
	list->tail = node;
     48a:	6068      	str	r0, [r5, #4]
}
     48c:	e7fa      	b.n	484 <create_unvisited_slist+0x3c>
     48e:	bf00      	nop
     490:	00005197 	.word	0x00005197

00000494 <remove_unvisited_slist_member>:
        remove_unvisited_slist_member(lst, iterator);   
    }
}


void remove_unvisited_slist_member(sys_slist_t * lst, struct node_container * node_to_remove){
     494:	b510      	push	{r4, lr}
     496:	460c      	mov	r4, r1
	return list->head;
     498:	6801      	ldr	r1, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
     49a:	2300      	movs	r3, #0
     49c:	b159      	cbz	r1, 4b6 <remove_unvisited_slist_member+0x22>
     49e:	428c      	cmp	r4, r1
     4a0:	d119      	bne.n	4d6 <remove_unvisited_slist_member+0x42>
	return node->next;
     4a2:	6822      	ldr	r2, [r4, #0]
	return list->tail;
     4a4:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
     4a6:	b98b      	cbnz	r3, 4cc <remove_unvisited_slist_member+0x38>
     4a8:	428c      	cmp	r4, r1
	list->head = node;
     4aa:	6002      	str	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
     4ac:	d100      	bne.n	4b0 <remove_unvisited_slist_member+0x1c>
	list->tail = node;
     4ae:	6042      	str	r2, [r0, #4]
	parent->next = child;
     4b0:	2300      	movs	r3, #0
     4b2:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
     4b4:	2101      	movs	r1, #1
    // remove from a list 
    bool rm = sys_slist_find_and_remove(lst, &(node_to_remove->next_container_node_ptr));
    printk("three %d\n", rm);
     4b6:	4809      	ldr	r0, [pc, #36]	; (4dc <remove_unvisited_slist_member+0x48>)
     4b8:	f003 fd16 	bl	3ee8 <printk>
    // free memory from heap 
    k_free(node_to_remove);
     4bc:	4620      	mov	r0, r4
     4be:	f004 fc12 	bl	4ce6 <k_free>
    printk("four\n");
}
     4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("four\n");
     4c6:	4806      	ldr	r0, [pc, #24]	; (4e0 <remove_unvisited_slist_member+0x4c>)
     4c8:	f003 bd0e 	b.w	3ee8 <printk>
Z_GENLIST_REMOVE(slist, snode)
     4cc:	428c      	cmp	r4, r1
	parent->next = child;
     4ce:	601a      	str	r2, [r3, #0]
	list->tail = node;
     4d0:	bf08      	it	eq
     4d2:	6043      	streq	r3, [r0, #4]
}
     4d4:	e7ec      	b.n	4b0 <remove_unvisited_slist_member+0x1c>
	return node->next;
     4d6:	460b      	mov	r3, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
     4d8:	6809      	ldr	r1, [r1, #0]
     4da:	e7df      	b.n	49c <remove_unvisited_slist_member+0x8>
     4dc:	000051c1 	.word	0x000051c1
     4e0:	000051cb 	.word	0x000051cb

000004e4 <print_slist>:


#ifdef DEBUG

void print_slist(sys_slist_t * lst){
     4e4:	b538      	push	{r3, r4, r5, lr}
     4e6:	4604      	mov	r4, r0
    struct node_container * iterator;
    printk("Printing nodes in slist: \n");
     4e8:	4809      	ldr	r0, [pc, #36]	; (510 <print_slist+0x2c>)
     4ea:	f003 fcfd 	bl	3ee8 <printk>
	return list->head;
     4ee:	6824      	ldr	r4, [r4, #0]
    SYS_SLIST_FOR_EACH_CONTAINER(lst, iterator, next_container_node_ptr){
     4f0:	b144      	cbz	r4, 504 <print_slist+0x20>
        printk("Node addr: %d\n", iterator->node->addr); 
     4f2:	4d08      	ldr	r5, [pc, #32]	; (514 <print_slist+0x30>)
     4f4:	6863      	ldr	r3, [r4, #4]
     4f6:	4628      	mov	r0, r5
     4f8:	7819      	ldrb	r1, [r3, #0]
     4fa:	f003 fcf5 	bl	3ee8 <printk>
	return node->next;
     4fe:	6824      	ldr	r4, [r4, #0]
    SYS_SLIST_FOR_EACH_CONTAINER(lst, iterator, next_container_node_ptr){
     500:	2c00      	cmp	r4, #0
     502:	d1f7      	bne.n	4f4 <print_slist+0x10>
    }
    printk("\n\n\n");
}
     504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printk("\n\n\n");
     508:	4803      	ldr	r0, [pc, #12]	; (518 <print_slist+0x34>)
     50a:	f003 bced 	b.w	3ee8 <printk>
     50e:	bf00      	nop
     510:	000051d1 	.word	0x000051d1
     514:	000051f0 	.word	0x000051f0
     518:	000051ec 	.word	0x000051ec

0000051c <dijkstra_shortest_path>:
        uint8_t dst_addr){
     51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     520:	4605      	mov	r5, r0
     522:	b085      	sub	sp, #20
     524:	4688      	mov	r8, r1
     526:	4616      	mov	r6, r2
     528:	461f      	mov	r7, r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
     52a:	4829      	ldr	r0, [pc, #164]	; (5d0 <dijkstra_shortest_path+0xb4>)
     52c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     534:	f002 fe34 	bl	31a0 <z_impl_k_mutex_lock>
    if(lock_result){
     538:	4604      	mov	r4, r0
     53a:	b138      	cbz	r0, 54c <dijkstra_shortest_path+0x30>
        printk("Mutex lock failed with status: %d\n", lock_result); 
     53c:	4601      	mov	r1, r0
     53e:	4825      	ldr	r0, [pc, #148]	; (5d4 <dijkstra_shortest_path+0xb8>)
        printk("Mutex unlock failed with status: %d\n", unlock_result); 
     540:	f003 fcd2 	bl	3ee8 <printk>
        return unlock_result;
     544:	b2e0      	uxtb	r0, r4
}
     546:	b005      	add	sp, #20
     548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    graph[start_addr].tentative_distance = 0;  // not a pointer ? no cuz [] is dereference
     54c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
     550:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    create_unvisited_slist(&lst, graph, graph_size);
     554:	4642      	mov	r2, r8
    graph[start_addr].tentative_distance = 0;  // not a pointer ? no cuz [] is dereference
     556:	8098      	strh	r0, [r3, #4]
    create_unvisited_slist(&lst, graph, graph_size);
     558:	4629      	mov	r1, r5
     55a:	a802      	add	r0, sp, #8
     55c:	f7ff ff74 	bl	448 <create_unvisited_slist>
    print_slist(&lst);
     560:	a802      	add	r0, sp, #8
     562:	f7ff ffbf 	bl	4e4 <print_slist>
        printk("smallest_td loop\n");
     566:	4c1c      	ldr	r4, [pc, #112]	; (5d8 <dijkstra_shortest_path+0xbc>)
        printk("one \n");    
     568:	f8df 8070 	ldr.w	r8, [pc, #112]	; 5dc <dijkstra_shortest_path+0xc0>
        printk("two \n"); 
     56c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5e0 <dijkstra_shortest_path+0xc4>
                get_smallest_td_node(&lst, &smallest_td_node_container))){
     570:	a901      	add	r1, sp, #4
     572:	a802      	add	r0, sp, #8
     574:	f7ff ff46 	bl	404 <get_smallest_td_node>
    while(!(smallest_td_node_found =
     578:	b950      	cbnz	r0, 590 <dijkstra_shortest_path+0x74>
        printk("smallest_td loop\n");
     57a:	4620      	mov	r0, r4
     57c:	f003 fcb4 	bl	3ee8 <printk>
        if(smallest_td_node_container->node->addr == dst_addr){
     580:	9b01      	ldr	r3, [sp, #4]
     582:	685b      	ldr	r3, [r3, #4]
     584:	781b      	ldrb	r3, [r3, #0]
     586:	42bb      	cmp	r3, r7
     588:	d117      	bne.n	5ba <dijkstra_shortest_path+0x9e>
            free_slist(&lst);
     58a:	a802      	add	r0, sp, #8
     58c:	f003 fc81 	bl	3e92 <free_slist>
    trace_back(graph, start_addr, dst_addr, &paths_size);
     590:	f10d 0303 	add.w	r3, sp, #3
     594:	463a      	mov	r2, r7
     596:	4631      	mov	r1, r6
     598:	4628      	mov	r0, r5
     59a:	f003 fc43 	bl	3e24 <trace_back>
    printk("This is paths size: %d", paths_size);
     59e:	f89d 1003 	ldrb.w	r1, [sp, #3]
     5a2:	4810      	ldr	r0, [pc, #64]	; (5e4 <dijkstra_shortest_path+0xc8>)
     5a4:	f003 fca0 	bl	3ee8 <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     5a8:	4809      	ldr	r0, [pc, #36]	; (5d0 <dijkstra_shortest_path+0xb4>)
     5aa:	f002 fe71 	bl	3290 <z_impl_k_mutex_unlock>
    if(unlock_result){
     5ae:	4604      	mov	r4, r0
     5b0:	2800      	cmp	r0, #0
     5b2:	d0c8      	beq.n	546 <dijkstra_shortest_path+0x2a>
        printk("Mutex unlock failed with status: %d\n", unlock_result); 
     5b4:	4601      	mov	r1, r0
     5b6:	480c      	ldr	r0, [pc, #48]	; (5e8 <dijkstra_shortest_path+0xcc>)
     5b8:	e7c2      	b.n	540 <dijkstra_shortest_path+0x24>
        printk("one \n");    
     5ba:	4640      	mov	r0, r8
     5bc:	f003 fc94 	bl	3ee8 <printk>
        printk("two \n"); 
     5c0:	4648      	mov	r0, r9
     5c2:	f003 fc91 	bl	3ee8 <printk>
        remove_unvisited_slist_member(&lst, smallest_td_node_container);
     5c6:	9901      	ldr	r1, [sp, #4]
     5c8:	a802      	add	r0, sp, #8
     5ca:	f7ff ff63 	bl	494 <remove_unvisited_slist_member>
     5ce:	e7cf      	b.n	570 <dijkstra_shortest_path+0x54>
     5d0:	200001f0 	.word	0x200001f0
     5d4:	000051ff 	.word	0x000051ff
     5d8:	00005222 	.word	0x00005222
     5dc:	00005234 	.word	0x00005234
     5e0:	0000523a 	.word	0x0000523a
     5e4:	00005240 	.word	0x00005240
     5e8:	00005257 	.word	0x00005257

000005ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5ec:	680b      	ldr	r3, [r1, #0]
     5ee:	3301      	adds	r3, #1
     5f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5f2:	4b01      	ldr	r3, [pc, #4]	; (5f8 <char_out+0xc>)
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	4718      	bx	r3
     5f8:	20000000 	.word	0x20000000

000005fc <__printk_hook_install>:
	_char_out = fn;
     5fc:	4b01      	ldr	r3, [pc, #4]	; (604 <__printk_hook_install+0x8>)
     5fe:	6018      	str	r0, [r3, #0]
}
     600:	4770      	bx	lr
     602:	bf00      	nop
     604:	20000000 	.word	0x20000000

00000608 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     608:	b507      	push	{r0, r1, r2, lr}
     60a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     60c:	2100      	movs	r1, #0
{
     60e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     610:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     612:	4803      	ldr	r0, [pc, #12]	; (620 <vprintk+0x18>)
     614:	a901      	add	r1, sp, #4
     616:	f000 f8e5 	bl	7e4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     61a:	b003      	add	sp, #12
     61c:	f85d fb04 	ldr.w	pc, [sp], #4
     620:	000005ed 	.word	0x000005ed

00000624 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     628:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     62c:	f019 0808 	ands.w	r8, r9, #8
{
     630:	4604      	mov	r4, r0
     632:	4693      	mov	fp, r2
	if (processing) {
     634:	d00d      	beq.n	652 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     636:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     638:	bf0c      	ite	eq
     63a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     63e:	f049 0920 	orrne.w	r9, r9, #32
     642:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     646:	f38b 8811 	msr	BASEPRI, fp
     64a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     64e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     652:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     656:	2902      	cmp	r1, #2
     658:	d107      	bne.n	66a <process_event+0x46>
			evt = process_recheck(mgr);
     65a:	4620      	mov	r0, r4
     65c:	f003 fc51 	bl	3f02 <process_recheck>
		if (evt == EVT_NOP) {
     660:	2800      	cmp	r0, #0
     662:	d0f0      	beq.n	646 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     664:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     666:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     668:	d14e      	bne.n	708 <process_event+0xe4>
			res = mgr->last_res;
     66a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     66c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     66e:	2f00      	cmp	r7, #0
     670:	da15      	bge.n	69e <process_event+0x7a>
		*clients = mgr->clients;
     672:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     674:	f021 0107 	bic.w	r1, r1, #7
	list->tail = NULL;
     678:	e9c4 8800 	strd	r8, r8, [r4]
     67c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     680:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     682:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     684:	8b21      	ldrh	r1, [r4, #24]
     686:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     68a:	45ca      	cmp	sl, r9
     68c:	d002      	beq.n	694 <process_event+0x70>
		if (do_monitors
     68e:	68a3      	ldr	r3, [r4, #8]
     690:	2b00      	cmp	r3, #0
     692:	d15a      	bne.n	74a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     694:	b90d      	cbnz	r5, 69a <process_event+0x76>
		    || (transit != NULL)) {
     696:	2e00      	cmp	r6, #0
     698:	d071      	beq.n	77e <process_event+0x15a>
     69a:	2300      	movs	r3, #0
     69c:	e056      	b.n	74c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     69e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     6a2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     6a4:	2a01      	cmp	r2, #1
     6a6:	d81e      	bhi.n	6e6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     6ac:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     6ae:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b0:	b289      	uxth	r1, r1
     6b2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     6b6:	d10a      	bne.n	6ce <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6b8:	b13d      	cbz	r5, 6ca <process_event+0xa6>
     6ba:	8b63      	ldrh	r3, [r4, #26]
     6bc:	462a      	mov	r2, r5
	return node->next;
     6be:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     6c0:	3301      	adds	r3, #1
     6c2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6c4:	2a00      	cmp	r2, #0
     6c6:	d1fa      	bne.n	6be <process_event+0x9a>
     6c8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ca:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     6ce:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6d0:	4620      	mov	r0, r4
     6d2:	f003 fc16 	bl	3f02 <process_recheck>
     6d6:	4606      	mov	r6, r0
     6d8:	2800      	cmp	r0, #0
     6da:	d0d3      	beq.n	684 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6dc:	8b23      	ldrh	r3, [r4, #24]
     6de:	f043 0320 	orr.w	r3, r3, #32
     6e2:	8323      	strh	r3, [r4, #24]
     6e4:	e7cd      	b.n	682 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6e6:	2b04      	cmp	r3, #4
     6e8:	d10c      	bne.n	704 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ea:	f021 0107 	bic.w	r1, r1, #7
     6ee:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     6f0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6f2:	4620      	mov	r0, r4
     6f4:	f003 fc05 	bl	3f02 <process_recheck>
     6f8:	4605      	mov	r5, r0
     6fa:	2800      	cmp	r0, #0
     6fc:	d0c1      	beq.n	682 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6fe:	f041 0120 	orr.w	r1, r1, #32
     702:	8321      	strh	r1, [r4, #24]
     704:	2500      	movs	r5, #0
     706:	e7bc      	b.n	682 <process_event+0x5e>
		} else if (evt == EVT_START) {
     708:	2803      	cmp	r0, #3
     70a:	d109      	bne.n	720 <process_event+0xfc>
			transit = mgr->transitions->start;
     70c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     70e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     712:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     714:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     718:	8323      	strh	r3, [r4, #24]
}
     71a:	2500      	movs	r5, #0
		res = 0;
     71c:	462f      	mov	r7, r5
     71e:	e7b1      	b.n	684 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     720:	2804      	cmp	r0, #4
     722:	d106      	bne.n	732 <process_event+0x10e>
			transit = mgr->transitions->stop;
     724:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     726:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     72a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     72c:	f043 0304 	orr.w	r3, r3, #4
     730:	e7f2      	b.n	718 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     732:	2805      	cmp	r0, #5
     734:	d106      	bne.n	744 <process_event+0x120>
			transit = mgr->transitions->reset;
     736:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     738:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     73c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     73e:	f043 0305 	orr.w	r3, r3, #5
     742:	e7e9      	b.n	718 <process_event+0xf4>
     744:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     746:	462e      	mov	r6, r5
     748:	e7e8      	b.n	71c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     74a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     74c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     750:	8321      	strh	r1, [r4, #24]
     752:	f38b 8811 	msr	BASEPRI, fp
     756:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     75a:	b9fb      	cbnz	r3, 79c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     75c:	bb85      	cbnz	r5, 7c0 <process_event+0x19c>
			if (transit != NULL) {
     75e:	b116      	cbz	r6, 766 <process_event+0x142>
				transit(mgr, transition_complete);
     760:	491f      	ldr	r1, [pc, #124]	; (7e0 <process_event+0x1bc>)
     762:	4620      	mov	r0, r4
     764:	47b0      	blx	r6
	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8b11 	mrs	fp, BASEPRI
     76e:	f383 8812 	msr	BASEPRI_MAX, r3
     772:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     776:	8b23      	ldrh	r3, [r4, #24]
     778:	f023 0308 	bic.w	r3, r3, #8
     77c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     77e:	8b23      	ldrh	r3, [r4, #24]
     780:	06da      	lsls	r2, r3, #27
     782:	d525      	bpl.n	7d0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     784:	f023 0310 	bic.w	r3, r3, #16
     788:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     78a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     78c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     790:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     794:	2900      	cmp	r1, #0
     796:	f47f af5e 	bne.w	656 <process_event+0x32>
out:
     79a:	e754      	b.n	646 <process_event+0x22>
	return list->head;
     79c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     79e:	2900      	cmp	r1, #0
     7a0:	d0dc      	beq.n	75c <process_event+0x138>
	return node->next;
     7a2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     7a6:	f8d1 b004 	ldr.w	fp, [r1, #4]
     7aa:	463b      	mov	r3, r7
     7ac:	4652      	mov	r2, sl
     7ae:	4620      	mov	r0, r4
     7b0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     7b2:	f1b9 0f00 	cmp.w	r9, #0
     7b6:	d0d1      	beq.n	75c <process_event+0x138>
     7b8:	4649      	mov	r1, r9
     7ba:	f8d9 9000 	ldr.w	r9, [r9]
     7be:	e7f2      	b.n	7a6 <process_event+0x182>
     7c0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     7c2:	463b      	mov	r3, r7
     7c4:	4652      	mov	r2, sl
     7c6:	4620      	mov	r0, r4
     7c8:	682d      	ldr	r5, [r5, #0]
     7ca:	f003 fbb6 	bl	3f3a <notify_one>
     7ce:	e7c5      	b.n	75c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     7d0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     7d4:	bf1e      	ittt	ne
     7d6:	f023 0320 	bicne.w	r3, r3, #32
     7da:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     7dc:	2102      	movne	r1, #2
     7de:	e7d5      	b.n	78c <process_event+0x168>
     7e0:	00003f67 	.word	0x00003f67

000007e4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7e8:	b091      	sub	sp, #68	; 0x44
     7ea:	468b      	mov	fp, r1
     7ec:	9002      	str	r0, [sp, #8]
     7ee:	4692      	mov	sl, r2
     7f0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7f2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7f4:	f89a 0000 	ldrb.w	r0, [sl]
     7f8:	b908      	cbnz	r0, 7fe <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     7fa:	4628      	mov	r0, r5
     7fc:	e35f      	b.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
		if (*fp != '%') {
     7fe:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     800:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     804:	d007      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
			OUTC('%');
     806:	9b02      	ldr	r3, [sp, #8]
     808:	4659      	mov	r1, fp
     80a:	4798      	blx	r3
     80c:	2800      	cmp	r0, #0
     80e:	f2c0 8356 	blt.w	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     812:	3501      	adds	r5, #1
			break;
     814:	e212      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
		} state = {
     816:	2218      	movs	r2, #24
     818:	2100      	movs	r1, #0
     81a:	a80a      	add	r0, sp, #40	; 0x28
     81c:	f003 fe84 	bl	4528 <memset>
	if (*sp == '%') {
     820:	f89a 3001 	ldrb.w	r3, [sl, #1]
     824:	2b25      	cmp	r3, #37	; 0x25
     826:	d078      	beq.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
     828:	2200      	movs	r2, #0
     82a:	4610      	mov	r0, r2
     82c:	4696      	mov	lr, r2
     82e:	4694      	mov	ip, r2
     830:	4616      	mov	r6, r2
     832:	4639      	mov	r1, r7
		switch (*sp) {
     834:	f817 3b01 	ldrb.w	r3, [r7], #1
     838:	2b2b      	cmp	r3, #43	; 0x2b
     83a:	f000 809d 	beq.w	978 <CONFIG_ISR_STACK_SIZE+0x178>
     83e:	f200 8094 	bhi.w	96a <CONFIG_ISR_STACK_SIZE+0x16a>
     842:	2b20      	cmp	r3, #32
     844:	f000 809b 	beq.w	97e <CONFIG_ISR_STACK_SIZE+0x17e>
     848:	2b23      	cmp	r3, #35	; 0x23
     84a:	f000 809b 	beq.w	984 <CONFIG_ISR_STACK_SIZE+0x184>
     84e:	b12e      	cbz	r6, 85c <CONFIG_ISR_STACK_SIZE+0x5c>
     850:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     854:	f046 0604 	orr.w	r6, r6, #4
     858:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     85c:	f1bc 0f00 	cmp.w	ip, #0
     860:	d005      	beq.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
     862:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     866:	f046 0608 	orr.w	r6, r6, #8
     86a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     86e:	f1be 0f00 	cmp.w	lr, #0
     872:	d005      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     874:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     878:	f046 0610 	orr.w	r6, r6, #16
     87c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     880:	b128      	cbz	r0, 88e <CONFIG_ISR_STACK_SIZE+0x8e>
     882:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     886:	f040 0020 	orr.w	r0, r0, #32
     88a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     88e:	b12a      	cbz	r2, 89c <CONFIG_ISR_STACK_SIZE+0x9c>
     890:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     898:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     89c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     8a0:	f002 0044 	and.w	r0, r2, #68	; 0x44
     8a4:	2844      	cmp	r0, #68	; 0x44
     8a6:	d103      	bne.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
		conv->flag_zero = false;
     8a8:	f36f 1286 	bfc	r2, #6, #1
     8ac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     8b0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8b4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     8b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     8ba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8be:	d17b      	bne.n	9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>
		conv->width_star = true;
     8c0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8c4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     8c8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     8ca:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     8ce:	781a      	ldrb	r2, [r3, #0]
     8d0:	2a2e      	cmp	r2, #46	; 0x2e
     8d2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8d6:	bf0c      	ite	eq
     8d8:	2101      	moveq	r1, #1
     8da:	2100      	movne	r1, #0
     8dc:	f361 0241 	bfi	r2, r1, #1, #1
     8e0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     8e4:	d174      	bne.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
	if (*sp == '*') {
     8e6:	785a      	ldrb	r2, [r3, #1]
     8e8:	2a2a      	cmp	r2, #42	; 0x2a
     8ea:	d06a      	beq.n	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
	++sp;
     8ec:	3301      	adds	r3, #1
	size_t val = 0;
     8ee:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     8f0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     8f2:	4618      	mov	r0, r3
     8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
     8f8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     8fc:	2f09      	cmp	r7, #9
     8fe:	f240 808e 	bls.w	a1e <CONFIG_ISR_STACK_SIZE+0x21e>
	conv->unsupported |= ((conv->prec_value < 0)
     902:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     906:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     908:	f3c2 0040 	ubfx	r0, r2, #1, #1
     90c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     910:	f361 0241 	bfi	r2, r1, #1, #1
     914:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     918:	e05a      	b.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
		conv->specifier = *sp++;
     91a:	f10a 0702 	add.w	r7, sl, #2
     91e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     922:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     926:	07d9      	lsls	r1, r3, #31
     928:	f140 8149 	bpl.w	bbe <CONFIG_ISR_STACK_SIZE+0x3be>
			width = va_arg(ap, int);
     92c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     930:	f1b9 0f00 	cmp.w	r9, #0
     934:	da07      	bge.n	946 <CONFIG_ISR_STACK_SIZE+0x146>
				conv->flag_dash = true;
     936:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     93a:	f042 0204 	orr.w	r2, r2, #4
     93e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     942:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     946:	075a      	lsls	r2, r3, #29
     948:	f140 8142 	bpl.w	bd0 <CONFIG_ISR_STACK_SIZE+0x3d0>
			int arg = va_arg(ap, int);
     94c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     950:	f1b8 0f00 	cmp.w	r8, #0
     954:	f280 8141 	bge.w	bda <CONFIG_ISR_STACK_SIZE+0x3da>
				conv->prec_present = false;
     958:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     95c:	f36f 0341 	bfc	r3, #1, #1
     960:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     964:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     968:	e137      	b.n	bda <CONFIG_ISR_STACK_SIZE+0x3da>
		switch (*sp) {
     96a:	2b2d      	cmp	r3, #45	; 0x2d
     96c:	d00c      	beq.n	988 <CONFIG_ISR_STACK_SIZE+0x188>
     96e:	2b30      	cmp	r3, #48	; 0x30
     970:	f47f af6d 	bne.w	84e <CONFIG_ISR_STACK_SIZE+0x4e>
			conv->flag_zero = true;
     974:	2201      	movs	r2, #1
	} while (loop);
     976:	e75c      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
			conv->flag_plus = true;
     978:	f04f 0c01 	mov.w	ip, #1
     97c:	e759      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
			conv->flag_space = true;
     97e:	f04f 0e01 	mov.w	lr, #1
     982:	e756      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
			conv->flag_hash = true;
     984:	2001      	movs	r0, #1
     986:	e754      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
		switch (*sp) {
     988:	2601      	movs	r6, #1
     98a:	e752      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
		val = 10U * val + *sp++ - '0';
     98c:	fb0c 0202 	mla	r2, ip, r2, r0
     990:	3a30      	subs	r2, #48	; 0x30
     992:	4633      	mov	r3, r6
     994:	461e      	mov	r6, r3
     996:	f816 0b01 	ldrb.w	r0, [r6], #1
     99a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     99e:	2f09      	cmp	r7, #9
     9a0:	d9f4      	bls.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
	if (sp != wp) {
     9a2:	4299      	cmp	r1, r3
     9a4:	d093      	beq.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
		conv->unsupported |= ((conv->width_value < 0)
     9a6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     9aa:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     9ac:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     9ae:	f362 0141 	bfi	r1, r2, #1, #1
     9b2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     9b6:	e78a      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     9b8:	460b      	mov	r3, r1
	size_t val = 0;
     9ba:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9bc:	f04f 0c0a 	mov.w	ip, #10
     9c0:	e7e8      	b.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
		conv->prec_star = true;
     9c2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9c6:	f042 0204 	orr.w	r2, r2, #4
     9ca:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     9ce:	3302      	adds	r3, #2
	switch (*sp) {
     9d0:	461f      	mov	r7, r3
     9d2:	f817 2b01 	ldrb.w	r2, [r7], #1
     9d6:	2a6c      	cmp	r2, #108	; 0x6c
     9d8:	d041      	beq.n	a5e <CONFIG_ISR_STACK_SIZE+0x25e>
     9da:	d825      	bhi.n	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     9dc:	2a68      	cmp	r2, #104	; 0x68
     9de:	d02b      	beq.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
     9e0:	2a6a      	cmp	r2, #106	; 0x6a
     9e2:	d046      	beq.n	a72 <CONFIG_ISR_STACK_SIZE+0x272>
     9e4:	2a4c      	cmp	r2, #76	; 0x4c
     9e6:	d04c      	beq.n	a82 <CONFIG_ISR_STACK_SIZE+0x282>
     9e8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     9ea:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     9f2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     9f6:	2a78      	cmp	r2, #120	; 0x78
     9f8:	f200 80d9 	bhi.w	bae <CONFIG_ISR_STACK_SIZE+0x3ae>
     9fc:	2a57      	cmp	r2, #87	; 0x57
     9fe:	d84d      	bhi.n	a9c <CONFIG_ISR_STACK_SIZE+0x29c>
     a00:	2a41      	cmp	r2, #65	; 0x41
     a02:	d003      	beq.n	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
     a04:	3a45      	subs	r2, #69	; 0x45
     a06:	2a02      	cmp	r2, #2
     a08:	f200 80d1 	bhi.w	bae <CONFIG_ISR_STACK_SIZE+0x3ae>
		conv->specifier_cat = SPECIFIER_FP;
     a0c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     a10:	2204      	movs	r2, #4
     a12:	f362 0302 	bfi	r3, r2, #0, #3
     a16:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     a1a:	2301      	movs	r3, #1
			break;
     a1c:	e09e      	b.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
		val = 10U * val + *sp++ - '0';
     a1e:	fb06 2101 	mla	r1, r6, r1, r2
     a22:	3930      	subs	r1, #48	; 0x30
     a24:	4603      	mov	r3, r0
     a26:	e764      	b.n	8f2 <CONFIG_ISR_STACK_SIZE+0xf2>
	switch (*sp) {
     a28:	2a74      	cmp	r2, #116	; 0x74
     a2a:	d026      	beq.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     a2c:	2a7a      	cmp	r2, #122	; 0x7a
     a2e:	d1db      	bne.n	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
		conv->length_mod = LENGTH_Z;
     a30:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a34:	2206      	movs	r2, #6
     a36:	e00d      	b.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
		if (*++sp == 'h') {
     a38:	785a      	ldrb	r2, [r3, #1]
     a3a:	2a68      	cmp	r2, #104	; 0x68
     a3c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a40:	d106      	bne.n	a50 <CONFIG_ISR_STACK_SIZE+0x250>
			conv->length_mod = LENGTH_HH;
     a42:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a44:	f361 02c6 	bfi	r2, r1, #3, #4
     a48:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     a4c:	1c9f      	adds	r7, r3, #2
     a4e:	e7cc      	b.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
			conv->length_mod = LENGTH_H;
     a50:	4613      	mov	r3, r2
     a52:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     a54:	f362 03c6 	bfi	r3, r2, #3, #4
     a58:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     a5c:	e7c5      	b.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
		if (*++sp == 'l') {
     a5e:	785a      	ldrb	r2, [r3, #1]
     a60:	2a6c      	cmp	r2, #108	; 0x6c
     a62:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a66:	d101      	bne.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
			conv->length_mod = LENGTH_LL;
     a68:	2104      	movs	r1, #4
     a6a:	e7eb      	b.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
			conv->length_mod = LENGTH_L;
     a6c:	4613      	mov	r3, r2
     a6e:	2203      	movs	r2, #3
     a70:	e7f0      	b.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
		conv->length_mod = LENGTH_J;
     a72:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a76:	2205      	movs	r2, #5
     a78:	e7ec      	b.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
		conv->length_mod = LENGTH_T;
     a7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a7e:	2207      	movs	r2, #7
     a80:	e7e8      	b.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
		conv->unsupported = true;
     a82:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     a86:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     a8a:	f023 0302 	bic.w	r3, r3, #2
     a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     a92:	f043 0302 	orr.w	r3, r3, #2
     a96:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     a9a:	e7a6      	b.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
	switch (conv->specifier) {
     a9c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     aa0:	2920      	cmp	r1, #32
     aa2:	f200 8084 	bhi.w	bae <CONFIG_ISR_STACK_SIZE+0x3ae>
     aa6:	a001      	add	r0, pc, #4	; (adr r0, aac <CONFIG_ISR_STACK_SIZE+0x2ac>)
     aa8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     aac:	00000b71 	.word	0x00000b71
     ab0:	00000baf 	.word	0x00000baf
     ab4:	00000baf 	.word	0x00000baf
     ab8:	00000baf 	.word	0x00000baf
     abc:	00000baf 	.word	0x00000baf
     ac0:	00000baf 	.word	0x00000baf
     ac4:	00000baf 	.word	0x00000baf
     ac8:	00000baf 	.word	0x00000baf
     acc:	00000baf 	.word	0x00000baf
     ad0:	00000a0d 	.word	0x00000a0d
     ad4:	00000baf 	.word	0x00000baf
     ad8:	00000b71 	.word	0x00000b71
     adc:	00000b31 	.word	0x00000b31
     ae0:	00000a0d 	.word	0x00000a0d
     ae4:	00000a0d 	.word	0x00000a0d
     ae8:	00000a0d 	.word	0x00000a0d
     aec:	00000baf 	.word	0x00000baf
     af0:	00000b31 	.word	0x00000b31
     af4:	00000baf 	.word	0x00000baf
     af8:	00000baf 	.word	0x00000baf
     afc:	00000baf 	.word	0x00000baf
     b00:	00000baf 	.word	0x00000baf
     b04:	00000b79 	.word	0x00000b79
     b08:	00000b71 	.word	0x00000b71
     b0c:	00000b95 	.word	0x00000b95
     b10:	00000baf 	.word	0x00000baf
     b14:	00000baf 	.word	0x00000baf
     b18:	00000b95 	.word	0x00000b95
     b1c:	00000baf 	.word	0x00000baf
     b20:	00000b71 	.word	0x00000b71
     b24:	00000baf 	.word	0x00000baf
     b28:	00000baf 	.word	0x00000baf
     b2c:	00000b71 	.word	0x00000b71
		conv->specifier_cat = SPECIFIER_SINT;
     b30:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b34:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     b36:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     b3a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b3e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     b40:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     b44:	bf02      	ittt	eq
     b46:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     b4a:	f041 0101 	orreq.w	r1, r1, #1
     b4e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     b52:	2a63      	cmp	r2, #99	; 0x63
     b54:	d131      	bne.n	bba <CONFIG_ISR_STACK_SIZE+0x3ba>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b56:	3b00      	subs	r3, #0
     b58:	bf18      	it	ne
     b5a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     b5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b60:	f3c2 0140 	ubfx	r1, r2, #1, #1
     b64:	430b      	orrs	r3, r1
     b66:	f363 0241 	bfi	r2, r3, #1, #1
     b6a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b6e:	e6d8      	b.n	922 <CONFIG_ISR_STACK_SIZE+0x122>
		conv->specifier_cat = SPECIFIER_UINT;
     b70:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b74:	2002      	movs	r0, #2
     b76:	e7de      	b.n	b36 <CONFIG_ISR_STACK_SIZE+0x336>
		conv->specifier_cat = SPECIFIER_PTR;
     b78:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b7c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b80:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     b84:	2103      	movs	r1, #3
     b86:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b8a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     b8c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b90:	4143      	adcs	r3, r0
     b92:	e7e3      	b.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
		conv->specifier_cat = SPECIFIER_PTR;
     b94:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b98:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     b9a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b9e:	f361 0202 	bfi	r2, r1, #0, #3
     ba2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     ba6:	bf14      	ite	ne
     ba8:	2301      	movne	r3, #1
     baa:	2300      	moveq	r3, #0
     bac:	e7d6      	b.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
		conv->invalid = true;
     bae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     bb2:	f043 0301 	orr.w	r3, r3, #1
     bb6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     bba:	2300      	movs	r3, #0
     bbc:	e7ce      	b.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
		} else if (conv->width_present) {
     bbe:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     bc2:	2a00      	cmp	r2, #0
			width = conv->width_value;
     bc4:	bfb4      	ite	lt
     bc6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     bca:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     bce:	e6ba      	b.n	946 <CONFIG_ISR_STACK_SIZE+0x146>
		} else if (conv->prec_present) {
     bd0:	079b      	lsls	r3, r3, #30
     bd2:	f57f aec7 	bpl.w	964 <CONFIG_ISR_STACK_SIZE+0x164>
			precision = conv->prec_value;
     bd6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     bda:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     bde:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     be0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     be4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     be8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     bec:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     bee:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     bf2:	d138      	bne.n	c66 <CONFIG_ISR_STACK_SIZE+0x466>
			switch (length_mod) {
     bf4:	1ecb      	subs	r3, r1, #3
     bf6:	2b04      	cmp	r3, #4
     bf8:	d822      	bhi.n	c40 <CONFIG_ISR_STACK_SIZE+0x440>
     bfa:	e8df f003 	tbb	[pc, r3]
     bfe:	0903      	.short	0x0903
     c00:	2109      	.short	0x2109
     c02:	21          	.byte	0x21
     c03:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     c04:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     c08:	17da      	asrs	r2, r3, #31
     c0a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     c0e:	e006      	b.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
					(sint_value_type)va_arg(ap, intmax_t);
     c10:	3407      	adds	r4, #7
     c12:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     c16:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     c1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     c1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     c22:	f013 0603 	ands.w	r6, r3, #3
     c26:	d056      	beq.n	cd6 <CONFIG_ISR_STACK_SIZE+0x4d6>
			OUTS(sp, fp);
     c28:	9802      	ldr	r0, [sp, #8]
     c2a:	463b      	mov	r3, r7
     c2c:	4652      	mov	r2, sl
     c2e:	4659      	mov	r1, fp
     c30:	f003 fc28 	bl	4484 <outs>
     c34:	2800      	cmp	r0, #0
     c36:	f2c0 8142 	blt.w	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     c3a:	4405      	add	r5, r0
			continue;
     c3c:	46ba      	mov	sl, r7
     c3e:	e5d9      	b.n	7f4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c40:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     c44:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c46:	ea4f 72e3 	mov.w	r2, r3, asr #31
     c4a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c4e:	d105      	bne.n	c5c <CONFIG_ISR_STACK_SIZE+0x45c>
				value->uint = (unsigned char)value->uint;
     c50:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     c54:	930a      	str	r3, [sp, #40]	; 0x28
     c56:	2300      	movs	r3, #0
     c58:	930b      	str	r3, [sp, #44]	; 0x2c
     c5a:	e7e0      	b.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
			} else if (length_mod == LENGTH_H) {
     c5c:	2902      	cmp	r1, #2
     c5e:	d1de      	bne.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
				value->sint = (short)value->sint;
     c60:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     c64:	e7d0      	b.n	c08 <CONFIG_ISR_STACK_SIZE+0x408>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c66:	2b02      	cmp	r3, #2
     c68:	d123      	bne.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
			switch (length_mod) {
     c6a:	1ecb      	subs	r3, r1, #3
     c6c:	2b04      	cmp	r3, #4
     c6e:	d813      	bhi.n	c98 <CONFIG_ISR_STACK_SIZE+0x498>
     c70:	e8df f003 	tbb	[pc, r3]
     c74:	120a0a03 	.word	0x120a0a03
     c78:	12          	.byte	0x12
     c79:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     c7a:	6822      	ldr	r2, [r4, #0]
     c7c:	920a      	str	r2, [sp, #40]	; 0x28
     c7e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     c80:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     c82:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     c84:	4604      	mov	r4, r0
     c86:	e7ca      	b.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
					(uint_value_type)va_arg(ap,
     c88:	1de0      	adds	r0, r4, #7
     c8a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     c8e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     c92:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     c96:	e7f5      	b.n	c84 <CONFIG_ISR_STACK_SIZE+0x484>
					(uint_value_type)va_arg(ap, size_t);
     c98:	f854 3b04 	ldr.w	r3, [r4], #4
     c9c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c9e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     ca0:	f04f 0300 	mov.w	r3, #0
     ca4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     ca6:	d0d3      	beq.n	c50 <CONFIG_ISR_STACK_SIZE+0x450>
			} else if (length_mod == LENGTH_H) {
     ca8:	2902      	cmp	r1, #2
     caa:	d1b8      	bne.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
				value->uint = (unsigned short)value->uint;
     cac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     cb0:	e7d0      	b.n	c54 <CONFIG_ISR_STACK_SIZE+0x454>
		} else if (specifier_cat == SPECIFIER_FP) {
     cb2:	2b04      	cmp	r3, #4
     cb4:	d109      	bne.n	cca <CONFIG_ISR_STACK_SIZE+0x4ca>
					(sint_value_type)va_arg(ap, long long);
     cb6:	1de3      	adds	r3, r4, #7
     cb8:	f023 0307 	bic.w	r3, r3, #7
     cbc:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
     cc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     cc8:	e7a9      	b.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
		} else if (specifier_cat == SPECIFIER_PTR) {
     cca:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     ccc:	bf04      	itt	eq
     cce:	f854 3b04 	ldreq.w	r3, [r4], #4
     cd2:	930a      	streq	r3, [sp, #40]	; 0x28
     cd4:	e7a3      	b.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
		switch (conv->specifier) {
     cd6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     cda:	2878      	cmp	r0, #120	; 0x78
     cdc:	d8ae      	bhi.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
     cde:	2862      	cmp	r0, #98	; 0x62
     ce0:	d822      	bhi.n	d28 <CONFIG_ISR_STACK_SIZE+0x528>
     ce2:	2825      	cmp	r0, #37	; 0x25
     ce4:	f43f ad8f 	beq.w	806 <CONFIG_ISR_STACK_SIZE+0x6>
     ce8:	2858      	cmp	r0, #88	; 0x58
     cea:	d1a7      	bne.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
			bps = encode_uint(value->uint, conv, buf, bpe);
     cec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     cf0:	9300      	str	r3, [sp, #0]
     cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     cf6:	ab04      	add	r3, sp, #16
     cf8:	aa0c      	add	r2, sp, #48	; 0x30
     cfa:	f003 fb7d 	bl	43f8 <encode_uint>
     cfe:	4682      	mov	sl, r0
			if (precision >= 0) {
     d00:	f1b8 0f00 	cmp.w	r8, #0
     d04:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     d08:	db0c      	blt.n	d24 <CONFIG_ISR_STACK_SIZE+0x524>
				conv->flag_zero = false;
     d0a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     d0e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     d12:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     d16:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     d18:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     d1c:	d902      	bls.n	d24 <CONFIG_ISR_STACK_SIZE+0x524>
					conv->pad0_value = precision - (int)len;
     d1e:	eba8 0303 	sub.w	r3, r8, r3
     d22:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     d24:	4680      	mov	r8, r0
     d26:	e03d      	b.n	da4 <CONFIG_ISR_STACK_SIZE+0x5a4>
		switch (conv->specifier) {
     d28:	3863      	subs	r0, #99	; 0x63
     d2a:	2815      	cmp	r0, #21
     d2c:	d886      	bhi.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
     d2e:	a201      	add	r2, pc, #4	; (adr r2, d34 <CONFIG_ISR_STACK_SIZE+0x534>)
     d30:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     d34:	00000db5 	.word	0x00000db5
     d38:	00000e19 	.word	0x00000e19
     d3c:	00000c3d 	.word	0x00000c3d
     d40:	00000c3d 	.word	0x00000c3d
     d44:	00000c3d 	.word	0x00000c3d
     d48:	00000c3d 	.word	0x00000c3d
     d4c:	00000e19 	.word	0x00000e19
     d50:	00000c3d 	.word	0x00000c3d
     d54:	00000c3d 	.word	0x00000c3d
     d58:	00000c3d 	.word	0x00000c3d
     d5c:	00000c3d 	.word	0x00000c3d
     d60:	00000e73 	.word	0x00000e73
     d64:	00000e41 	.word	0x00000e41
     d68:	00000e45 	.word	0x00000e45
     d6c:	00000c3d 	.word	0x00000c3d
     d70:	00000c3d 	.word	0x00000c3d
     d74:	00000d8d 	.word	0x00000d8d
     d78:	00000c3d 	.word	0x00000c3d
     d7c:	00000e41 	.word	0x00000e41
     d80:	00000c3d 	.word	0x00000c3d
     d84:	00000c3d 	.word	0x00000c3d
     d88:	00000e41 	.word	0x00000e41
			if (precision >= 0) {
     d8c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     d90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     d94:	db0a      	blt.n	dac <CONFIG_ISR_STACK_SIZE+0x5ac>
				len = strnlen(bps, precision);
     d96:	4641      	mov	r1, r8
     d98:	4650      	mov	r0, sl
     d9a:	f003 fbb1 	bl	4500 <strnlen>
			bpe = bps + len;
     d9e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     da2:	2600      	movs	r6, #0
		if (bps == NULL) {
     da4:	f1ba 0f00 	cmp.w	sl, #0
     da8:	d10c      	bne.n	dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>
     daa:	e747      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
				len = strlen(bps);
     dac:	4650      	mov	r0, sl
     dae:	f003 fba0 	bl	44f2 <strlen>
     db2:	e7f4      	b.n	d9e <CONFIG_ISR_STACK_SIZE+0x59e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     db6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     dba:	2600      	movs	r6, #0
			bps = buf;
     dbc:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     dc0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     dc4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     dc8:	b106      	cbz	r6, dcc <CONFIG_ISR_STACK_SIZE+0x5cc>
			nj_len += 1U;
     dca:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     dcc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     dd0:	06d0      	lsls	r0, r2, #27
     dd2:	d568      	bpl.n	ea6 <CONFIG_ISR_STACK_SIZE+0x6a6>
			nj_len += 2U;
     dd4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     dd6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     dd8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     dda:	bf48      	it	mi
     ddc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     dde:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     de0:	bf48      	it	mi
     de2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     de4:	f1b9 0f00 	cmp.w	r9, #0
     de8:	dd76      	ble.n	ed8 <CONFIG_ISR_STACK_SIZE+0x6d8>
			if (!conv->flag_dash) {
     dea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     dee:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     df2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     df6:	9303      	str	r3, [sp, #12]
     df8:	0753      	lsls	r3, r2, #29
     dfa:	d46d      	bmi.n	ed8 <CONFIG_ISR_STACK_SIZE+0x6d8>
				if (conv->flag_zero) {
     dfc:	0650      	lsls	r0, r2, #25
     dfe:	d561      	bpl.n	ec4 <CONFIG_ISR_STACK_SIZE+0x6c4>
					if (sign != 0) {
     e00:	b146      	cbz	r6, e14 <CONFIG_ISR_STACK_SIZE+0x614>
						OUTC(sign);
     e02:	9b02      	ldr	r3, [sp, #8]
     e04:	4659      	mov	r1, fp
     e06:	4630      	mov	r0, r6
     e08:	4798      	blx	r3
     e0a:	2800      	cmp	r0, #0
     e0c:	db57      	blt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
						sign = 0;
     e0e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     e10:	3501      	adds	r5, #1
						sign = 0;
     e12:	461e      	mov	r6, r3
					pad = '0';
     e14:	2330      	movs	r3, #48	; 0x30
     e16:	e056      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
			if (conv->flag_plus) {
     e18:	071e      	lsls	r6, r3, #28
     e1a:	d40f      	bmi.n	e3c <CONFIG_ISR_STACK_SIZE+0x63c>
				sign = ' ';
     e1c:	f013 0610 	ands.w	r6, r3, #16
     e20:	bf18      	it	ne
     e22:	2620      	movne	r6, #32
			sint = value->sint;
     e24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     e28:	2b00      	cmp	r3, #0
     e2a:	f6bf af5f 	bge.w	cec <CONFIG_ISR_STACK_SIZE+0x4ec>
				value->uint = (uint_value_type)-sint;
     e2e:	4252      	negs	r2, r2
     e30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     e34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     e38:	262d      	movs	r6, #45	; 0x2d
     e3a:	e757      	b.n	cec <CONFIG_ISR_STACK_SIZE+0x4ec>
				sign = '+';
     e3c:	262b      	movs	r6, #43	; 0x2b
     e3e:	e7f1      	b.n	e24 <CONFIG_ISR_STACK_SIZE+0x624>
		switch (conv->specifier) {
     e40:	2600      	movs	r6, #0
     e42:	e753      	b.n	cec <CONFIG_ISR_STACK_SIZE+0x4ec>
			if (value->ptr != NULL) {
     e44:	980a      	ldr	r0, [sp, #40]	; 0x28
     e46:	b340      	cbz	r0, e9a <CONFIG_ISR_STACK_SIZE+0x69a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e48:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     e4c:	9300      	str	r3, [sp, #0]
     e4e:	aa0c      	add	r2, sp, #48	; 0x30
     e50:	ab04      	add	r3, sp, #16
     e52:	2100      	movs	r1, #0
     e54:	f003 fad0 	bl	43f8 <encode_uint>
				conv->altform_0c = true;
     e58:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     e5c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     e60:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     e64:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e68:	4682      	mov	sl, r0
				conv->altform_0c = true;
     e6a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     e6e:	2600      	movs	r6, #0
				goto prec_int_pad0;
     e70:	e746      	b.n	d00 <CONFIG_ISR_STACK_SIZE+0x500>
				store_count(conv, value->ptr, count);
     e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     e74:	2907      	cmp	r1, #7
     e76:	f63f aee1 	bhi.w	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
     e7a:	e8df f001 	tbb	[pc, r1]
     e7e:	040c      	.short	0x040c
     e80:	08080c06 	.word	0x08080c06
     e84:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     e86:	701d      	strb	r5, [r3, #0]
		break;
     e88:	e6d8      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
		*(short *)dp = (short)count;
     e8a:	801d      	strh	r5, [r3, #0]
		break;
     e8c:	e6d6      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
		*(intmax_t *)dp = (intmax_t)count;
     e8e:	17ea      	asrs	r2, r5, #31
     e90:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     e94:	e6d2      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e96:	601d      	str	r5, [r3, #0]
		break;
     e98:	e6d0      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
			bps = "(nil)";
     e9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; f64 <CONFIG_ISR_STACK_SIZE+0x764>
     e9e:	4606      	mov	r6, r0
			bpe = bps + 5;
     ea0:	f10a 0805 	add.w	r8, sl, #5
     ea4:	e78e      	b.n	dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>
		} else if (conv->altform_0) {
     ea6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     ea8:	bf48      	it	mi
     eaa:	3301      	addmi	r3, #1
     eac:	e793      	b.n	dd6 <CONFIG_ISR_STACK_SIZE+0x5d6>
					OUTC(pad);
     eae:	4618      	mov	r0, r3
     eb0:	9303      	str	r3, [sp, #12]
     eb2:	4659      	mov	r1, fp
     eb4:	9b02      	ldr	r3, [sp, #8]
     eb6:	4798      	blx	r3
     eb8:	2800      	cmp	r0, #0
     eba:	9b03      	ldr	r3, [sp, #12]
     ebc:	da04      	bge.n	ec8 <CONFIG_ISR_STACK_SIZE+0x6c8>
#undef OUTS
#undef OUTC
}
     ebe:	b011      	add	sp, #68	; 0x44
     ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     ec4:	2320      	movs	r3, #32
     ec6:	444d      	add	r5, r9
     ec8:	464a      	mov	r2, r9
				while (width-- > 0) {
     eca:	2a00      	cmp	r2, #0
     ecc:	eba5 0109 	sub.w	r1, r5, r9
     ed0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     ed4:	dceb      	bgt.n	eae <CONFIG_ISR_STACK_SIZE+0x6ae>
     ed6:	460d      	mov	r5, r1
		if (sign != 0) {
     ed8:	b136      	cbz	r6, ee8 <CONFIG_ISR_STACK_SIZE+0x6e8>
			OUTC(sign);
     eda:	9b02      	ldr	r3, [sp, #8]
     edc:	4659      	mov	r1, fp
     ede:	4630      	mov	r0, r6
     ee0:	4798      	blx	r3
     ee2:	2800      	cmp	r0, #0
     ee4:	dbeb      	blt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     ee6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     ee8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     eec:	06d9      	lsls	r1, r3, #27
     eee:	d401      	bmi.n	ef4 <CONFIG_ISR_STACK_SIZE+0x6f4>
     ef0:	071a      	lsls	r2, r3, #28
     ef2:	d506      	bpl.n	f02 <CONFIG_ISR_STACK_SIZE+0x702>
				OUTC('0');
     ef4:	9b02      	ldr	r3, [sp, #8]
     ef6:	4659      	mov	r1, fp
     ef8:	2030      	movs	r0, #48	; 0x30
     efa:	4798      	blx	r3
     efc:	2800      	cmp	r0, #0
     efe:	dbde      	blt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     f00:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     f02:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f06:	06db      	lsls	r3, r3, #27
     f08:	d507      	bpl.n	f1a <CONFIG_ISR_STACK_SIZE+0x71a>
				OUTC(conv->specifier);
     f0a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f0e:	9b02      	ldr	r3, [sp, #8]
     f10:	4659      	mov	r1, fp
     f12:	4798      	blx	r3
     f14:	2800      	cmp	r0, #0
     f16:	dbd2      	blt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     f18:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     f1a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     f1c:	442e      	add	r6, r5
     f1e:	1b73      	subs	r3, r6, r5
     f20:	2b00      	cmp	r3, #0
     f22:	dc16      	bgt.n	f52 <CONFIG_ISR_STACK_SIZE+0x752>
			OUTS(bps, bpe);
     f24:	9802      	ldr	r0, [sp, #8]
     f26:	4643      	mov	r3, r8
     f28:	4652      	mov	r2, sl
     f2a:	4659      	mov	r1, fp
     f2c:	f003 faaa 	bl	4484 <outs>
     f30:	2800      	cmp	r0, #0
     f32:	dbc4      	blt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     f34:	4405      	add	r5, r0
		while (width > 0) {
     f36:	44a9      	add	r9, r5
     f38:	eba9 0305 	sub.w	r3, r9, r5
     f3c:	2b00      	cmp	r3, #0
     f3e:	f77f ae7d 	ble.w	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
			OUTC(' ');
     f42:	9b02      	ldr	r3, [sp, #8]
     f44:	4659      	mov	r1, fp
     f46:	2020      	movs	r0, #32
     f48:	4798      	blx	r3
     f4a:	2800      	cmp	r0, #0
     f4c:	dbb7      	blt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     f4e:	3501      	adds	r5, #1
			--width;
     f50:	e7f2      	b.n	f38 <CONFIG_ISR_STACK_SIZE+0x738>
				OUTC('0');
     f52:	9b02      	ldr	r3, [sp, #8]
     f54:	4659      	mov	r1, fp
     f56:	2030      	movs	r0, #48	; 0x30
     f58:	4798      	blx	r3
     f5a:	2800      	cmp	r0, #0
     f5c:	dbaf      	blt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
     f5e:	3501      	adds	r5, #1
     f60:	e7dd      	b.n	f1e <CONFIG_ISR_STACK_SIZE+0x71e>
     f62:	bf00      	nop
     f64:	0000527c 	.word	0x0000527c

00000f68 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f6c:	4605      	mov	r5, r0
     f6e:	f04f 0320 	mov.w	r3, #32
     f72:	f3ef 8611 	mrs	r6, BASEPRI
     f76:	f383 8812 	msr	BASEPRI_MAX, r3
     f7a:	f3bf 8f6f 	isb	sy
	return list->head;
     f7e:	4b0e      	ldr	r3, [pc, #56]	; (fb8 <pm_state_notify+0x50>)
     f80:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f82:	b19c      	cbz	r4, fac <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
     f84:	4f0d      	ldr	r7, [pc, #52]	; (fbc <pm_state_notify+0x54>)
     f86:	f8df 8038 	ldr.w	r8, [pc, #56]	; fc0 <pm_state_notify+0x58>
     f8a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
     f8e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     f92:	2d00      	cmp	r5, #0
     f94:	bf08      	it	eq
     f96:	4613      	moveq	r3, r2
		if (callback) {
     f98:	b12b      	cbz	r3, fa6 <pm_state_notify+0x3e>
			callback(z_power_states[_current_cpu->id].state);
     f9a:	f898 2014 	ldrb.w	r2, [r8, #20]
     f9e:	fb09 f202 	mul.w	r2, r9, r2
     fa2:	5cb8      	ldrb	r0, [r7, r2]
     fa4:	4798      	blx	r3
	return node->next;
     fa6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     fa8:	2c00      	cmp	r4, #0
     faa:	d1f0      	bne.n	f8e <pm_state_notify+0x26>
	__asm__ volatile(
     fac:	f386 8811 	msr	BASEPRI, r6
     fb0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fb8:	20000204 	.word	0x20000204
     fbc:	20000210 	.word	0x20000210
     fc0:	20000370 	.word	0x20000370

00000fc4 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fc4:	f000 031f 	and.w	r3, r0, #31
     fc8:	2201      	movs	r2, #1
     fca:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     fcc:	4b0a      	ldr	r3, [pc, #40]	; (ff8 <atomic_test_and_set_bit.constprop.0+0x34>)
     fce:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
     fd2:	0940      	lsrs	r0, r0, #5
     fd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     fd8:	e850 3f00 	ldrex	r3, [r0]
     fdc:	ea43 0102 	orr.w	r1, r3, r2
     fe0:	e840 1c00 	strex	ip, r1, [r0]
     fe4:	f1bc 0f00 	cmp.w	ip, #0
     fe8:	d1f6      	bne.n	fd8 <atomic_test_and_set_bit.constprop.0+0x14>
     fea:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
     fee:	421a      	tst	r2, r3
}
     ff0:	bf14      	ite	ne
     ff2:	2001      	movne	r0, #1
     ff4:	2000      	moveq	r0, #0
     ff6:	4770      	bx	lr
     ff8:	2000021c 	.word	0x2000021c

00000ffc <pm_system_resume>:

void pm_system_resume(void)
{
     ffc:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
     ffe:	4b1d      	ldr	r3, [pc, #116]	; (1074 <pm_system_resume+0x78>)
    1000:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1002:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1006:	f004 031f 	and.w	r3, r4, #31
    100a:	2201      	movs	r2, #1
    100c:	409a      	lsls	r2, r3
    100e:	4b1a      	ldr	r3, [pc, #104]	; (1078 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1010:	0961      	lsrs	r1, r4, #5
{
    1012:	b085      	sub	sp, #20
    1014:	43d0      	mvns	r0, r2
    1016:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    101a:	e853 1f00 	ldrex	r1, [r3]
    101e:	ea01 0500 	and.w	r5, r1, r0
    1022:	e843 5c00 	strex	ip, r5, [r3]
    1026:	f1bc 0f00 	cmp.w	ip, #0
    102a:	d1f6      	bne.n	101a <pm_system_resume+0x1e>
    102c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1030:	4211      	tst	r1, r2
    1032:	d017      	beq.n	1064 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1034:	4d11      	ldr	r5, [pc, #68]	; (107c <pm_system_resume+0x80>)
    1036:	220c      	movs	r2, #12
    1038:	fb02 5204 	mla	r2, r2, r4, r5
    103c:	ca07      	ldmia	r2, {r0, r1, r2}
    103e:	ab01      	add	r3, sp, #4
    1040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1044:	4a0e      	ldr	r2, [pc, #56]	; (1080 <pm_system_resume+0x84>)
    1046:	b17a      	cbz	r2, 1068 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1048:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    104c:	f003 fa8b 	bl	4566 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1050:	2000      	movs	r0, #0
    1052:	f7ff ff89 	bl	f68 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1056:	230c      	movs	r3, #12
    1058:	435c      	muls	r4, r3
    105a:	192a      	adds	r2, r5, r4
    105c:	2300      	movs	r3, #0
    105e:	512b      	str	r3, [r5, r4]
    1060:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1064:	b005      	add	sp, #20
    1066:	bd30      	pop	{r4, r5, pc}
    1068:	f382 8811 	msr	BASEPRI, r2
    106c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1070:	e7ee      	b.n	1050 <pm_system_resume+0x54>
    1072:	bf00      	nop
    1074:	20000370 	.word	0x20000370
    1078:	2000020c 	.word	0x2000020c
    107c:	20000210 	.word	0x20000210
    1080:	00004567 	.word	0x00004567

00001084 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1088:	4b37      	ldr	r3, [pc, #220]	; (1168 <pm_system_suspend+0xe4>)
    108a:	4c38      	ldr	r4, [pc, #224]	; (116c <pm_system_suspend+0xe8>)
    108c:	7d1d      	ldrb	r5, [r3, #20]
{
    108e:	b088      	sub	sp, #32
    1090:	4680      	mov	r8, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1092:	4628      	mov	r0, r5
    1094:	f7ff ff96 	bl	fc4 <atomic_test_and_set_bit.constprop.0>
    1098:	b960      	cbnz	r0, 10b4 <pm_system_suspend+0x30>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    109a:	466f      	mov	r7, sp
    109c:	4642      	mov	r2, r8
    109e:	4629      	mov	r1, r5
    10a0:	4638      	mov	r0, r7
    10a2:	f003 fa06 	bl	44b2 <pm_policy_next_state>
    10a6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    10aa:	260c      	movs	r6, #12
    10ac:	fb06 4605 	mla	r6, r6, r5, r4
    10b0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    10b4:	230c      	movs	r3, #12
    10b6:	436b      	muls	r3, r5
    10b8:	18e2      	adds	r2, r4, r3
    10ba:	5ce0      	ldrb	r0, [r4, r3]
    10bc:	096e      	lsrs	r6, r5, #5
    10be:	f005 071f 	and.w	r7, r5, #31
    10c2:	2800      	cmp	r0, #0
    10c4:	d03b      	beq.n	113e <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    10c6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    10ca:	d010      	beq.n	10ee <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    10cc:	f8d2 e008 	ldr.w	lr, [r2, #8]
    10d0:	4827      	ldr	r0, [pc, #156]	; (1170 <pm_system_suspend+0xec>)
    10d2:	4a28      	ldr	r2, [pc, #160]	; (1174 <pm_system_suspend+0xf0>)
    10d4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    10d8:	2100      	movs	r1, #0
    10da:	2300      	movs	r3, #0
    10dc:	fbee 010c 	umlal	r0, r1, lr, ip
    10e0:	f7ff f80e 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    10e4:	2101      	movs	r1, #1
    10e6:	eba8 0000 	sub.w	r0, r8, r0
    10ea:	f003 fd9c 	bl	4c26 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    10ee:	f002 f9b1 	bl	3454 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    10f2:	2001      	movs	r0, #1
    10f4:	f7ff ff38 	bl	f68 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    10f8:	f3bf 8f5b 	dmb	ish
    10fc:	4b1e      	ldr	r3, [pc, #120]	; (1178 <pm_system_suspend+0xf4>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    10fe:	2201      	movs	r2, #1
    1100:	40ba      	lsls	r2, r7
    1102:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    1106:	e853 1f00 	ldrex	r1, [r3]
    110a:	4311      	orrs	r1, r2
    110c:	e843 1000 	strex	r0, r1, [r3]
    1110:	2800      	cmp	r0, #0
    1112:	d1f8      	bne.n	1106 <pm_system_suspend+0x82>
    1114:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    1118:	230c      	movs	r3, #12
    111a:	fb03 4405 	mla	r4, r3, r5, r4
    111e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1122:	ab05      	add	r3, sp, #20
    1124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1128:	4a14      	ldr	r2, [pc, #80]	; (117c <pm_system_suspend+0xf8>)
    112a:	b11a      	cbz	r2, 1134 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    112c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1130:	f003 fa06 	bl	4540 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1134:	f7ff ff62 	bl	ffc <pm_system_resume>
	k_sched_unlock();
    1138:	f002 fb5a 	bl	37f0 <k_sched_unlock>
	bool ret = true;
    113c:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    113e:	4a10      	ldr	r2, [pc, #64]	; (1180 <pm_system_suspend+0xfc>)
    1140:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1144:	2301      	movs	r3, #1
    1146:	40bb      	lsls	r3, r7
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1148:	43db      	mvns	r3, r3
    114a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    114e:	e856 2f00 	ldrex	r2, [r6]
    1152:	401a      	ands	r2, r3
    1154:	e846 2100 	strex	r1, r2, [r6]
    1158:	2900      	cmp	r1, #0
    115a:	d1f8      	bne.n	114e <pm_system_suspend+0xca>
    115c:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1160:	b008      	add	sp, #32
    1162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1166:	bf00      	nop
    1168:	20000370 	.word	0x20000370
    116c:	20000210 	.word	0x20000210
    1170:	000f423f 	.word	0x000f423f
    1174:	000f4240 	.word	0x000f4240
    1178:	2000020c 	.word	0x2000020c
    117c:	00004541 	.word	0x00004541
    1180:	2000021c 	.word	0x2000021c

00001184 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1184:	4901      	ldr	r1, [pc, #4]	; (118c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1186:	2210      	movs	r2, #16
	str	r2, [r1]
    1188:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    118a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    118c:	e000ed10 	.word	0xe000ed10

00001190 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1190:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1192:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1194:	f380 8811 	msr	BASEPRI, r0
	isb
    1198:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    119c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    11a0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    11a2:	b662      	cpsie	i
	isb
    11a4:	f3bf 8f6f 	isb	sy

	bx	lr
    11a8:	4770      	bx	lr
    11aa:	bf00      	nop

000011ac <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    11ac:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    11ae:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    11b0:	f381 8811 	msr	BASEPRI, r1

	wfe
    11b4:	bf20      	wfe

	msr	BASEPRI, r0
    11b6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    11ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    11bc:	4770      	bx	lr
    11be:	bf00      	nop

000011c0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    11c0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11c2:	2b00      	cmp	r3, #0
    11c4:	db08      	blt.n	11d8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11c6:	2201      	movs	r2, #1
    11c8:	f000 001f 	and.w	r0, r0, #31
    11cc:	fa02 f000 	lsl.w	r0, r2, r0
    11d0:	095b      	lsrs	r3, r3, #5
    11d2:	4a02      	ldr	r2, [pc, #8]	; (11dc <arch_irq_enable+0x1c>)
    11d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    11d8:	4770      	bx	lr
    11da:	bf00      	nop
    11dc:	e000e100 	.word	0xe000e100

000011e0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    11e0:	4b05      	ldr	r3, [pc, #20]	; (11f8 <arch_irq_is_enabled+0x18>)
    11e2:	0942      	lsrs	r2, r0, #5
    11e4:	f000 001f 	and.w	r0, r0, #31
    11e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    11ec:	2301      	movs	r3, #1
    11ee:	fa03 f000 	lsl.w	r0, r3, r0
}
    11f2:	4010      	ands	r0, r2
    11f4:	4770      	bx	lr
    11f6:	bf00      	nop
    11f8:	e000e100 	.word	0xe000e100

000011fc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    11fc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    11fe:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1200:	bfa8      	it	ge
    1202:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1206:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    120a:	bfb8      	it	lt
    120c:	4b06      	ldrlt	r3, [pc, #24]	; (1228 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    120e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1212:	bfac      	ite	ge
    1214:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1218:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    121c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    121e:	bfb4      	ite	lt
    1220:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1222:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1226:	4770      	bx	lr
    1228:	e000ed14 	.word	0xe000ed14

0000122c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    122c:	bf30      	wfi
    b z_SysNmiOnReset
    122e:	f7ff bffd 	b.w	122c <z_SysNmiOnReset>
    1232:	bf00      	nop

00001234 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1234:	4a0f      	ldr	r2, [pc, #60]	; (1274 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1236:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1238:	4b0f      	ldr	r3, [pc, #60]	; (1278 <z_arm_prep_c+0x44>)
    123a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    123e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1244:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1248:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    124c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1254:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1258:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    125c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    1260:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1264:	f001 fe7c 	bl	2f60 <z_bss_zero>
	z_data_copy();
    1268:	f002 fbe4 	bl	3a34 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    126c:	f000 f9ca 	bl	1604 <z_arm_interrupt_init>
	z_cstart();
    1270:	f001 fe80 	bl	2f74 <z_cstart>
    1274:	00000000 	.word	0x00000000
    1278:	e000ed00 	.word	0xe000ed00

0000127c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    127c:	4a09      	ldr	r2, [pc, #36]	; (12a4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    127e:	490a      	ldr	r1, [pc, #40]	; (12a8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1280:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1282:	6809      	ldr	r1, [r1, #0]
    1284:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1286:	4909      	ldr	r1, [pc, #36]	; (12ac <arch_swap+0x30>)
	_current->arch.basepri = key;
    1288:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    128a:	684b      	ldr	r3, [r1, #4]
    128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1290:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1292:	2300      	movs	r3, #0
    1294:	f383 8811 	msr	BASEPRI, r3
    1298:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    129c:	6893      	ldr	r3, [r2, #8]
}
    129e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    12a0:	4770      	bx	lr
    12a2:	bf00      	nop
    12a4:	20000370 	.word	0x20000370
    12a8:	0000514c 	.word	0x0000514c
    12ac:	e000ed00 	.word	0xe000ed00

000012b0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    12b0:	4912      	ldr	r1, [pc, #72]	; (12fc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    12b2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    12b4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    12b8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    12ba:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    12be:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12c2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    12c4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    12c8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    12cc:	4f0c      	ldr	r7, [pc, #48]	; (1300 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    12ce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    12d2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    12d4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    12d6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    12d8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    12da:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    12dc:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    12de:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    12e2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    12e4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    12e6:	f000 f9cf 	bl	1688 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    12ea:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    12ee:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    12f2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    12f6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    12fa:	4770      	bx	lr
    ldr r1, =_kernel
    12fc:	20000370 	.word	0x20000370
    ldr v4, =_SCS_ICSR
    1300:	e000ed04 	.word	0xe000ed04

00001304 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1304:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1308:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    130a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    130e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1312:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1314:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1318:	2902      	cmp	r1, #2
    beq _oops
    131a:	d0ff      	beq.n	131c <_oops>

0000131c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    131c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    131e:	f003 f8cf 	bl	44c0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1322:	bd01      	pop	{r0, pc}

00001324 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1324:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1328:	9b00      	ldr	r3, [sp, #0]
    132a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    132e:	490a      	ldr	r1, [pc, #40]	; (1358 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1330:	9b01      	ldr	r3, [sp, #4]
    1332:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1336:	9b02      	ldr	r3, [sp, #8]
    1338:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    133c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1344:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1348:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    134c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    134e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1350:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1352:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1354:	4770      	bx	lr
    1356:	bf00      	nop
    1358:	00004059 	.word	0x00004059

0000135c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    135c:	4a09      	ldr	r2, [pc, #36]	; (1384 <z_check_thread_stack_fail+0x28>)
{
    135e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1360:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1362:	b170      	cbz	r0, 1382 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1364:	f113 0f16 	cmn.w	r3, #22
    1368:	6e40      	ldr	r0, [r0, #100]	; 0x64
    136a:	d005      	beq.n	1378 <z_check_thread_stack_fail+0x1c>
    136c:	f1a0 0220 	sub.w	r2, r0, #32
    1370:	429a      	cmp	r2, r3
    1372:	d805      	bhi.n	1380 <z_check_thread_stack_fail+0x24>
    1374:	4283      	cmp	r3, r0
    1376:	d203      	bcs.n	1380 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1378:	4281      	cmp	r1, r0
    137a:	bf28      	it	cs
    137c:	2000      	movcs	r0, #0
    137e:	4770      	bx	lr
    1380:	2000      	movs	r0, #0
}
    1382:	4770      	bx	lr
    1384:	20000370 	.word	0x20000370

00001388 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1388:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    138a:	4b09      	ldr	r3, [pc, #36]	; (13b0 <arch_switch_to_main_thread+0x28>)
    138c:	6098      	str	r0, [r3, #8]
{
    138e:	460d      	mov	r5, r1
    1390:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1392:	f000 f979 	bl	1688 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1396:	4620      	mov	r0, r4
    1398:	f385 8809 	msr	PSP, r5
    139c:	2100      	movs	r1, #0
    139e:	b663      	cpsie	if
    13a0:	f381 8811 	msr	BASEPRI, r1
    13a4:	f3bf 8f6f 	isb	sy
    13a8:	2200      	movs	r2, #0
    13aa:	2300      	movs	r3, #0
    13ac:	f002 fe54 	bl	4058 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    13b0:	20000370 	.word	0x20000370

000013b4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    13b4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    13b6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    13b8:	4a0b      	ldr	r2, [pc, #44]	; (13e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    13ba:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    13bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    13be:	bf1e      	ittt	ne
	movne	r1, #0
    13c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    13c2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    13c4:	f003 fb2d 	blne	4a22 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    13c8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    13ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    13ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    13d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    13d6:	4905      	ldr	r1, [pc, #20]	; (13ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    13d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    13da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    13dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    13de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    13e2:	4903      	ldr	r1, [pc, #12]	; (13f0 <_isr_wrapper+0x3c>)
	bx r1
    13e4:	4708      	bx	r1
    13e6:	0000      	.short	0x0000
	ldr r2, =_kernel
    13e8:	20000370 	.word	0x20000370
	ldr r1, =_sw_isr_table
    13ec:	00004e9c 	.word	0x00004e9c
	ldr r1, =z_arm_int_exit
    13f0:	000013f5 	.word	0x000013f5

000013f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    13f4:	4b04      	ldr	r3, [pc, #16]	; (1408 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    13f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    13f8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    13fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    13fc:	d003      	beq.n	1406 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    13fe:	4903      	ldr	r1, [pc, #12]	; (140c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1404:	600a      	str	r2, [r1, #0]

00001406 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1406:	4770      	bx	lr
	ldr r3, =_kernel
    1408:	20000370 	.word	0x20000370
	ldr r1, =_SCS_ICSR
    140c:	e000ed04 	.word	0xe000ed04

00001410 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1410:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1412:	4b19      	ldr	r3, [pc, #100]	; (1478 <mem_manage_fault+0x68>)
{
    1414:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    141a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    141c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    141e:	0790      	lsls	r0, r2, #30
    1420:	d519      	bpl.n	1456 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1422:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1426:	0612      	lsls	r2, r2, #24
    1428:	d515      	bpl.n	1456 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    142a:	b119      	cbz	r1, 1434 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    142e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1432:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    143a:	06d1      	lsls	r1, r2, #27
    143c:	d40e      	bmi.n	145c <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1440:	079a      	lsls	r2, r3, #30
    1442:	d40b      	bmi.n	145c <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1444:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1446:	4a0c      	ldr	r2, [pc, #48]	; (1478 <mem_manage_fault+0x68>)
    1448:	6a93      	ldr	r3, [r2, #40]	; 0x28
    144a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    144e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1450:	2300      	movs	r3, #0
    1452:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1454:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1456:	f06f 0015 	mvn.w	r0, #21
    145a:	e7eb      	b.n	1434 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    145c:	4b06      	ldr	r3, [pc, #24]	; (1478 <mem_manage_fault+0x68>)
    145e:	685b      	ldr	r3, [r3, #4]
    1460:	051b      	lsls	r3, r3, #20
    1462:	d5ef      	bpl.n	1444 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1464:	4629      	mov	r1, r5
    1466:	f7ff ff79 	bl	135c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    146a:	2800      	cmp	r0, #0
    146c:	d0ea      	beq.n	1444 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    146e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1472:	2002      	movs	r0, #2
    1474:	e7e7      	b.n	1446 <mem_manage_fault+0x36>
    1476:	bf00      	nop
    1478:	e000ed00 	.word	0xe000ed00

0000147c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    147c:	4b0d      	ldr	r3, [pc, #52]	; (14b4 <bus_fault.constprop.0+0x38>)
    147e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1484:	0592      	lsls	r2, r2, #22
    1486:	d508      	bpl.n	149a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1488:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    148a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    148c:	0412      	lsls	r2, r2, #16
    148e:	d504      	bpl.n	149a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1490:	b118      	cbz	r0, 149a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1498:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    149a:	4b06      	ldr	r3, [pc, #24]	; (14b4 <bus_fault.constprop.0+0x38>)
    149c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    149e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14a0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    14a2:	bf58      	it	pl
    14a4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    14a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    14a8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    14aa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    14ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    14b0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    14b2:	4770      	bx	lr
    14b4:	e000ed00 	.word	0xe000ed00

000014b8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    14b8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    14ba:	4b48      	ldr	r3, [pc, #288]	; (15dc <z_arm_fault+0x124>)
    14bc:	685b      	ldr	r3, [r3, #4]
{
    14be:	b08a      	sub	sp, #40	; 0x28
    14c0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    14c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    14c6:	2600      	movs	r6, #0
    14c8:	f386 8811 	msr	BASEPRI, r6
    14cc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    14d0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    14d4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    14d8:	d111      	bne.n	14fe <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    14da:	f002 010c 	and.w	r1, r2, #12
    14de:	2908      	cmp	r1, #8
    14e0:	d00d      	beq.n	14fe <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    14e2:	0711      	lsls	r1, r2, #28
    14e4:	d401      	bmi.n	14ea <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    14e6:	4605      	mov	r5, r0
			*nested_exc = true;
    14e8:	2601      	movs	r6, #1
	*recoverable = false;
    14ea:	2200      	movs	r2, #0
	switch (fault) {
    14ec:	3b03      	subs	r3, #3
	*recoverable = false;
    14ee:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    14f2:	2b03      	cmp	r3, #3
    14f4:	d86b      	bhi.n	15ce <z_arm_fault+0x116>
    14f6:	e8df f003 	tbb	[pc, r3]
    14fa:	5504      	.short	0x5504
    14fc:	5d59      	.short	0x5d59
		return NULL;
    14fe:	4635      	mov	r5, r6
    1500:	e7f3      	b.n	14ea <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1502:	4b36      	ldr	r3, [pc, #216]	; (15dc <z_arm_fault+0x124>)
    1504:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1506:	f014 0402 	ands.w	r4, r4, #2
    150a:	d160      	bne.n	15ce <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    150e:	2a00      	cmp	r2, #0
    1510:	db15      	blt.n	153e <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1514:	0052      	lsls	r2, r2, #1
    1516:	d512      	bpl.n	153e <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    1518:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    151a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    151e:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1522:	4291      	cmp	r1, r2
    1524:	d00a      	beq.n	153c <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    1526:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    152a:	b30a      	cbz	r2, 1570 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    152c:	f10d 0207 	add.w	r2, sp, #7
    1530:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1532:	4628      	mov	r0, r5
    1534:	f7ff ff6c 	bl	1410 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1538:	4604      	mov	r4, r0
		break;
    153a:	e000      	b.n	153e <z_arm_fault+0x86>
			reason = esf->basic.r0;
    153c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    153e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1542:	b99b      	cbnz	r3, 156c <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1544:	2220      	movs	r2, #32
    1546:	4629      	mov	r1, r5
    1548:	a802      	add	r0, sp, #8
    154a:	f002 ffe2 	bl	4512 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    154e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1550:	2e00      	cmp	r6, #0
    1552:	d03e      	beq.n	15d2 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1554:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1558:	b922      	cbnz	r2, 1564 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    155a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    155e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1562:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1564:	a902      	add	r1, sp, #8
    1566:	4620      	mov	r0, r4
    1568:	f002 ffa8 	bl	44bc <z_arm_fatal_error>
}
    156c:	b00a      	add	sp, #40	; 0x28
    156e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1570:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1574:	b12a      	cbz	r2, 1582 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    1576:	f10d 0107 	add.w	r1, sp, #7
    157a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    157c:	f7ff ff7e 	bl	147c <bus_fault.constprop.0>
    1580:	e7da      	b.n	1538 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    1582:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1584:	b292      	uxth	r2, r2
    1586:	2a00      	cmp	r2, #0
    1588:	d0d9      	beq.n	153e <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    158a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    158c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    158e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1598:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    159c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    15a0:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    15a2:	e7cc      	b.n	153e <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    15a4:	f10d 0207 	add.w	r2, sp, #7
    15a8:	2100      	movs	r1, #0
    15aa:	e7c2      	b.n	1532 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    15ac:	f10d 0107 	add.w	r1, sp, #7
    15b0:	2000      	movs	r0, #0
    15b2:	e7e3      	b.n	157c <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15b4:	4b09      	ldr	r3, [pc, #36]	; (15dc <z_arm_fault+0x124>)
    15b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    15ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    15bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    15be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    15c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    15c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15c4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    15c8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    15cc:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    15ce:	2400      	movs	r4, #0
    15d0:	e7b5      	b.n	153e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    15d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    15d6:	f023 0301 	bic.w	r3, r3, #1
    15da:	e7c2      	b.n	1562 <z_arm_fault+0xaa>
    15dc:	e000ed00 	.word	0xe000ed00

000015e0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    15e0:	4a02      	ldr	r2, [pc, #8]	; (15ec <z_arm_fault_init+0xc>)
    15e2:	6953      	ldr	r3, [r2, #20]
    15e4:	f043 0310 	orr.w	r3, r3, #16
    15e8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    15ea:	4770      	bx	lr
    15ec:	e000ed00 	.word	0xe000ed00

000015f0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    15f0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    15f4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    15f8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    15fa:	4672      	mov	r2, lr
	bl z_arm_fault
    15fc:	f7ff ff5c 	bl	14b8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1600:	bd01      	pop	{r0, pc}
    1602:	bf00      	nop

00001604 <z_arm_interrupt_init>:
    1604:	4804      	ldr	r0, [pc, #16]	; (1618 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1606:	2300      	movs	r3, #0
    1608:	2120      	movs	r1, #32
    160a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    160c:	3301      	adds	r3, #1
    160e:	2b30      	cmp	r3, #48	; 0x30
    1610:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1614:	d1f9      	bne.n	160a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1616:	4770      	bx	lr
    1618:	e000e100 	.word	0xe000e100

0000161c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    161c:	f003 fbd4 	bl	4dc8 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1620:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1622:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1626:	4808      	ldr	r0, [pc, #32]	; (1648 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1628:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    162c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    162e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1632:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1636:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1638:	4308      	orrs	r0, r1
    msr CONTROL, r0
    163a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    163e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1642:	f7ff fdf7 	bl	1234 <z_arm_prep_c>
    1646:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1648:	20000d40 	.word	0x20000d40

0000164c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    164c:	4b06      	ldr	r3, [pc, #24]	; (1668 <z_impl_k_thread_abort+0x1c>)
    164e:	689b      	ldr	r3, [r3, #8]
    1650:	4283      	cmp	r3, r0
    1652:	d107      	bne.n	1664 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1654:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1658:	b123      	cbz	r3, 1664 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    165a:	4a04      	ldr	r2, [pc, #16]	; (166c <z_impl_k_thread_abort+0x20>)
    165c:	6853      	ldr	r3, [r2, #4]
    165e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1662:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1664:	f002 b994 	b.w	3990 <z_thread_abort>
    1668:	20000370 	.word	0x20000370
    166c:	e000ed00 	.word	0xe000ed00

00001670 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1670:	4b02      	ldr	r3, [pc, #8]	; (167c <z_arm_configure_static_mpu_regions+0xc>)
    1672:	4a03      	ldr	r2, [pc, #12]	; (1680 <z_arm_configure_static_mpu_regions+0x10>)
    1674:	4803      	ldr	r0, [pc, #12]	; (1684 <z_arm_configure_static_mpu_regions+0x14>)
    1676:	2101      	movs	r1, #1
    1678:	f000 b86e 	b.w	1758 <arm_core_mpu_configure_static_mpu_regions>
    167c:	20040000 	.word	0x20040000
    1680:	20000000 	.word	0x20000000
    1684:	00005048 	.word	0x00005048

00001688 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1688:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    168a:	4b05      	ldr	r3, [pc, #20]	; (16a0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    168c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    168e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1690:	4a04      	ldr	r2, [pc, #16]	; (16a4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1692:	2120      	movs	r1, #32
    1694:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1698:	4618      	mov	r0, r3
    169a:	2101      	movs	r1, #1
    169c:	f000 b866 	b.w	176c <arm_core_mpu_configure_dynamic_mpu_regions>
    16a0:	20000220 	.word	0x20000220
    16a4:	150b0000 	.word	0x150b0000

000016a8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    16a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    16aa:	4f1f      	ldr	r7, [pc, #124]	; (1728 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    16ac:	2600      	movs	r6, #0
    16ae:	428e      	cmp	r6, r1
    16b0:	db01      	blt.n	16b6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    16b2:	4610      	mov	r0, r2
    16b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    16b6:	6844      	ldr	r4, [r0, #4]
    16b8:	b39c      	cbz	r4, 1722 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    16ba:	b153      	cbz	r3, 16d2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    16bc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    16c0:	ea14 0f0c 	tst.w	r4, ip
    16c4:	d118      	bne.n	16f8 <mpu_configure_regions+0x50>
		&&
    16c6:	2c1f      	cmp	r4, #31
    16c8:	d916      	bls.n	16f8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    16ca:	6805      	ldr	r5, [r0, #0]
		&&
    16cc:	ea1c 0f05 	tst.w	ip, r5
    16d0:	d112      	bne.n	16f8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    16d2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    16d4:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    16d6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    16da:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    16dc:	d90f      	bls.n	16fe <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    16de:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    16e2:	d80e      	bhi.n	1702 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    16e4:	3c01      	subs	r4, #1
    16e6:	fab4 f484 	clz	r4, r4
    16ea:	f1c4 041f 	rsb	r4, r4, #31
    16ee:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    16f0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    16f2:	ea4c 0404 	orr.w	r4, ip, r4
    16f6:	d906      	bls.n	1706 <mpu_configure_regions+0x5e>
			return -EINVAL;
    16f8:	f06f 0215 	mvn.w	r2, #21
    16fc:	e7d9      	b.n	16b2 <mpu_configure_regions+0xa>
		return REGION_32B;
    16fe:	2408      	movs	r4, #8
    1700:	e7f6      	b.n	16f0 <mpu_configure_regions+0x48>
		return REGION_4G;
    1702:	243e      	movs	r4, #62	; 0x3e
    1704:	e7f4      	b.n	16f0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1706:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    170a:	4315      	orrs	r5, r2
    170c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1710:	f044 0401 	orr.w	r4, r4, #1
    1714:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1718:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    171c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    171e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1722:	3601      	adds	r6, #1
    1724:	300c      	adds	r0, #12
    1726:	e7c2      	b.n	16ae <mpu_configure_regions+0x6>
    1728:	e000ed00 	.word	0xe000ed00

0000172c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    172c:	4b04      	ldr	r3, [pc, #16]	; (1740 <arm_core_mpu_enable+0x14>)
    172e:	2205      	movs	r2, #5
    1730:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1738:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    173c:	4770      	bx	lr
    173e:	bf00      	nop
    1740:	e000ed00 	.word	0xe000ed00

00001744 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1744:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1748:	4b02      	ldr	r3, [pc, #8]	; (1754 <arm_core_mpu_disable+0x10>)
    174a:	2200      	movs	r2, #0
    174c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1750:	4770      	bx	lr
    1752:	bf00      	nop
    1754:	e000ed00 	.word	0xe000ed00

00001758 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1758:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    175a:	4c03      	ldr	r4, [pc, #12]	; (1768 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    175c:	2301      	movs	r3, #1
    175e:	7822      	ldrb	r2, [r4, #0]
    1760:	f7ff ffa2 	bl	16a8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1764:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1766:	bd10      	pop	{r4, pc}
    1768:	200003a8 	.word	0x200003a8

0000176c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    176c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    176e:	4a09      	ldr	r2, [pc, #36]	; (1794 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1770:	2300      	movs	r3, #0
    1772:	7812      	ldrb	r2, [r2, #0]
    1774:	f7ff ff98 	bl	16a8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1778:	f110 0f16 	cmn.w	r0, #22
    177c:	d002      	beq.n	1784 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    177e:	4a06      	ldr	r2, [pc, #24]	; (1798 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1780:	2807      	cmp	r0, #7
    1782:	dd00      	ble.n	1786 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1784:	bd08      	pop	{r3, pc}
    1786:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    178a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    178e:	3001      	adds	r0, #1
    1790:	e7f6      	b.n	1780 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    1792:	bf00      	nop
    1794:	200003a8 	.word	0x200003a8
    1798:	e000ed00 	.word	0xe000ed00

0000179c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    179c:	4914      	ldr	r1, [pc, #80]	; (17f0 <z_arm_mpu_init+0x54>)
    179e:	6808      	ldr	r0, [r1, #0]
    17a0:	2808      	cmp	r0, #8
{
    17a2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    17a4:	d821      	bhi.n	17ea <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    17a6:	f7ff ffcd 	bl	1744 <arm_core_mpu_disable>
    17aa:	4c12      	ldr	r4, [pc, #72]	; (17f4 <z_arm_mpu_init+0x58>)
    17ac:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    17ae:	2200      	movs	r2, #0
    17b0:	4290      	cmp	r0, r2
    17b2:	f101 010c 	add.w	r1, r1, #12
    17b6:	d105      	bne.n	17c4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    17b8:	4b0f      	ldr	r3, [pc, #60]	; (17f8 <z_arm_mpu_init+0x5c>)
    17ba:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    17bc:	f7ff ffb6 	bl	172c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    17c0:	2000      	movs	r0, #0
}
    17c2:	bd10      	pop	{r4, pc}
    17c4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    17c8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    17cc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    17d0:	4313      	orrs	r3, r2
    17d2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    17d6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    17da:	f851 3c04 	ldr.w	r3, [r1, #-4]
    17de:	f043 0301 	orr.w	r3, r3, #1
    17e2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    17e6:	3201      	adds	r2, #1
    17e8:	e7e2      	b.n	17b0 <z_arm_mpu_init+0x14>
		return -1;
    17ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    17ee:	e7e8      	b.n	17c2 <z_arm_mpu_init+0x26>
    17f0:	00005054 	.word	0x00005054
    17f4:	e000ed00 	.word	0xe000ed00
    17f8:	200003a8 	.word	0x200003a8

000017fc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    17fc:	4b01      	ldr	r3, [pc, #4]	; (1804 <__stdout_hook_install+0x8>)
    17fe:	6018      	str	r0, [r3, #0]
}
    1800:	4770      	bx	lr
    1802:	bf00      	nop
    1804:	20000004 	.word	0x20000004

00001808 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    1808:	b510      	push	{r4, lr}
	__asm__ volatile(
    180a:	f04f 0320 	mov.w	r3, #32
    180e:	f3ef 8011 	mrs	r0, BASEPRI
    1812:	f383 8812 	msr	BASEPRI_MAX, r3
    1816:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    181a:	4a11      	ldr	r2, [pc, #68]	; (1860 <nordicsemi_nrf52_init+0x58>)
    181c:	2301      	movs	r3, #1
    181e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1826:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    182a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    182e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    1832:	2c08      	cmp	r4, #8
    1834:	d108      	bne.n	1848 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    1836:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    183a:	2905      	cmp	r1, #5
    183c:	d804      	bhi.n	1848 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    183e:	4c09      	ldr	r4, [pc, #36]	; (1864 <nordicsemi_nrf52_init+0x5c>)
    1840:	5c61      	ldrb	r1, [r4, r1]
    1842:	b109      	cbz	r1, 1848 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1844:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    1848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    184c:	2201      	movs	r2, #1
    184e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1852:	f380 8811 	msr	BASEPRI, r0
    1856:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    185a:	2000      	movs	r0, #0
    185c:	bd10      	pop	{r4, pc}
    185e:	bf00      	nop
    1860:	4001e000 	.word	0x4001e000
    1864:	00005291 	.word	0x00005291

00001868 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1868:	b120      	cbz	r0, 1874 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    186a:	4b03      	ldr	r3, [pc, #12]	; (1878 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    186c:	0180      	lsls	r0, r0, #6
    186e:	f043 0301 	orr.w	r3, r3, #1
    1872:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1874:	4770      	bx	lr
    1876:	bf00      	nop
    1878:	00005040 	.word	0x00005040

0000187c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    187c:	4b08      	ldr	r3, [pc, #32]	; (18a0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    187e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1880:	1ac3      	subs	r3, r0, r3
{
    1882:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1884:	4907      	ldr	r1, [pc, #28]	; (18a4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1886:	109b      	asrs	r3, r3, #2
{
    1888:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    188a:	4359      	muls	r1, r3
    188c:	4806      	ldr	r0, [pc, #24]	; (18a8 <onoff_stop+0x2c>)
    188e:	2240      	movs	r2, #64	; 0x40
    1890:	f002 fe90 	bl	45b4 <stop>
	notify(mgr, res);
    1894:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1896:	4601      	mov	r1, r0
	notify(mgr, res);
    1898:	4620      	mov	r0, r4
}
    189a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    189e:	4718      	bx	r3
    18a0:	2000023c 	.word	0x2000023c
    18a4:	b6db6db7 	.word	0xb6db6db7
    18a8:	00004e24 	.word	0x00004e24

000018ac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    18ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    18ae:	4c0c      	ldr	r4, [pc, #48]	; (18e0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18b0:	4a0c      	ldr	r2, [pc, #48]	; (18e4 <onoff_start+0x38>)
    18b2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    18b4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18b6:	9300      	str	r3, [sp, #0]
{
    18b8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18ba:	460b      	mov	r3, r1
    18bc:	490a      	ldr	r1, [pc, #40]	; (18e8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    18be:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18c0:	4361      	muls	r1, r4
{
    18c2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18c4:	4809      	ldr	r0, [pc, #36]	; (18ec <onoff_start+0x40>)
    18c6:	f002 fea1 	bl	460c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    18ca:	1e01      	subs	r1, r0, #0
    18cc:	da05      	bge.n	18da <onoff_start+0x2e>
		notify(mgr, err);
    18ce:	4630      	mov	r0, r6
    18d0:	462b      	mov	r3, r5
	}
}
    18d2:	b002      	add	sp, #8
    18d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    18d8:	4718      	bx	r3
}
    18da:	b002      	add	sp, #8
    18dc:	bd70      	pop	{r4, r5, r6, pc}
    18de:	bf00      	nop
    18e0:	2000023c 	.word	0x2000023c
    18e4:	0000467d 	.word	0x0000467d
    18e8:	b6db6db7 	.word	0xb6db6db7
    18ec:	00004e24 	.word	0x00004e24

000018f0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    18f0:	2200      	movs	r2, #0
{
    18f2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    18f4:	2101      	movs	r1, #1
{
    18f6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    18f8:	4610      	mov	r0, r2
    18fa:	f7ff fc7f 	bl	11fc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    18fe:	2000      	movs	r0, #0
    1900:	f7ff fc5e 	bl	11c0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1904:	480f      	ldr	r0, [pc, #60]	; (1944 <clk_init+0x54>)
    1906:	f000 fea9 	bl	265c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    190a:	4b0f      	ldr	r3, [pc, #60]	; (1948 <clk_init+0x58>)
    190c:	4298      	cmp	r0, r3
    190e:	d115      	bne.n	193c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1910:	f002 ffbc 	bl	488c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1914:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1916:	490d      	ldr	r1, [pc, #52]	; (194c <clk_init+0x5c>)
    1918:	4630      	mov	r0, r6
    191a:	f002 fb41 	bl	3fa0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    191e:	2800      	cmp	r0, #0
    1920:	db0b      	blt.n	193a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    1922:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1924:	4909      	ldr	r1, [pc, #36]	; (194c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1926:	2501      	movs	r5, #1
    1928:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    192a:	f104 001c 	add.w	r0, r4, #28
    192e:	f002 fb37 	bl	3fa0 <onoff_manager_init>
		if (err < 0) {
    1932:	2800      	cmp	r0, #0
    1934:	db01      	blt.n	193a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1936:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1938:	2000      	movs	r0, #0
}
    193a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    193c:	f06f 0004 	mvn.w	r0, #4
    1940:	e7fb      	b.n	193a <clk_init+0x4a>
    1942:	bf00      	nop
    1944:	00001985 	.word	0x00001985
    1948:	0bad0000 	.word	0x0bad0000
    194c:	0000509c 	.word	0x0000509c

00001950 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1950:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1952:	230c      	movs	r3, #12
    1954:	4809      	ldr	r0, [pc, #36]	; (197c <clkstarted_handle.constprop.0+0x2c>)
    1956:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1958:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    195a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    195c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1960:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1962:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1964:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1966:	4418      	add	r0, r3
    1968:	f002 fe11 	bl	458e <set_on_state>
	if (callback) {
    196c:	b12d      	cbz	r5, 197a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    196e:	4632      	mov	r2, r6
    1970:	462b      	mov	r3, r5
    1972:	4803      	ldr	r0, [pc, #12]	; (1980 <clkstarted_handle.constprop.0+0x30>)
}
    1974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1978:	4718      	bx	r3
}
    197a:	bd70      	pop	{r4, r5, r6, pc}
    197c:	2000023c 	.word	0x2000023c
    1980:	00004e24 	.word	0x00004e24

00001984 <clock_event_handler>:
	switch (event) {
    1984:	b110      	cbz	r0, 198c <clock_event_handler+0x8>
    1986:	2801      	cmp	r0, #1
    1988:	d004      	beq.n	1994 <clock_event_handler+0x10>
    198a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    198c:	4b03      	ldr	r3, [pc, #12]	; (199c <clock_event_handler+0x18>)
    198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1990:	075b      	lsls	r3, r3, #29
    1992:	d101      	bne.n	1998 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1994:	f7ff bfdc 	b.w	1950 <clkstarted_handle.constprop.0>
}
    1998:	4770      	bx	lr
    199a:	bf00      	nop
    199c:	2000023c 	.word	0x2000023c

000019a0 <generic_hfclk_start>:
{
    19a0:	b508      	push	{r3, lr}
	__asm__ volatile(
    19a2:	f04f 0320 	mov.w	r3, #32
    19a6:	f3ef 8111 	mrs	r1, BASEPRI
    19aa:	f383 8812 	msr	BASEPRI_MAX, r3
    19ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    19b2:	4a12      	ldr	r2, [pc, #72]	; (19fc <generic_hfclk_start+0x5c>)
    19b4:	6813      	ldr	r3, [r2, #0]
    19b6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    19ba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    19be:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    19c0:	d00c      	beq.n	19dc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    19c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    19c6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    19ca:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    19ce:	f013 0301 	ands.w	r3, r3, #1
    19d2:	d003      	beq.n	19dc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    19d4:	480a      	ldr	r0, [pc, #40]	; (1a00 <generic_hfclk_start+0x60>)
    19d6:	f002 fdda 	bl	458e <set_on_state>
			already_started = true;
    19da:	2301      	movs	r3, #1
	__asm__ volatile(
    19dc:	f381 8811 	msr	BASEPRI, r1
    19e0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    19e4:	b123      	cbz	r3, 19f0 <generic_hfclk_start+0x50>
}
    19e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    19ea:	2000      	movs	r0, #0
    19ec:	f7ff bfb0 	b.w	1950 <clkstarted_handle.constprop.0>
}
    19f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    19f4:	2001      	movs	r0, #1
    19f6:	f002 bf53 	b.w	48a0 <nrfx_clock_start>
    19fa:	bf00      	nop
    19fc:	2000028c 	.word	0x2000028c
    1a00:	2000027c 	.word	0x2000027c

00001a04 <api_blocking_start>:
{
    1a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a06:	2200      	movs	r2, #0
    1a08:	2301      	movs	r3, #1
    1a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a0e:	4a09      	ldr	r2, [pc, #36]	; (1a34 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a10:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a14:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a16:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a1a:	f002 fe28 	bl	466e <api_start>
	if (err < 0) {
    1a1e:	2800      	cmp	r0, #0
    1a20:	db05      	blt.n	1a2e <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1a26:	2300      	movs	r3, #0
    1a28:	4668      	mov	r0, sp
    1a2a:	f001 fc93 	bl	3354 <z_impl_k_sem_take>
}
    1a2e:	b005      	add	sp, #20
    1a30:	f85d fb04 	ldr.w	pc, [sp], #4
    1a34:	0000469b 	.word	0x0000469b

00001a38 <generic_hfclk_stop>:
    1a38:	4b09      	ldr	r3, [pc, #36]	; (1a60 <generic_hfclk_stop+0x28>)
    1a3a:	f3bf 8f5b 	dmb	ish
    1a3e:	e853 2f00 	ldrex	r2, [r3]
    1a42:	f022 0102 	bic.w	r1, r2, #2
    1a46:	e843 1000 	strex	r0, r1, [r3]
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d1f7      	bne.n	1a3e <generic_hfclk_stop+0x6>
    1a4e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1a52:	07d3      	lsls	r3, r2, #31
    1a54:	d402      	bmi.n	1a5c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1a56:	2001      	movs	r0, #1
    1a58:	f000 be10 	b.w	267c <nrfx_clock_stop>
}
    1a5c:	4770      	bx	lr
    1a5e:	bf00      	nop
    1a60:	2000028c 	.word	0x2000028c

00001a64 <z_nrf_clock_control_lf_on>:
{
    1a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1a68:	4939      	ldr	r1, [pc, #228]	; (1b50 <z_nrf_clock_control_lf_on+0xec>)
    1a6a:	f3bf 8f5b 	dmb	ish
    1a6e:	4607      	mov	r7, r0
    1a70:	2201      	movs	r2, #1
    1a72:	e851 3f00 	ldrex	r3, [r1]
    1a76:	e841 2000 	strex	r0, r2, [r1]
    1a7a:	2800      	cmp	r0, #0
    1a7c:	d1f9      	bne.n	1a72 <z_nrf_clock_control_lf_on+0xe>
    1a7e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1a82:	b933      	cbnz	r3, 1a92 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1a84:	4933      	ldr	r1, [pc, #204]	; (1b54 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    1a86:	4834      	ldr	r0, [pc, #208]	; (1b58 <z_nrf_clock_control_lf_on+0xf4>)
    1a88:	604b      	str	r3, [r1, #4]
    1a8a:	60cb      	str	r3, [r1, #12]
    1a8c:	608a      	str	r2, [r1, #8]
    1a8e:	f002 fa9a 	bl	3fc6 <onoff_request>
	switch (start_mode) {
    1a92:	1e7b      	subs	r3, r7, #1
    1a94:	2b01      	cmp	r3, #1
    1a96:	d82f      	bhi.n	1af8 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1a98:	2f01      	cmp	r7, #1
    1a9a:	d107      	bne.n	1aac <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1aa0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1aa4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1aa8:	2b01      	cmp	r3, #1
    1aaa:	d025      	beq.n	1af8 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1aac:	f002 ffb3 	bl	4a16 <k_is_in_isr>
    1ab0:	4604      	mov	r4, r0
    1ab2:	b918      	cbnz	r0, 1abc <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1ab4:	4b29      	ldr	r3, [pc, #164]	; (1b5c <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d141      	bne.n	1b40 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    1abc:	f04f 0320 	mov.w	r3, #32
    1ac0:	f3ef 8611 	mrs	r6, BASEPRI
    1ac4:	f383 8812 	msr	BASEPRI_MAX, r3
    1ac8:	f3bf 8f6f 	isb	sy
    1acc:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ace:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1b60 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1ad2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    1ad6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1ada:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1ade:	03d2      	lsls	r2, r2, #15
    1ae0:	d50c      	bpl.n	1afc <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1ae2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1ae6:	2b01      	cmp	r3, #1
    1ae8:	d001      	beq.n	1aee <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1aea:	2f01      	cmp	r7, #1
    1aec:	d106      	bne.n	1afc <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    1aee:	b30c      	cbz	r4, 1b34 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    1af0:	f386 8811 	msr	BASEPRI, r6
    1af4:	f3bf 8f6f 	isb	sy
}
    1af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1afc:	b1ac      	cbz	r4, 1b2a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1afe:	4630      	mov	r0, r6
    1b00:	f7ff fb54 	bl	11ac <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1b04:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d1e4      	bne.n	1ad6 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1b0c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1b10:	2a00      	cmp	r2, #0
    1b12:	d0e0      	beq.n	1ad6 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1b14:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1b18:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1b1c:	2301      	movs	r3, #1
    1b1e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    1b22:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1b26:	60ab      	str	r3, [r5, #8]
}
    1b28:	e7d5      	b.n	1ad6 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    1b2a:	2100      	movs	r1, #0
    1b2c:	2021      	movs	r0, #33	; 0x21
    1b2e:	f001 ff0f 	bl	3950 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1b32:	e7e7      	b.n	1b04 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    1b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b38:	2202      	movs	r2, #2
    1b3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1b3e:	e7db      	b.n	1af8 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    1b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b44:	2202      	movs	r2, #2
    1b46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1b4a:	4606      	mov	r6, r0
}
    1b4c:	e7bf      	b.n	1ace <z_nrf_clock_control_lf_on+0x6a>
    1b4e:	bf00      	nop
    1b50:	20000290 	.word	0x20000290
    1b54:	2000022c 	.word	0x2000022c
    1b58:	20000258 	.word	0x20000258
    1b5c:	200007b9 	.word	0x200007b9
    1b60:	e000e100 	.word	0xe000e100

00001b64 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1b64:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1b66:	4b08      	ldr	r3, [pc, #32]	; (1b88 <uart_console_init+0x24>)
    1b68:	4808      	ldr	r0, [pc, #32]	; (1b8c <uart_console_init+0x28>)
    1b6a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1b6c:	f002 ff22 	bl	49b4 <z_device_ready>
    1b70:	b138      	cbz	r0, 1b82 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    1b72:	4807      	ldr	r0, [pc, #28]	; (1b90 <uart_console_init+0x2c>)
    1b74:	f7ff fe42 	bl	17fc <__stdout_hook_install>
	__printk_hook_install(console_out);
    1b78:	4805      	ldr	r0, [pc, #20]	; (1b90 <uart_console_init+0x2c>)
    1b7a:	f7fe fd3f 	bl	5fc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1b7e:	2000      	movs	r0, #0
}
    1b80:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1b82:	f06f 0012 	mvn.w	r0, #18
    1b86:	e7fb      	b.n	1b80 <uart_console_init+0x1c>
    1b88:	20000294 	.word	0x20000294
    1b8c:	00004e84 	.word	0x00004e84
    1b90:	00001b95 	.word	0x00001b95

00001b94 <console_out>:
	if ('\n' == c) {
    1b94:	280a      	cmp	r0, #10
{
    1b96:	b538      	push	{r3, r4, r5, lr}
    1b98:	4d07      	ldr	r5, [pc, #28]	; (1bb8 <console_out+0x24>)
    1b9a:	4604      	mov	r4, r0
	if ('\n' == c) {
    1b9c:	d104      	bne.n	1ba8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1b9e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1ba0:	6883      	ldr	r3, [r0, #8]
    1ba2:	210d      	movs	r1, #13
    1ba4:	685b      	ldr	r3, [r3, #4]
    1ba6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1ba8:	6828      	ldr	r0, [r5, #0]
    1baa:	6883      	ldr	r3, [r0, #8]
    1bac:	b2e1      	uxtb	r1, r4
    1bae:	685b      	ldr	r3, [r3, #4]
    1bb0:	4798      	blx	r3
}
    1bb2:	4620      	mov	r0, r4
    1bb4:	bd38      	pop	{r3, r4, r5, pc}
    1bb6:	bf00      	nop
    1bb8:	20000294 	.word	0x20000294

00001bbc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1bbc:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1bbe:	6840      	ldr	r0, [r0, #4]
    1bc0:	7a04      	ldrb	r4, [r0, #8]
    1bc2:	f001 011f 	and.w	r1, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1bc6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
    1bca:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1bcc:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1bd0:	f04f 0500 	mov.w	r5, #0
    1bd4:	d104      	bne.n	1be0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    1bd6:	4620      	mov	r0, r4
    1bd8:	f000 fffe 	bl	2bd8 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    1bdc:	2000      	movs	r0, #0
    1bde:	e02d      	b.n	1c3c <gpio_nrfx_pin_interrupt_configure+0x80>
	if (mode == GPIO_INT_MODE_LEVEL) {
    1be0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1be4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1be8:	d12a      	bne.n	1c40 <gpio_nrfx_pin_interrupt_configure+0x84>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    1bee:	bf0c      	ite	eq
    1bf0:	2304      	moveq	r3, #4
    1bf2:	2305      	movne	r3, #5
	if (IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_GPIOTE) &&
    1bf4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1bf8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_GPIOTE) &&
    1bfc:	d12c      	bne.n	1c58 <gpio_nrfx_pin_interrupt_configure+0x9c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1bfe:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    1c00:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    1c02:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    1c06:	4a1d      	ldr	r2, [pc, #116]	; (1c7c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c08:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    1c0c:	bf18      	it	ne
    1c0e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1c16:	07db      	lsls	r3, r3, #31
    1c18:	d41e      	bmi.n	1c58 <gpio_nrfx_pin_interrupt_configure+0x9c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1c1a:	f10d 0507 	add.w	r5, sp, #7
    1c1e:	4629      	mov	r1, r5
    1c20:	4620      	mov	r0, r4
    1c22:	f000 ff3d 	bl	2aa0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1c26:	4b16      	ldr	r3, [pc, #88]	; (1c80 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1c28:	4298      	cmp	r0, r3
    1c2a:	d114      	bne.n	1c56 <gpio_nrfx_pin_interrupt_configure+0x9a>
			err = nrfx_gpiote_channel_alloc(&ch);
    1c2c:	4628      	mov	r0, r5
    1c2e:	f000 ff85 	bl	2b3c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1c32:	4b14      	ldr	r3, [pc, #80]	; (1c84 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1c34:	4298      	cmp	r0, r3
    1c36:	d00e      	beq.n	1c56 <gpio_nrfx_pin_interrupt_configure+0x9a>
				return -ENOMEM;
    1c38:	f06f 000b 	mvn.w	r0, #11
}
    1c3c:	b005      	add	sp, #20
    1c3e:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1c40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1c44:	d005      	beq.n	1c52 <gpio_nrfx_pin_interrupt_configure+0x96>
    1c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    1c4a:	bf0c      	ite	eq
    1c4c:	2302      	moveq	r3, #2
    1c4e:	2301      	movne	r3, #1
    1c50:	e7d0      	b.n	1bf4 <gpio_nrfx_pin_interrupt_configure+0x38>
    1c52:	2303      	movs	r3, #3
    1c54:	e7ce      	b.n	1bf4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    1c56:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1c58:	2300      	movs	r3, #0
    1c5a:	4619      	mov	r1, r3
    1c5c:	aa02      	add	r2, sp, #8
    1c5e:	4620      	mov	r0, r4
    1c60:	f000 fdf8 	bl	2854 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1c64:	4b07      	ldr	r3, [pc, #28]	; (1c84 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1c66:	4298      	cmp	r0, r3
    1c68:	d104      	bne.n	1c74 <gpio_nrfx_pin_interrupt_configure+0xb8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1c6a:	2101      	movs	r1, #1
    1c6c:	4620      	mov	r0, r4
    1c6e:	f000 ff6b 	bl	2b48 <nrfx_gpiote_trigger_enable>
    1c72:	e7b3      	b.n	1bdc <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    1c74:	f06f 0004 	mvn.w	r0, #4
    1c78:	e7e0      	b.n	1c3c <gpio_nrfx_pin_interrupt_configure+0x80>
    1c7a:	bf00      	nop
    1c7c:	50000300 	.word	0x50000300
    1c80:	0bad0004 	.word	0x0bad0004
    1c84:	0bad0000 	.word	0x0bad0000

00001c88 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1c88:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1c8a:	f000 ff47 	bl	2b1c <nrfx_gpiote_is_init>
    1c8e:	4604      	mov	r4, r0
    1c90:	b968      	cbnz	r0, 1cae <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1c92:	f000 ff1b 	bl	2acc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1c96:	4b08      	ldr	r3, [pc, #32]	; (1cb8 <gpio_nrfx_init+0x30>)
    1c98:	4298      	cmp	r0, r3
    1c9a:	d10a      	bne.n	1cb2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1c9c:	4807      	ldr	r0, [pc, #28]	; (1cbc <gpio_nrfx_init+0x34>)
    1c9e:	4621      	mov	r1, r4
    1ca0:	f000 fef8 	bl	2a94 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1ca4:	4622      	mov	r2, r4
    1ca6:	2105      	movs	r1, #5
    1ca8:	2006      	movs	r0, #6
    1caa:	f7ff faa7 	bl	11fc <z_arm_irq_priority_set>
		return 0;
    1cae:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1cb0:	bd10      	pop	{r4, pc}
		return -EIO;
    1cb2:	f06f 0004 	mvn.w	r0, #4
    1cb6:	e7fb      	b.n	1cb0 <gpio_nrfx_init+0x28>
    1cb8:	0bad0000 	.word	0x0bad0000
    1cbc:	00001cc1 	.word	0x00001cc1

00001cc0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1cc0:	0942      	lsrs	r2, r0, #5
{
    1cc2:	b570      	push	{r4, r5, r6, lr}
    1cc4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1cc6:	d002      	beq.n	1cce <nrfx_gpio_handler+0xe>
    1cc8:	2a01      	cmp	r2, #1
    1cca:	d015      	beq.n	1cf8 <nrfx_gpio_handler+0x38>
}
    1ccc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1cce:	4e0b      	ldr	r6, [pc, #44]	; (1cfc <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    1cd0:	6932      	ldr	r2, [r6, #16]
    1cd2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1cd4:	2900      	cmp	r1, #0
    1cd6:	d0f9      	beq.n	1ccc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    1cd8:	f003 031f 	and.w	r3, r3, #31
    1cdc:	2501      	movs	r5, #1
    1cde:	680c      	ldr	r4, [r1, #0]
    1ce0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    1ce2:	688a      	ldr	r2, [r1, #8]
    1ce4:	402a      	ands	r2, r5
    1ce6:	d002      	beq.n	1cee <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1ce8:	684b      	ldr	r3, [r1, #4]
    1cea:	4630      	mov	r0, r6
    1cec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1cee:	2c00      	cmp	r4, #0
    1cf0:	d0ec      	beq.n	1ccc <nrfx_gpio_handler+0xc>
    1cf2:	4621      	mov	r1, r4
    1cf4:	6824      	ldr	r4, [r4, #0]
    1cf6:	e7f4      	b.n	1ce2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1cf8:	4e01      	ldr	r6, [pc, #4]	; (1d00 <nrfx_gpio_handler+0x40>)
    1cfa:	e7e9      	b.n	1cd0 <nrfx_gpio_handler+0x10>
    1cfc:	00004e3c 	.word	0x00004e3c
    1d00:	00004e54 	.word	0x00004e54

00001d04 <gpio_nrfx_pin_configure>:
{
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
    1d06:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d08:	7a3b      	ldrb	r3, [r7, #8]
    1d0a:	f001 051f 	and.w	r5, r1, #31
{
    1d0e:	b085      	sub	sp, #20
    1d10:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d12:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    1d16:	4614      	mov	r4, r2
    1d18:	b9c2      	cbnz	r2, 1d4c <gpio_nrfx_pin_configure+0x48>
	err = nrfx_gpiote_channel_get(pin, &ch);
    1d1a:	a902      	add	r1, sp, #8
    1d1c:	4628      	mov	r0, r5
    1d1e:	f000 febf 	bl	2aa0 <nrfx_gpiote_channel_get>
    1d22:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    1d24:	4628      	mov	r0, r5
    1d26:	f000 ff7f 	bl	2c28 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    1d2a:	4b41      	ldr	r3, [pc, #260]	; (1e30 <gpio_nrfx_pin_configure+0x12c>)
    1d2c:	4298      	cmp	r0, r3
    1d2e:	d003      	beq.n	1d38 <gpio_nrfx_pin_configure+0x34>
		return -EIO;
    1d30:	f06f 0004 	mvn.w	r0, #4
}
    1d34:	b005      	add	sp, #20
    1d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (free_ch) {
    1d38:	4284      	cmp	r4, r0
    1d3a:	d105      	bne.n	1d48 <gpio_nrfx_pin_configure+0x44>
		err = nrfx_gpiote_channel_free(ch);
    1d3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1d40:	f000 fef6 	bl	2b30 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    1d44:	42a0      	cmp	r0, r4
    1d46:	d1f3      	bne.n	1d30 <gpio_nrfx_pin_configure+0x2c>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1d48:	2000      	movs	r0, #0
    1d4a:	e7f3      	b.n	1d34 <gpio_nrfx_pin_configure+0x30>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d4c:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d4e:	4619      	mov	r1, r3
    1d50:	aa02      	add	r2, sp, #8
    1d52:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d54:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d58:	f000 fd7c 	bl	2854 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1d5c:	4b34      	ldr	r3, [pc, #208]	; (1e30 <gpio_nrfx_pin_configure+0x12c>)
    1d5e:	4298      	cmp	r0, r3
    1d60:	d002      	beq.n	1d68 <gpio_nrfx_pin_configure+0x64>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1d62:	f06f 0015 	mvn.w	r0, #21
    1d66:	e7e5      	b.n	1d34 <gpio_nrfx_pin_configure+0x30>
	if (flags & GPIO_OUTPUT) {
    1d68:	05a3      	lsls	r3, r4, #22
    1d6a:	d54e      	bpl.n	1e0a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1d6c:	4b31      	ldr	r3, [pc, #196]	; (1e34 <gpio_nrfx_pin_configure+0x130>)
    1d6e:	4a32      	ldr	r2, [pc, #200]	; (1e38 <gpio_nrfx_pin_configure+0x134>)
    1d70:	4023      	ands	r3, r4
    1d72:	4293      	cmp	r3, r2
    1d74:	d03a      	beq.n	1dec <gpio_nrfx_pin_configure+0xe8>
    1d76:	d80c      	bhi.n	1d92 <gpio_nrfx_pin_configure+0x8e>
    1d78:	2b06      	cmp	r3, #6
    1d7a:	d014      	beq.n	1da6 <gpio_nrfx_pin_configure+0xa2>
    1d7c:	d804      	bhi.n	1d88 <gpio_nrfx_pin_configure+0x84>
    1d7e:	b193      	cbz	r3, 1da6 <gpio_nrfx_pin_configure+0xa2>
    1d80:	2b02      	cmp	r3, #2
    1d82:	d1ee      	bne.n	1d62 <gpio_nrfx_pin_configure+0x5e>
    1d84:	2304      	movs	r3, #4
    1d86:	e00e      	b.n	1da6 <gpio_nrfx_pin_configure+0xa2>
    1d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1d8c:	d1e9      	bne.n	1d62 <gpio_nrfx_pin_configure+0x5e>
		*drive = NRF_GPIO_PIN_H0S1;
    1d8e:	2301      	movs	r3, #1
    1d90:	e009      	b.n	1da6 <gpio_nrfx_pin_configure+0xa2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1d92:	4a2a      	ldr	r2, [pc, #168]	; (1e3c <gpio_nrfx_pin_configure+0x138>)
    1d94:	4293      	cmp	r3, r2
    1d96:	d02b      	beq.n	1df0 <gpio_nrfx_pin_configure+0xec>
    1d98:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1d9c:	d02a      	beq.n	1df4 <gpio_nrfx_pin_configure+0xf0>
    1d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1da2:	d1de      	bne.n	1d62 <gpio_nrfx_pin_configure+0x5e>
		*drive = NRF_GPIO_PIN_S0H1;
    1da4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    1da6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1daa:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    1dae:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    1db2:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1db4:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    1db8:	bf54      	ite	pl
    1dba:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1dbe:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1dc0:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    1dc2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1dc6:	d517      	bpl.n	1df8 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	2101      	movs	r1, #1
    1dcc:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    1dd0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1dd4:	2200      	movs	r2, #0
    1dd6:	a901      	add	r1, sp, #4
    1dd8:	4628      	mov	r0, r5
    1dda:	f000 fde9 	bl	29b0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1dde:	4b14      	ldr	r3, [pc, #80]	; (1e30 <gpio_nrfx_pin_configure+0x12c>)
    1de0:	4298      	cmp	r0, r3
    1de2:	bf14      	ite	ne
    1de4:	f06f 0015 	mvnne.w	r0, #21
    1de8:	2000      	moveq	r0, #0
    1dea:	e7a3      	b.n	1d34 <gpio_nrfx_pin_configure+0x30>
		*drive = NRF_GPIO_PIN_H0D1;
    1dec:	2307      	movs	r3, #7
    1dee:	e7da      	b.n	1da6 <gpio_nrfx_pin_configure+0xa2>
		*drive = NRF_GPIO_PIN_D0H1;
    1df0:	2305      	movs	r3, #5
    1df2:	e7d8      	b.n	1da6 <gpio_nrfx_pin_configure+0xa2>
		*drive = NRF_GPIO_PIN_H0H1;
    1df4:	2303      	movs	r3, #3
    1df6:	e7d6      	b.n	1da6 <gpio_nrfx_pin_configure+0xa2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1df8:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1dfa:	bf41      	itttt	mi
    1dfc:	687b      	ldrmi	r3, [r7, #4]
    1dfe:	2101      	movmi	r1, #1
    1e00:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    1e04:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    1e08:	e7e4      	b.n	1dd4 <gpio_nrfx_pin_configure+0xd0>
	if (flags & GPIO_PULL_UP) {
    1e0a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e0c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    1e10:	bf54      	ite	pl
    1e12:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    1e16:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e18:	461a      	mov	r2, r3
    1e1a:	a901      	add	r1, sp, #4
    1e1c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1e1e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e22:	f000 fd17 	bl	2854 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1e26:	4b02      	ldr	r3, [pc, #8]	; (1e30 <gpio_nrfx_pin_configure+0x12c>)
    1e28:	4298      	cmp	r0, r3
    1e2a:	d08d      	beq.n	1d48 <gpio_nrfx_pin_configure+0x44>
    1e2c:	e799      	b.n	1d62 <gpio_nrfx_pin_configure+0x5e>
    1e2e:	bf00      	nop
    1e30:	0bad0000 	.word	0x0bad0000
    1e34:	00f00006 	.word	0x00f00006
    1e38:	00100006 	.word	0x00100006
    1e3c:	00400002 	.word	0x00400002

00001e40 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    1e40:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    1e42:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    1e46:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    1e48:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    1e4a:	6002      	str	r2, [r0, #0]
}
    1e4c:	4802      	ldr	r0, [pc, #8]	; (1e58 <nrf_gpio_pin_port_decode+0x18>)
    1e4e:	bf18      	it	ne
    1e50:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    1e54:	4770      	bx	lr
    1e56:	bf00      	nop
    1e58:	50000300 	.word	0x50000300

00001e5c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1e5e:	794b      	ldrb	r3, [r1, #5]
    1e60:	2b01      	cmp	r3, #1
    1e62:	d026      	beq.n	1eb2 <uarte_nrfx_configure+0x56>
    1e64:	2b03      	cmp	r3, #3
    1e66:	d121      	bne.n	1eac <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1e68:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1e6a:	798b      	ldrb	r3, [r1, #6]
    1e6c:	2b03      	cmp	r3, #3
    1e6e:	d11d      	bne.n	1eac <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1e70:	79cc      	ldrb	r4, [r1, #7]
    1e72:	b10c      	cbz	r4, 1e78 <uarte_nrfx_configure+0x1c>
    1e74:	2c01      	cmp	r4, #1
    1e76:	d119      	bne.n	1eac <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1e78:	790a      	ldrb	r2, [r1, #4]
    1e7a:	b112      	cbz	r2, 1e82 <uarte_nrfx_configure+0x26>
    1e7c:	2a02      	cmp	r2, #2
    1e7e:	d115      	bne.n	1eac <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1e80:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1e82:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1e84:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1e86:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1e8a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1e8c:	d065      	beq.n	1f5a <uarte_nrfx_configure+0xfe>
    1e8e:	d82d      	bhi.n	1eec <uarte_nrfx_configure+0x90>
    1e90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1e94:	d064      	beq.n	1f60 <uarte_nrfx_configure+0x104>
    1e96:	d816      	bhi.n	1ec6 <uarte_nrfx_configure+0x6a>
    1e98:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1e9c:	d062      	beq.n	1f64 <uarte_nrfx_configure+0x108>
    1e9e:	d80a      	bhi.n	1eb6 <uarte_nrfx_configure+0x5a>
    1ea0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1ea4:	d061      	beq.n	1f6a <uarte_nrfx_configure+0x10e>
    1ea6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1eaa:	d061      	beq.n	1f70 <uarte_nrfx_configure+0x114>
    1eac:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1eb0:	e052      	b.n	1f58 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    1eb2:	2600      	movs	r6, #0
    1eb4:	e7d9      	b.n	1e6a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1eb6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1eba:	d05c      	beq.n	1f76 <uarte_nrfx_configure+0x11a>
    1ebc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1ec0:	d1f4      	bne.n	1eac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1ec2:	4b37      	ldr	r3, [pc, #220]	; (1fa0 <uarte_nrfx_configure+0x144>)
    1ec4:	e03c      	b.n	1f40 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1ec6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1eca:	d057      	beq.n	1f7c <uarte_nrfx_configure+0x120>
    1ecc:	d807      	bhi.n	1ede <uarte_nrfx_configure+0x82>
    1ece:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1ed2:	d055      	beq.n	1f80 <uarte_nrfx_configure+0x124>
    1ed4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1ed8:	d1e8      	bne.n	1eac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1eda:	4b32      	ldr	r3, [pc, #200]	; (1fa4 <uarte_nrfx_configure+0x148>)
    1edc:	e030      	b.n	1f40 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1ede:	f647 2712 	movw	r7, #31250	; 0x7a12
    1ee2:	42bb      	cmp	r3, r7
    1ee4:	d1e2      	bne.n	1eac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1ee6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1eea:	e029      	b.n	1f40 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1eec:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1ef0:	d048      	beq.n	1f84 <uarte_nrfx_configure+0x128>
    1ef2:	d813      	bhi.n	1f1c <uarte_nrfx_configure+0xc0>
    1ef4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1ef8:	d047      	beq.n	1f8a <uarte_nrfx_configure+0x12e>
    1efa:	d809      	bhi.n	1f10 <uarte_nrfx_configure+0xb4>
    1efc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1f00:	42bb      	cmp	r3, r7
    1f02:	d044      	beq.n	1f8e <uarte_nrfx_configure+0x132>
    1f04:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1f08:	d1d0      	bne.n	1eac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1f0a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1f0e:	e017      	b.n	1f40 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1f10:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1f14:	d1ca      	bne.n	1eac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1f16:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1f1a:	e011      	b.n	1f40 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1f1c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1f20:	d038      	beq.n	1f94 <uarte_nrfx_configure+0x138>
    1f22:	d808      	bhi.n	1f36 <uarte_nrfx_configure+0xda>
    1f24:	4f20      	ldr	r7, [pc, #128]	; (1fa8 <uarte_nrfx_configure+0x14c>)
    1f26:	42bb      	cmp	r3, r7
    1f28:	d037      	beq.n	1f9a <uarte_nrfx_configure+0x13e>
    1f2a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1f2e:	d1bd      	bne.n	1eac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1f30:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1f34:	e004      	b.n	1f40 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1f36:	4f1d      	ldr	r7, [pc, #116]	; (1fac <uarte_nrfx_configure+0x150>)
    1f38:	42bb      	cmp	r3, r7
    1f3a:	d1b7      	bne.n	1eac <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1f3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1f40:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1f44:	6903      	ldr	r3, [r0, #16]
    1f46:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    1f48:	4334      	orrs	r4, r6
    1f4a:	4322      	orrs	r2, r4
    1f4c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1f4e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1f52:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1f56:	2000      	movs	r0, #0
}
    1f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1f5a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1f5e:	e7ef      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1f60:	4b13      	ldr	r3, [pc, #76]	; (1fb0 <uarte_nrfx_configure+0x154>)
    1f62:	e7ed      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1f64:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1f68:	e7ea      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    1f6a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1f6e:	e7e7      	b.n	1f40 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1f70:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1f74:	e7e4      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1f76:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1f7a:	e7e1      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1f7c:	4b0d      	ldr	r3, [pc, #52]	; (1fb4 <uarte_nrfx_configure+0x158>)
    1f7e:	e7df      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1f80:	4b0d      	ldr	r3, [pc, #52]	; (1fb8 <uarte_nrfx_configure+0x15c>)
    1f82:	e7dd      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1f84:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1f88:	e7da      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1f8a:	4b0c      	ldr	r3, [pc, #48]	; (1fbc <uarte_nrfx_configure+0x160>)
    1f8c:	e7d8      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1f8e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1f92:	e7d5      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1f94:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1f98:	e7d2      	b.n	1f40 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1f9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1f9e:	e7cf      	b.n	1f40 <uarte_nrfx_configure+0xe4>
    1fa0:	0013b000 	.word	0x0013b000
    1fa4:	004ea000 	.word	0x004ea000
    1fa8:	0003d090 	.word	0x0003d090
    1fac:	000f4240 	.word	0x000f4240
    1fb0:	00275000 	.word	0x00275000
    1fb4:	0075c000 	.word	0x0075c000
    1fb8:	003af000 	.word	0x003af000
    1fbc:	013a9000 	.word	0x013a9000

00001fc0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    1fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    1fc2:	6906      	ldr	r6, [r0, #16]
{
    1fc4:	4605      	mov	r5, r0
    1fc6:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fc8:	f002 fd25 	bl	4a16 <k_is_in_isr>
    1fcc:	b910      	cbnz	r0, 1fd4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    1fce:	4b2c      	ldr	r3, [pc, #176]	; (2080 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    1fd0:	781b      	ldrb	r3, [r3, #0]
    1fd2:	b983      	cbnz	r3, 1ff6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    1fd4:	f04f 0320 	mov.w	r3, #32
    1fd8:	f3ef 8411 	mrs	r4, BASEPRI
    1fdc:	f383 8812 	msr	BASEPRI_MAX, r3
    1fe0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    1fe4:	6868      	ldr	r0, [r5, #4]
    1fe6:	f002 fbdc 	bl	47a2 <is_tx_ready.isra.0>
    1fea:	bb28      	cbnz	r0, 2038 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    1fec:	f384 8811 	msr	BASEPRI, r4
    1ff0:	f3bf 8f6f 	isb	sy
}
    1ff4:	e7ee      	b.n	1fd4 <uarte_nrfx_poll_out+0x14>
{
    1ff6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    1ff8:	6868      	ldr	r0, [r5, #4]
    1ffa:	f002 fbd2 	bl	47a2 <is_tx_ready.isra.0>
    1ffe:	b970      	cbnz	r0, 201e <uarte_nrfx_poll_out+0x5e>
    2000:	2001      	movs	r0, #1
    2002:	f002 fc41 	bl	4888 <nrfx_busy_wait>
    2006:	3c01      	subs	r4, #1
    2008:	d1f6      	bne.n	1ff8 <uarte_nrfx_poll_out+0x38>
    200a:	2100      	movs	r1, #0
    200c:	2021      	movs	r0, #33	; 0x21
    200e:	f001 fc9f 	bl	3950 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2012:	e7f0      	b.n	1ff6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2014:	f384 8811 	msr	BASEPRI, r4
    2018:	f3bf 8f6f 	isb	sy
}
    201c:	e7f5      	b.n	200a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    201e:	f04f 0320 	mov.w	r3, #32
    2022:	f3ef 8411 	mrs	r4, BASEPRI
    2026:	f383 8812 	msr	BASEPRI_MAX, r3
    202a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    202e:	6868      	ldr	r0, [r5, #4]
    2030:	f002 fbb7 	bl	47a2 <is_tx_ready.isra.0>
    2034:	2800      	cmp	r0, #0
    2036:	d0ed      	beq.n	2014 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2038:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    203c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    203e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2040:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2042:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2046:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    204a:	2200      	movs	r2, #0
    204c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2050:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2054:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2058:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    205c:	684a      	ldr	r2, [r1, #4]
    205e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2060:	bf41      	itttt	mi
    2062:	2208      	movmi	r2, #8
    2064:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2068:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    206c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2070:	2201      	movs	r2, #1
    2072:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2074:	f384 8811 	msr	BASEPRI, r4
    2078:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    207c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    207e:	bf00      	nop
    2080:	200007b9 	.word	0x200007b9

00002084 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2084:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return dev->config;
    2088:	f8d0 8004 	ldr.w	r8, [r0, #4]
	return dev->data;
    208c:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    208e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2092:	2300      	movs	r3, #0
    2094:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    2098:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    209a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    209c:	68eb      	ldr	r3, [r5, #12]
    209e:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
    20a0:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    20a2:	d013      	beq.n	20cc <uarte_instance_init.constprop.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    20a4:	a801      	add	r0, sp, #4
    20a6:	9301      	str	r3, [sp, #4]
    20a8:	f7ff feca 	bl	1e40 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    20ac:	9a01      	ldr	r2, [sp, #4]
    20ae:	2301      	movs	r3, #1
    20b0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    20b2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    20b6:	68eb      	ldr	r3, [r5, #12]
    20b8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    20ba:	a801      	add	r0, sp, #4
    20bc:	f7ff fec0 	bl	1e40 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    20c0:	9b01      	ldr	r3, [sp, #4]
    20c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    20c6:	2203      	movs	r2, #3
    20c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    20cc:	6928      	ldr	r0, [r5, #16]
    20ce:	1c43      	adds	r3, r0, #1
    20d0:	d006      	beq.n	20e0 <uarte_instance_init.constprop.0+0x5c>
			nrf_gpio_cfg_input(cfg->rx_pin,
    20d2:	7f2b      	ldrb	r3, [r5, #28]
    20d4:	2b00      	cmp	r3, #0
    20d6:	bf14      	ite	ne
    20d8:	2103      	movne	r1, #3
    20da:	2100      	moveq	r1, #0
    20dc:	f002 fb53 	bl	4786 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    20e0:	696b      	ldr	r3, [r5, #20]
    20e2:	1c5a      	adds	r2, r3, #1
    20e4:	d013      	beq.n	210e <uarte_instance_init.constprop.0+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    20e6:	a801      	add	r0, sp, #4
    20e8:	9301      	str	r3, [sp, #4]
    20ea:	f7ff fea9 	bl	1e40 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    20ee:	9a01      	ldr	r2, [sp, #4]
    20f0:	2301      	movs	r3, #1
    20f2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    20f4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    20f8:	696b      	ldr	r3, [r5, #20]
    20fa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    20fc:	a801      	add	r0, sp, #4
    20fe:	f7ff fe9f 	bl	1e40 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2102:	9b01      	ldr	r3, [sp, #4]
    2104:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2108:	2203      	movs	r2, #3
    210a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    210e:	69a8      	ldr	r0, [r5, #24]
    2110:	1c43      	adds	r3, r0, #1
    2112:	d006      	beq.n	2122 <uarte_instance_init.constprop.0+0x9e>
			nrf_gpio_cfg_input(cfg->cts_pin,
    2114:	7f6b      	ldrb	r3, [r5, #29]
    2116:	2b00      	cmp	r3, #0
    2118:	bf14      	ite	ne
    211a:	2103      	movne	r1, #3
    211c:	2100      	moveq	r1, #0
    211e:	f002 fb32 	bl	4786 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    2122:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    2126:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    2128:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    212c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    2130:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    2134:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2138:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    213a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    213e:	3104      	adds	r1, #4
    2140:	4630      	mov	r0, r6
    2142:	f7ff fe8b 	bl	1e5c <uarte_nrfx_configure>
	if (err) {
    2146:	4605      	mov	r5, r0
    2148:	2800      	cmp	r0, #0
    214a:	d146      	bne.n	21da <uarte_instance_init.constprop.0+0x156>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    214c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2150:	0799      	lsls	r1, r3, #30
    2152:	d519      	bpl.n	2188 <uarte_instance_init.constprop.0+0x104>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2154:	f107 0012 	add.w	r0, r7, #18
    2158:	f000 fe60 	bl	2e1c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    215c:	4b22      	ldr	r3, [pc, #136]	; (21e8 <uarte_instance_init.constprop.0+0x164>)
    215e:	4298      	cmp	r0, r3
    2160:	d13f      	bne.n	21e2 <uarte_instance_init.constprop.0+0x15e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2162:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2164:	00c3      	lsls	r3, r0, #3
    2166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    216a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    216e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2172:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2176:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    217a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    217e:	4a1b      	ldr	r2, [pc, #108]	; (21ec <uarte_instance_init.constprop.0+0x168>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2180:	2301      	movs	r3, #1
    2182:	4083      	lsls	r3, r0
    2184:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2188:	2308      	movs	r3, #8
    218a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    218e:	f898 3008 	ldrb.w	r3, [r8, #8]
    2192:	b95b      	cbnz	r3, 21ac <uarte_instance_init.constprop.0+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2194:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2198:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    219c:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    21a0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    21a4:	2301      	movs	r3, #1
    21a6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21aa:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    21ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
    21b0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    21b2:	bf5c      	itt	pl
    21b4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    21b8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    21bc:	06db      	lsls	r3, r3, #27
    21be:	bf44      	itt	mi
    21c0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    21c4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    21c8:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    21ca:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    21cc:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    21d0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21d4:	2301      	movs	r3, #1
    21d6:	60a3      	str	r3, [r4, #8]
    21d8:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    21da:	4628      	mov	r0, r5
    21dc:	b002      	add	sp, #8
    21de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    21e2:	f06f 0504 	mvn.w	r5, #4
    21e6:	e7f8      	b.n	21da <uarte_instance_init.constprop.0+0x156>
    21e8:	0bad0000 	.word	0x0bad0000
    21ec:	4001f000 	.word	0x4001f000

000021f0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    21f0:	4a04      	ldr	r2, [pc, #16]	; (2204 <sys_clock_timeout_handler+0x14>)
    21f2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    21f4:	1ac8      	subs	r0, r1, r3
    21f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    21fa:	4403      	add	r3, r0
    21fc:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    21fe:	f001 bcf9 	b.w	3bf4 <sys_clock_announce>
    2202:	bf00      	nop
    2204:	200002bc 	.word	0x200002bc

00002208 <sys_clock_driver_init>:
	k_spin_unlock(&lock, key);
	return ret;
}

static int sys_clock_driver_init(const struct device *dev)
{
    2208:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    220a:	4c0f      	ldr	r4, [pc, #60]	; (2248 <sys_clock_driver_init+0x40>)
    220c:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    2212:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    2216:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    221a:	4b0c      	ldr	r3, [pc, #48]	; (224c <sys_clock_driver_init+0x44>)
    221c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2220:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2224:	2101      	movs	r1, #1
    2226:	462a      	mov	r2, r5
    2228:	2011      	movs	r0, #17
    222a:	f7fe ffe7 	bl	11fc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    222e:	2011      	movs	r0, #17
    2230:	f7fe ffc6 	bl	11c0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2234:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2236:	4a06      	ldr	r2, [pc, #24]	; (2250 <sys_clock_driver_init+0x48>)
    2238:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    223a:	2002      	movs	r0, #2
    223c:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    223e:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    2240:	f7ff fc10 	bl	1a64 <z_nrf_clock_control_lf_on>

	return 0;
}
    2244:	4628      	mov	r0, r5
    2246:	bd38      	pop	{r3, r4, r5, pc}
    2248:	40011000 	.word	0x40011000
    224c:	e000e100 	.word	0xe000e100
    2250:	200002b8 	.word	0x200002b8

00002254 <set_absolute_alarm>:
{
    2254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2258:	0086      	lsls	r6, r0, #2
    225a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    225e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    2262:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    2266:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2268:	b2a4      	uxth	r4, r4
    226a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    226e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    2272:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    2276:	f8df 806c 	ldr.w	r8, [pc, #108]	; 22e4 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    227a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    227e:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2282:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    2284:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2288:	eba3 0309 	sub.w	r3, r3, r9
    228c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2290:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2294:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    2296:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    229a:	d102      	bne.n	22a2 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    229c:	2013      	movs	r0, #19
    229e:	f002 fce0 	bl	4c62 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    22a2:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    22a6:	1aab      	subs	r3, r5, r2
    22a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    22ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    22b0:	bf88      	it	hi
    22b2:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    22b4:	2300      	movs	r3, #0
    22b6:	6023      	str	r3, [r4, #0]
    22b8:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    22ba:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    22be:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    22c2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    22c6:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    22ca:	4599      	cmp	r9, r3
    22cc:	d006      	beq.n	22dc <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    22ce:	1aeb      	subs	r3, r5, r3
    22d0:	3b02      	subs	r3, #2
    22d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    22d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    22da:	d801      	bhi.n	22e0 <set_absolute_alarm+0x8c>
}
    22dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    22e0:	462b      	mov	r3, r5
    22e2:	e7cf      	b.n	2284 <set_absolute_alarm+0x30>
    22e4:	40011000 	.word	0x40011000

000022e8 <rtc_nrf_isr>:
{
    22e8:	b570      	push	{r4, r5, r6, lr}
    22ea:	4d15      	ldr	r5, [pc, #84]	; (2340 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    22ec:	4c15      	ldr	r4, [pc, #84]	; (2344 <rtc_nrf_isr+0x5c>)
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    22ee:	2600      	movs	r6, #0
    22f0:	682b      	ldr	r3, [r5, #0]
    22f2:	2000      	movs	r0, #0
    22f4:	b106      	cbz	r6, 22f8 <rtc_nrf_isr+0x10>
}
    22f6:	bd70      	pop	{r4, r5, r6, pc}
    22f8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    22fc:	03d2      	lsls	r2, r2, #15
    22fe:	d5fa      	bpl.n	22f6 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2300:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    2304:	2a00      	cmp	r2, #0
    2306:	d0f6      	beq.n	22f6 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2308:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    230c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2310:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2314:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    2318:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    231c:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2320:	1a72      	subs	r2, r6, r1
    2322:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    2326:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    232a:	bf88      	it	hi
    232c:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    232e:	2601      	movs	r6, #1
			if (handler) {
    2330:	b11b      	cbz	r3, 233a <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    2332:	686a      	ldr	r2, [r5, #4]
    2334:	6028      	str	r0, [r5, #0]
    2336:	4798      	blx	r3
    2338:	e7da      	b.n	22f0 <rtc_nrf_isr+0x8>
    233a:	602b      	str	r3, [r5, #0]
}
    233c:	e7db      	b.n	22f6 <rtc_nrf_isr+0xe>
    233e:	bf00      	nop
    2340:	200002b0 	.word	0x200002b0
    2344:	40011000 	.word	0x40011000

00002348 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2348:	4a13      	ldr	r2, [pc, #76]	; (2398 <sys_clock_set_timeout+0x50>)
    234a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    234e:	bf14      	ite	ne
    2350:	4603      	movne	r3, r0
    2352:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2354:	3b01      	subs	r3, #1
    2356:	2b00      	cmp	r3, #0
    2358:	dd1c      	ble.n	2394 <sys_clock_set_timeout+0x4c>
    235a:	4293      	cmp	r3, r2
    235c:	bfa8      	it	ge
    235e:	4613      	movge	r3, r2
    2360:	4a0e      	ldr	r2, [pc, #56]	; (239c <sys_clock_set_timeout+0x54>)
    2362:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	uint32_t unannounced = counter_sub(counter(), last_count);
    2366:	4a0e      	ldr	r2, [pc, #56]	; (23a0 <sys_clock_set_timeout+0x58>)
    2368:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    236a:	1a40      	subs	r0, r0, r1
		ticks = 0;
    236c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    2370:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    2374:	bf18      	it	ne
    2376:	2300      	movne	r3, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2378:	3201      	adds	r2, #1
    237a:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    237c:	4a09      	ldr	r2, [pc, #36]	; (23a4 <sys_clock_set_timeout+0x5c>)
    237e:	480a      	ldr	r0, [pc, #40]	; (23a8 <sys_clock_set_timeout+0x60>)
    2380:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    2382:	2000      	movs	r0, #0
    2384:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    2386:	4a04      	ldr	r2, [pc, #16]	; (2398 <sys_clock_set_timeout+0x50>)
    2388:	4293      	cmp	r3, r2
    238a:	bf94      	ite	ls
    238c:	18c9      	addls	r1, r1, r3
    238e:	1889      	addhi	r1, r1, r2
    2390:	f7ff bf60 	b.w	2254 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2394:	2300      	movs	r3, #0
    2396:	e7e3      	b.n	2360 <sys_clock_set_timeout+0x18>
    2398:	007fffff 	.word	0x007fffff
    239c:	40011000 	.word	0x40011000
    23a0:	200002bc 	.word	0x200002bc
    23a4:	200002b0 	.word	0x200002b0
    23a8:	000021f1 	.word	0x000021f1

000023ac <sys_clock_elapsed>:
    23ac:	4b04      	ldr	r3, [pc, #16]	; (23c0 <sys_clock_elapsed+0x14>)
    23ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    23b2:	4b04      	ldr	r3, [pc, #16]	; (23c4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    23b4:	681b      	ldr	r3, [r3, #0]
    23b6:	1ac0      	subs	r0, r0, r3
}
    23b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23bc:	4770      	bx	lr
    23be:	bf00      	nop
    23c0:	40011000 	.word	0x40011000
    23c4:	200002bc 	.word	0x200002bc

000023c8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    23c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    23cc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    23d0:	2a08      	cmp	r2, #8
    23d2:	d106      	bne.n	23e2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    23d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    23d8:	2b05      	cmp	r3, #5
    23da:	d802      	bhi.n	23e2 <nrf52_errata_103+0x1a>
    23dc:	4a02      	ldr	r2, [pc, #8]	; (23e8 <nrf52_errata_103+0x20>)
    23de:	5cd0      	ldrb	r0, [r2, r3]
    23e0:	4770      	bx	lr
        return false;
    23e2:	2000      	movs	r0, #0
}
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop
    23e8:	000052bf 	.word	0x000052bf

000023ec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    23ec:	4a02      	ldr	r2, [pc, #8]	; (23f8 <nvmc_wait+0xc>)
    23ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    23f2:	2b00      	cmp	r3, #0
    23f4:	d0fb      	beq.n	23ee <nvmc_wait+0x2>
}
    23f6:	4770      	bx	lr
    23f8:	4001e000 	.word	0x4001e000

000023fc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    23fc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    23fe:	f002 fa39 	bl	4874 <nrf52_errata_136>
    2402:	b140      	cbz	r0, 2416 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2408:	2200      	movs	r2, #0
    240a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    240e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2412:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2416:	f002 fa2d 	bl	4874 <nrf52_errata_136>
    241a:	2800      	cmp	r0, #0
    241c:	d046      	beq.n	24ac <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    241e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2422:	4b60      	ldr	r3, [pc, #384]	; (25a4 <SystemInit+0x1a8>)
    2424:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2428:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    242c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2430:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2434:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2438:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    243c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2440:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2444:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2448:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    244c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2450:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2454:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2458:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    245c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2460:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2464:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2468:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    246c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2470:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2474:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2478:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    247c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2480:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2484:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2488:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    248c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2490:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2494:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2498:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    249c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    24a0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    24a4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    24a8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    24ac:	f7ff ff8c 	bl	23c8 <nrf52_errata_103>
    24b0:	b118      	cbz	r0, 24ba <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    24b2:	4b3d      	ldr	r3, [pc, #244]	; (25a8 <SystemInit+0x1ac>)
    24b4:	4a3d      	ldr	r2, [pc, #244]	; (25ac <SystemInit+0x1b0>)
    24b6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    24ba:	f7ff ff85 	bl	23c8 <nrf52_errata_103>
    24be:	b118      	cbz	r0, 24c8 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    24c0:	4b3b      	ldr	r3, [pc, #236]	; (25b0 <SystemInit+0x1b4>)
    24c2:	22fb      	movs	r2, #251	; 0xfb
    24c4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    24c8:	f7ff ff7e 	bl	23c8 <nrf52_errata_103>
    24cc:	b170      	cbz	r0, 24ec <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    24ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    24d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    24d6:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    24da:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    24de:	f022 020f 	bic.w	r2, r2, #15
    24e2:	f003 030f 	and.w	r3, r3, #15
    24e6:	4313      	orrs	r3, r2
    24e8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    24ec:	f7ff ff6c 	bl	23c8 <nrf52_errata_103>
    24f0:	b120      	cbz	r0, 24fc <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    24f2:	4b30      	ldr	r3, [pc, #192]	; (25b4 <SystemInit+0x1b8>)
    24f4:	f44f 7200 	mov.w	r2, #512	; 0x200
    24f8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    24fc:	f002 f9ba 	bl	4874 <nrf52_errata_136>
    2500:	b148      	cbz	r0, 2516 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2506:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    250a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    250c:	bf44      	itt	mi
    250e:	f06f 0201 	mvnmi.w	r2, #1
    2512:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2516:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    251a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    251e:	2a08      	cmp	r2, #8
    2520:	d10e      	bne.n	2540 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2522:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    2526:	2b05      	cmp	r3, #5
    2528:	d802      	bhi.n	2530 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    252a:	4a23      	ldr	r2, [pc, #140]	; (25b8 <SystemInit+0x1bc>)
    252c:	5cd3      	ldrb	r3, [r2, r3]
    252e:	b13b      	cbz	r3, 2540 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2530:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2534:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    253c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2540:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2544:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2548:	2a00      	cmp	r2, #0
    254a:	db03      	blt.n	2554 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    254c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2550:	2b00      	cmp	r3, #0
    2552:	da22      	bge.n	259a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2554:	4919      	ldr	r1, [pc, #100]	; (25bc <SystemInit+0x1c0>)
    2556:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2558:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    255c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2560:	2412      	movs	r4, #18
    nvmc_wait();
    2562:	f7ff ff43 	bl	23ec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2566:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    256a:	f7ff ff3f 	bl	23ec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    256e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2572:	f7ff ff3b 	bl	23ec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2576:	2300      	movs	r3, #0
    2578:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    257c:	f7ff ff36 	bl	23ec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2580:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2584:	490e      	ldr	r1, [pc, #56]	; (25c0 <SystemInit+0x1c4>)
    2586:	4b0f      	ldr	r3, [pc, #60]	; (25c4 <SystemInit+0x1c8>)
    2588:	68ca      	ldr	r2, [r1, #12]
    258a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    258e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2590:	60cb      	str	r3, [r1, #12]
    2592:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2596:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2598:	e7fd      	b.n	2596 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    259a:	4b0b      	ldr	r3, [pc, #44]	; (25c8 <SystemInit+0x1cc>)
    259c:	4a0b      	ldr	r2, [pc, #44]	; (25cc <SystemInit+0x1d0>)
    259e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    25a0:	bd10      	pop	{r4, pc}
    25a2:	bf00      	nop
    25a4:	4000c000 	.word	0x4000c000
    25a8:	40005000 	.word	0x40005000
    25ac:	00038148 	.word	0x00038148
    25b0:	4000f000 	.word	0x4000f000
    25b4:	40029000 	.word	0x40029000
    25b8:	000052b9 	.word	0x000052b9
    25bc:	4001e000 	.word	0x4001e000
    25c0:	e000ed00 	.word	0xe000ed00
    25c4:	05fa0004 	.word	0x05fa0004
    25c8:	20000030 	.word	0x20000030
    25cc:	03d09000 	.word	0x03d09000

000025d0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    25d0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    25d2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    25d4:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    25d6:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    25da:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    25dc:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    25e0:	d014      	beq.n	260c <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    25e2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    25e6:	fa05 f204 	lsl.w	r2, r5, r4
    25ea:	ea23 0202 	bic.w	r2, r3, r2
    25ee:	e850 6f00 	ldrex	r6, [r0]
    25f2:	429e      	cmp	r6, r3
    25f4:	d104      	bne.n	2600 <nrfx_flag32_alloc+0x30>
    25f6:	e840 2c00 	strex	ip, r2, [r0]
    25fa:	f1bc 0f00 	cmp.w	ip, #0
    25fe:	d1f6      	bne.n	25ee <nrfx_flag32_alloc+0x1e>
    2600:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2604:	d1e6      	bne.n	25d4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    2606:	4802      	ldr	r0, [pc, #8]	; (2610 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    2608:	700c      	strb	r4, [r1, #0]
}
    260a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    260c:	4801      	ldr	r0, [pc, #4]	; (2614 <nrfx_flag32_alloc+0x44>)
    260e:	e7fc      	b.n	260a <nrfx_flag32_alloc+0x3a>
    2610:	0bad0000 	.word	0x0bad0000
    2614:	0bad0002 	.word	0x0bad0002

00002618 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2618:	6803      	ldr	r3, [r0, #0]
    261a:	40cb      	lsrs	r3, r1
    261c:	07db      	lsls	r3, r3, #31
{
    261e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    2620:	d415      	bmi.n	264e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2622:	2301      	movs	r3, #1
    2624:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    2628:	6803      	ldr	r3, [r0, #0]
    262a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    262e:	ea41 0203 	orr.w	r2, r1, r3
    2632:	e850 4f00 	ldrex	r4, [r0]
    2636:	429c      	cmp	r4, r3
    2638:	d104      	bne.n	2644 <nrfx_flag32_free+0x2c>
    263a:	e840 2c00 	strex	ip, r2, [r0]
    263e:	f1bc 0f00 	cmp.w	ip, #0
    2642:	d1f6      	bne.n	2632 <nrfx_flag32_free+0x1a>
    2644:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2648:	d1ee      	bne.n	2628 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    264a:	4802      	ldr	r0, [pc, #8]	; (2654 <nrfx_flag32_free+0x3c>)
}
    264c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    264e:	4802      	ldr	r0, [pc, #8]	; (2658 <nrfx_flag32_free+0x40>)
    2650:	e7fc      	b.n	264c <nrfx_flag32_free+0x34>
    2652:	bf00      	nop
    2654:	0bad0000 	.word	0x0bad0000
    2658:	0bad0004 	.word	0x0bad0004

0000265c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    265c:	4b04      	ldr	r3, [pc, #16]	; (2670 <nrfx_clock_init+0x14>)
    265e:	791a      	ldrb	r2, [r3, #4]
    2660:	b922      	cbnz	r2, 266c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2662:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2664:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2666:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2668:	4802      	ldr	r0, [pc, #8]	; (2674 <nrfx_clock_init+0x18>)
    266a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    266c:	4802      	ldr	r0, [pc, #8]	; (2678 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    266e:	4770      	bx	lr
    2670:	200002c0 	.word	0x200002c0
    2674:	0bad0000 	.word	0x0bad0000
    2678:	0bad000c 	.word	0x0bad000c

0000267c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    267c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    267e:	b110      	cbz	r0, 2686 <nrfx_clock_stop+0xa>
    2680:	2801      	cmp	r0, #1
    2682:	d017      	beq.n	26b4 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2684:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    2686:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    268a:	2302      	movs	r3, #2
    268c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2690:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    2694:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2698:	2301      	movs	r3, #1
    269a:	60e3      	str	r3, [r4, #12]
    269c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    26a0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    26a4:	03db      	lsls	r3, r3, #15
    26a6:	d5ed      	bpl.n	2684 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    26a8:	2001      	movs	r0, #1
    26aa:	f002 f8ed 	bl	4888 <nrfx_busy_wait>
    26ae:	3d01      	subs	r5, #1
    26b0:	d1f6      	bne.n	26a0 <nrfx_clock_stop+0x24>
    26b2:	e7e7      	b.n	2684 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    26b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26b8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    26ba:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26be:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    26c2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26c6:	6060      	str	r0, [r4, #4]
    26c8:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    26cc:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    26d0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    26d4:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    26d6:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    26da:	d505      	bpl.n	26e8 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    26dc:	b123      	cbz	r3, 26e8 <nrfx_clock_stop+0x6c>
    26de:	2001      	movs	r0, #1
    26e0:	f002 f8d2 	bl	4888 <nrfx_busy_wait>
    26e4:	3d01      	subs	r5, #1
    26e6:	d1f1      	bne.n	26cc <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    26e8:	4b01      	ldr	r3, [pc, #4]	; (26f0 <nrfx_clock_stop+0x74>)
    26ea:	2200      	movs	r2, #0
    26ec:	715a      	strb	r2, [r3, #5]
    26ee:	e7c9      	b.n	2684 <nrfx_clock_stop+0x8>
    26f0:	200002c0 	.word	0x200002c0

000026f4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    26f8:	b510      	push	{r4, lr}
    26fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    26fe:	b16a      	cbz	r2, 271c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2700:	2200      	movs	r2, #0
    2702:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2706:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    270a:	2201      	movs	r2, #1
    270c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2710:	4b11      	ldr	r3, [pc, #68]	; (2758 <nrfx_power_clock_irq_handler+0x64>)
    2712:	7958      	ldrb	r0, [r3, #5]
    2714:	b910      	cbnz	r0, 271c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    2716:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2718:	681b      	ldr	r3, [r3, #0]
    271a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    271c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2720:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2724:	b172      	cbz	r2, 2744 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2726:	2200      	movs	r2, #0
    2728:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    272c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2730:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2734:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2738:	0792      	lsls	r2, r2, #30
    273a:	d104      	bne.n	2746 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    273c:	2201      	movs	r2, #1
    273e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2742:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2744:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2746:	2202      	movs	r2, #2
    2748:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    274c:	4b02      	ldr	r3, [pc, #8]	; (2758 <nrfx_power_clock_irq_handler+0x64>)
}
    274e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2752:	681b      	ldr	r3, [r3, #0]
    2754:	2001      	movs	r0, #1
    2756:	4718      	bx	r3
    2758:	200002c0 	.word	0x200002c0

0000275c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    275c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    275e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    2762:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    2764:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    2766:	6002      	str	r2, [r0, #0]
}
    2768:	4802      	ldr	r0, [pc, #8]	; (2774 <nrf_gpio_pin_port_decode+0x18>)
    276a:	bf18      	it	ne
    276c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    2770:	4770      	bx	lr
    2772:	bf00      	nop
    2774:	50000300 	.word	0x50000300

00002778 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2778:	4b03      	ldr	r3, [pc, #12]	; (2788 <pin_in_use_by_te+0x10>)
    277a:	3008      	adds	r0, #8
    277c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2780:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2784:	4770      	bx	lr
    2786:	bf00      	nop
    2788:	20000034 	.word	0x20000034

0000278c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    278c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    278e:	f100 0308 	add.w	r3, r0, #8
    2792:	4c0c      	ldr	r4, [pc, #48]	; (27c4 <call_handler+0x38>)
    2794:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2798:	05da      	lsls	r2, r3, #23
{
    279a:	4605      	mov	r5, r0
    279c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    279e:	d507      	bpl.n	27b0 <call_handler+0x24>
    27a0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    27a4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    27a8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    27ac:	6852      	ldr	r2, [r2, #4]
    27ae:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    27b0:	68a3      	ldr	r3, [r4, #8]
    27b2:	b12b      	cbz	r3, 27c0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    27b4:	68e2      	ldr	r2, [r4, #12]
    27b6:	4631      	mov	r1, r6
    27b8:	4628      	mov	r0, r5
    }
}
    27ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    27be:	4718      	bx	r3
}
    27c0:	bd70      	pop	{r4, r5, r6, pc}
    27c2:	bf00      	nop
    27c4:	20000034 	.word	0x20000034

000027c8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    27c8:	4a12      	ldr	r2, [pc, #72]	; (2814 <release_handler+0x4c>)
    27ca:	3008      	adds	r0, #8
{
    27cc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    27ce:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    27d2:	05d9      	lsls	r1, r3, #23
    27d4:	d51b      	bpl.n	280e <release_handler+0x46>
    27d6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    27da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    27de:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    27e2:	f102 0410 	add.w	r4, r2, #16
    27e6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    27e8:	f834 3b02 	ldrh.w	r3, [r4], #2
    27ec:	f413 7f80 	tst.w	r3, #256	; 0x100
    27f0:	d003      	beq.n	27fa <release_handler+0x32>
    27f2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    27f6:	4299      	cmp	r1, r3
    27f8:	d009      	beq.n	280e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    27fa:	3001      	adds	r0, #1
    27fc:	2830      	cmp	r0, #48	; 0x30
    27fe:	d1f3      	bne.n	27e8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2800:	2300      	movs	r3, #0
    2802:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2806:	4804      	ldr	r0, [pc, #16]	; (2818 <release_handler+0x50>)
}
    2808:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    280a:	f7ff bf05 	b.w	2618 <nrfx_flag32_free>
}
    280e:	bc10      	pop	{r4}
    2810:	4770      	bx	lr
    2812:	bf00      	nop
    2814:	20000034 	.word	0x20000034
    2818:	200000a8 	.word	0x200000a8

0000281c <pin_handler_trigger_uninit>:
{
    281c:	b538      	push	{r3, r4, r5, lr}
    281e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2820:	f7ff ffaa 	bl	2778 <pin_in_use_by_te>
    2824:	4c09      	ldr	r4, [pc, #36]	; (284c <pin_handler_trigger_uninit+0x30>)
    2826:	f102 0508 	add.w	r5, r2, #8
    282a:	b140      	cbz	r0, 283e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    282c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2830:	4907      	ldr	r1, [pc, #28]	; (2850 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2832:	0b5b      	lsrs	r3, r3, #13
    2834:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2838:	2000      	movs	r0, #0
    283a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    283e:	4610      	mov	r0, r2
    2840:	f7ff ffc2 	bl	27c8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2844:	2300      	movs	r3, #0
    2846:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    284a:	bd38      	pop	{r3, r4, r5, pc}
    284c:	20000034 	.word	0x20000034
    2850:	40006000 	.word	0x40006000

00002854 <nrfx_gpiote_input_configure>:
{
    2854:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2858:	4604      	mov	r4, r0
    285a:	4617      	mov	r7, r2
    285c:	461d      	mov	r5, r3
    if (p_input_config)
    285e:	b321      	cbz	r1, 28aa <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2860:	4e4e      	ldr	r6, [pc, #312]	; (299c <nrfx_gpiote_input_configure+0x148>)
    2862:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2866:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    286a:	079b      	lsls	r3, r3, #30
    286c:	d506      	bpl.n	287c <nrfx_gpiote_input_configure+0x28>
    286e:	f7ff ff83 	bl	2778 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    2872:	b118      	cbz	r0, 287c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    2874:	484a      	ldr	r0, [pc, #296]	; (29a0 <nrfx_gpiote_input_configure+0x14c>)
}
    2876:	b004      	add	sp, #16
    2878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    287c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    287e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2882:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2886:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    288a:	f10d 020f 	add.w	r2, sp, #15
    288e:	460b      	mov	r3, r1
    2890:	4620      	mov	r0, r4
    2892:	f10d 010e 	add.w	r1, sp, #14
    2896:	f002 f82f 	bl	48f8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    289a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    289e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    28a2:	f043 0301 	orr.w	r3, r3, #1
    28a6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    28aa:	b197      	cbz	r7, 28d2 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    28ac:	4b3b      	ldr	r3, [pc, #236]	; (299c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    28ae:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    28b0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    28b2:	f104 0008 	add.w	r0, r4, #8
    28b6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    28ba:	078f      	lsls	r7, r1, #30
    28bc:	d50c      	bpl.n	28d8 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    28be:	2a00      	cmp	r2, #0
    28c0:	d1d8      	bne.n	2874 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    28c2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    28c6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    28ca:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    28ce:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    28d2:	bbcd      	cbnz	r5, 2948 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    28d4:	4833      	ldr	r0, [pc, #204]	; (29a4 <nrfx_gpiote_input_configure+0x150>)
    28d6:	e7ce      	b.n	2876 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    28d8:	f021 0120 	bic.w	r1, r1, #32
    28dc:	04c9      	lsls	r1, r1, #19
    28de:	0cc9      	lsrs	r1, r1, #19
    28e0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    28e4:	2a00      	cmp	r2, #0
    28e6:	d0ec      	beq.n	28c2 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    28e8:	2e03      	cmp	r6, #3
    28ea:	d8c3      	bhi.n	2874 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    28ec:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    28ee:	b92e      	cbnz	r6, 28fc <nrfx_gpiote_input_configure+0xa8>
    28f0:	4a2d      	ldr	r2, [pc, #180]	; (29a8 <nrfx_gpiote_input_configure+0x154>)
    28f2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    28f6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    28fa:	e7e2      	b.n	28c2 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    28fc:	00ba      	lsls	r2, r7, #2
    28fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2902:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2906:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    290a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    290e:	f02c 0c03 	bic.w	ip, ip, #3
    2912:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2916:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    291a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    291e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    2922:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2926:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    292a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    292e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    2932:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    2936:	ea4c 0c0e 	orr.w	ip, ip, lr
    293a:	f041 0120 	orr.w	r1, r1, #32
    293e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    2942:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    2946:	e7bc      	b.n	28c2 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2948:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    294c:	4620      	mov	r0, r4
    294e:	f7ff ff3b 	bl	27c8 <release_handler>
    if (!handler)
    2952:	2e00      	cmp	r6, #0
    2954:	d0be      	beq.n	28d4 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2956:	4d11      	ldr	r5, [pc, #68]	; (299c <nrfx_gpiote_input_configure+0x148>)
    2958:	682b      	ldr	r3, [r5, #0]
    295a:	429e      	cmp	r6, r3
    295c:	d104      	bne.n	2968 <nrfx_gpiote_input_configure+0x114>
    295e:	686b      	ldr	r3, [r5, #4]
    2960:	429f      	cmp	r7, r3
    2962:	d101      	bne.n	2968 <nrfx_gpiote_input_configure+0x114>
    2964:	2200      	movs	r2, #0
    2966:	e00a      	b.n	297e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2968:	4810      	ldr	r0, [pc, #64]	; (29ac <nrfx_gpiote_input_configure+0x158>)
    296a:	f10d 010f 	add.w	r1, sp, #15
    296e:	f7ff fe2f 	bl	25d0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2972:	4b0c      	ldr	r3, [pc, #48]	; (29a4 <nrfx_gpiote_input_configure+0x150>)
    2974:	4298      	cmp	r0, r3
    2976:	f47f af7e 	bne.w	2876 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    297a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    297e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    2982:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2986:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2988:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    298a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    298e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2996:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    299a:	e79b      	b.n	28d4 <nrfx_gpiote_input_configure+0x80>
    299c:	20000034 	.word	0x20000034
    29a0:	0bad0004 	.word	0x0bad0004
    29a4:	0bad0000 	.word	0x0bad0000
    29a8:	40006000 	.word	0x40006000
    29ac:	200000a8 	.word	0x200000a8

000029b0 <nrfx_gpiote_output_configure>:
{
    29b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b2:	4604      	mov	r4, r0
    29b4:	b085      	sub	sp, #20
    29b6:	4615      	mov	r5, r2
    if (p_config)
    29b8:	b319      	cbz	r1, 2a02 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    29ba:	4e33      	ldr	r6, [pc, #204]	; (2a88 <nrfx_gpiote_output_configure+0xd8>)
    29bc:	f100 0708 	add.w	r7, r0, #8
    29c0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    29c4:	0793      	lsls	r3, r2, #30
    29c6:	d403      	bmi.n	29d0 <nrfx_gpiote_output_configure+0x20>
    29c8:	f7ff fed6 	bl	2778 <pin_in_use_by_te>
    29cc:	2800      	cmp	r0, #0
    29ce:	d158      	bne.n	2a82 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    29d0:	f012 0f1c 	tst.w	r2, #28
    29d4:	d002      	beq.n	29dc <nrfx_gpiote_output_configure+0x2c>
    29d6:	784b      	ldrb	r3, [r1, #1]
    29d8:	2b01      	cmp	r3, #1
    29da:	d052      	beq.n	2a82 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    29dc:	2301      	movs	r3, #1
    29de:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    29e2:	2300      	movs	r3, #0
    29e4:	e9cd 1300 	strd	r1, r3, [sp]
    29e8:	1c4a      	adds	r2, r1, #1
    29ea:	1c8b      	adds	r3, r1, #2
    29ec:	4620      	mov	r0, r4
    29ee:	f10d 010f 	add.w	r1, sp, #15
    29f2:	f001 ff81 	bl	48f8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    29f6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    29fa:	f043 0303 	orr.w	r3, r3, #3
    29fe:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    2a02:	b915      	cbnz	r5, 2a0a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    2a04:	4821      	ldr	r0, [pc, #132]	; (2a8c <nrfx_gpiote_output_configure+0xdc>)
}
    2a06:	b005      	add	sp, #20
    2a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2a0a:	4e1f      	ldr	r6, [pc, #124]	; (2a88 <nrfx_gpiote_output_configure+0xd8>)
    2a0c:	f104 0708 	add.w	r7, r4, #8
    2a10:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2a14:	0783      	lsls	r3, r0, #30
    2a16:	d534      	bpl.n	2a82 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    2a18:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    2a1c:	4661      	mov	r1, ip
    2a1e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2a20:	f020 0020 	bic.w	r0, r0, #32
    2a24:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2a28:	04c0      	lsls	r0, r0, #19
    2a2a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    2a2e:	0cc0      	lsrs	r0, r0, #19
    2a30:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2a34:	2300      	movs	r3, #0
    2a36:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2a3a:	786a      	ldrb	r2, [r5, #1]
    2a3c:	2a00      	cmp	r2, #0
    2a3e:	d0e1      	beq.n	2a04 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    2a40:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    2a44:	78ad      	ldrb	r5, [r5, #2]
    2a46:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    2a4a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2a4e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a52:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    2a56:	0223      	lsls	r3, r4, #8
    2a58:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2a5c:	0412      	lsls	r2, r2, #16
    2a5e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a62:	ea43 030e 	orr.w	r3, r3, lr
    2a66:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2a68:	052a      	lsls	r2, r5, #20
    2a6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2a6e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2a72:	4313      	orrs	r3, r2
    2a74:	f040 0020 	orr.w	r0, r0, #32
    2a78:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2a7c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2a80:	e7c0      	b.n	2a04 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    2a82:	4803      	ldr	r0, [pc, #12]	; (2a90 <nrfx_gpiote_output_configure+0xe0>)
    2a84:	e7bf      	b.n	2a06 <nrfx_gpiote_output_configure+0x56>
    2a86:	bf00      	nop
    2a88:	20000034 	.word	0x20000034
    2a8c:	0bad0000 	.word	0x0bad0000
    2a90:	0bad0004 	.word	0x0bad0004

00002a94 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2a94:	4b01      	ldr	r3, [pc, #4]	; (2a9c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    2a96:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    2a9a:	4770      	bx	lr
    2a9c:	20000034 	.word	0x20000034

00002aa0 <nrfx_gpiote_channel_get>:
{
    2aa0:	b508      	push	{r3, lr}
    2aa2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2aa4:	f7ff fe68 	bl	2778 <pin_in_use_by_te>
    2aa8:	b138      	cbz	r0, 2aba <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2aaa:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    2aac:	4805      	ldr	r0, [pc, #20]	; (2ac4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2aae:	3208      	adds	r2, #8
    2ab0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2ab4:	0b5b      	lsrs	r3, r3, #13
    2ab6:	700b      	strb	r3, [r1, #0]
}
    2ab8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2aba:	4803      	ldr	r0, [pc, #12]	; (2ac8 <nrfx_gpiote_channel_get+0x28>)
    2abc:	e7fc      	b.n	2ab8 <nrfx_gpiote_channel_get+0x18>
    2abe:	bf00      	nop
    2ac0:	20000034 	.word	0x20000034
    2ac4:	0bad0000 	.word	0x0bad0000
    2ac8:	0bad0004 	.word	0x0bad0004

00002acc <nrfx_gpiote_init>:
{
    2acc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2ace:	4c0f      	ldr	r4, [pc, #60]	; (2b0c <nrfx_gpiote_init+0x40>)
    2ad0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    2ad4:	b9bd      	cbnz	r5, 2b06 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2ad6:	2260      	movs	r2, #96	; 0x60
    2ad8:	4629      	mov	r1, r5
    2ada:	f104 0010 	add.w	r0, r4, #16
    2ade:	f001 fd23 	bl	4528 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2ae2:	2006      	movs	r0, #6
    2ae4:	f7fe fb6c 	bl	11c0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ae8:	4b09      	ldr	r3, [pc, #36]	; (2b10 <nrfx_gpiote_init+0x44>)
    return err_code;
    2aea:	480a      	ldr	r0, [pc, #40]	; (2b14 <nrfx_gpiote_init+0x48>)
    2aec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    2af0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2af4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2af8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2afc:	2301      	movs	r3, #1
    2afe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2b02:	6763      	str	r3, [r4, #116]	; 0x74
}
    2b04:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    2b06:	4804      	ldr	r0, [pc, #16]	; (2b18 <nrfx_gpiote_init+0x4c>)
    2b08:	e7fc      	b.n	2b04 <nrfx_gpiote_init+0x38>
    2b0a:	bf00      	nop
    2b0c:	20000034 	.word	0x20000034
    2b10:	40006000 	.word	0x40006000
    2b14:	0bad0000 	.word	0x0bad0000
    2b18:	0bad0005 	.word	0x0bad0005

00002b1c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2b1c:	4b03      	ldr	r3, [pc, #12]	; (2b2c <nrfx_gpiote_is_init+0x10>)
    2b1e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    2b22:	3800      	subs	r0, #0
    2b24:	bf18      	it	ne
    2b26:	2001      	movne	r0, #1
    2b28:	4770      	bx	lr
    2b2a:	bf00      	nop
    2b2c:	20000034 	.word	0x20000034

00002b30 <nrfx_gpiote_channel_free>:
{
    2b30:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2b32:	4801      	ldr	r0, [pc, #4]	; (2b38 <nrfx_gpiote_channel_free+0x8>)
    2b34:	f7ff bd70 	b.w	2618 <nrfx_flag32_free>
    2b38:	200000a4 	.word	0x200000a4

00002b3c <nrfx_gpiote_channel_alloc>:
{
    2b3c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2b3e:	4801      	ldr	r0, [pc, #4]	; (2b44 <nrfx_gpiote_channel_alloc+0x8>)
    2b40:	f7ff bd46 	b.w	25d0 <nrfx_flag32_alloc>
    2b44:	200000a4 	.word	0x200000a4

00002b48 <nrfx_gpiote_trigger_enable>:
{
    2b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b4a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2b4c:	f7ff fe14 	bl	2778 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2b50:	f104 0208 	add.w	r2, r4, #8
    2b54:	4b1e      	ldr	r3, [pc, #120]	; (2bd0 <nrfx_gpiote_trigger_enable+0x88>)
    2b56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2b5a:	b1e8      	cbz	r0, 2b98 <nrfx_gpiote_trigger_enable+0x50>
    2b5c:	f013 0502 	ands.w	r5, r3, #2
    2b60:	d11a      	bne.n	2b98 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2b62:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    2b64:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    2b66:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    2b6a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    2b6e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2b72:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2b76:	6005      	str	r5, [r0, #0]
    2b78:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2b7a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2b7e:	f040 0001 	orr.w	r0, r0, #1
    2b82:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    2b86:	b129      	cbz	r1, 2b94 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    2b88:	2201      	movs	r2, #1
    2b8a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    2b8e:	4a11      	ldr	r2, [pc, #68]	; (2bd4 <nrfx_gpiote_trigger_enable+0x8c>)
    2b90:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2b94:	b003      	add	sp, #12
    2b96:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2b98:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2b9c:	2b04      	cmp	r3, #4
    2b9e:	d012      	beq.n	2bc6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2ba0:	2b05      	cmp	r3, #5
    2ba2:	d012      	beq.n	2bca <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2ba4:	a801      	add	r0, sp, #4
    2ba6:	9401      	str	r4, [sp, #4]
    2ba8:	f7ff fdd8 	bl	275c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2bac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    2bae:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2bb2:	40d9      	lsrs	r1, r3
    2bb4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2bb8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2bba:	4620      	mov	r0, r4
}
    2bbc:	b003      	add	sp, #12
    2bbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2bc2:	f001 bee0 	b.w	4986 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2bc6:	2103      	movs	r1, #3
    2bc8:	e7f7      	b.n	2bba <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2bca:	2102      	movs	r1, #2
    2bcc:	e7f5      	b.n	2bba <nrfx_gpiote_trigger_enable+0x72>
    2bce:	bf00      	nop
    2bd0:	20000034 	.word	0x20000034
    2bd4:	40006000 	.word	0x40006000

00002bd8 <nrfx_gpiote_trigger_disable>:
{
    2bd8:	b508      	push	{r3, lr}
    2bda:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2bdc:	f7ff fdcc 	bl	2778 <pin_in_use_by_te>
    2be0:	b1c0      	cbz	r0, 2c14 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2be2:	f102 0108 	add.w	r1, r2, #8
    2be6:	4b0e      	ldr	r3, [pc, #56]	; (2c20 <nrfx_gpiote_trigger_disable+0x48>)
    2be8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2bec:	0799      	lsls	r1, r3, #30
    2bee:	d411      	bmi.n	2c14 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2bf0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2bf2:	2201      	movs	r2, #1
    2bf4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    2bf6:	009b      	lsls	r3, r3, #2
    2bf8:	490a      	ldr	r1, [pc, #40]	; (2c24 <nrfx_gpiote_trigger_disable+0x4c>)
    2bfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2bfe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2c02:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2c06:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2c0a:	f022 0203 	bic.w	r2, r2, #3
    2c0e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    2c12:	bd08      	pop	{r3, pc}
    2c14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2c18:	2100      	movs	r1, #0
    2c1a:	4610      	mov	r0, r2
    2c1c:	f001 beb3 	b.w	4986 <nrf_gpio_cfg_sense_set>
    2c20:	20000034 	.word	0x20000034
    2c24:	40006000 	.word	0x40006000

00002c28 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2c28:	4b0e      	ldr	r3, [pc, #56]	; (2c64 <nrfx_gpiote_pin_uninit+0x3c>)
    2c2a:	f100 0208 	add.w	r2, r0, #8
{
    2c2e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2c30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    2c34:	07db      	lsls	r3, r3, #31
{
    2c36:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    2c38:	d511      	bpl.n	2c5e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    2c3a:	f7ff ffcd 	bl	2bd8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    2c3e:	4620      	mov	r0, r4
    2c40:	f7ff fdec 	bl	281c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2c44:	a801      	add	r0, sp, #4
    2c46:	9401      	str	r4, [sp, #4]
    2c48:	f7ff fd88 	bl	275c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2c4c:	9b01      	ldr	r3, [sp, #4]
    2c4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2c52:	2202      	movs	r2, #2
    2c54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    2c58:	4803      	ldr	r0, [pc, #12]	; (2c68 <nrfx_gpiote_pin_uninit+0x40>)
}
    2c5a:	b002      	add	sp, #8
    2c5c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2c5e:	4803      	ldr	r0, [pc, #12]	; (2c6c <nrfx_gpiote_pin_uninit+0x44>)
    2c60:	e7fb      	b.n	2c5a <nrfx_gpiote_pin_uninit+0x32>
    2c62:	bf00      	nop
    2c64:	20000034 	.word	0x20000034
    2c68:	0bad0000 	.word	0x0bad0000
    2c6c:	0bad0004 	.word	0x0bad0004

00002c70 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    2c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c74:	4b64      	ldr	r3, [pc, #400]	; (2e08 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    2c76:	4865      	ldr	r0, [pc, #404]	; (2e0c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2c78:	4965      	ldr	r1, [pc, #404]	; (2e10 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    2c7a:	2600      	movs	r6, #0
{
    2c7c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    2c7e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c80:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c82:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    2c84:	b135      	cbz	r5, 2c94 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    2c86:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    2c8a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c8c:	bf1e      	ittt	ne
    2c8e:	601c      	strne	r4, [r3, #0]
    2c90:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    2c92:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2c94:	3304      	adds	r3, #4
    2c96:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    2c98:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2c9c:	d1f1      	bne.n	2c82 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c9e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 2e0c <nrfx_gpiote_irq_handler+0x19c>
    2ca2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	f000 8091 	beq.w	2dce <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    2cac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2cb0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    2cb4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2cb6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    2cba:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    2cbe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    2cc0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2cc4:	2700      	movs	r7, #0
            while (latch[i])
    2cc6:	f10d 0910 	add.w	r9, sp, #16
    2cca:	017b      	lsls	r3, r7, #5
    2ccc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    2cce:	f04f 0a01 	mov.w	sl, #1
    2cd2:	e049      	b.n	2d68 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    2cd4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2cd6:	4a4f      	ldr	r2, [pc, #316]	; (2e14 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    2cd8:	fa94 f4a4 	rbit	r4, r4
    2cdc:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    2ce0:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2ce2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    2ce6:	08e0      	lsrs	r0, r4, #3
    2ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    2cec:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    2cee:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    2cf2:	fa0a fc02 	lsl.w	ip, sl, r2
    2cf6:	f819 2000 	ldrb.w	r2, [r9, r0]
    2cfa:	ea22 020c 	bic.w	r2, r2, ip
    2cfe:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d02:	a803      	add	r0, sp, #12
    2d04:	f3c3 0582 	ubfx	r5, r3, #2, #3
    2d08:	0899      	lsrs	r1, r3, #2
    2d0a:	f7ff fd27 	bl	275c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2d0e:	9a03      	ldr	r2, [sp, #12]
    2d10:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    2d14:	074b      	lsls	r3, r1, #29
    2d16:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2d1a:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    2d1c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    2d20:	d529      	bpl.n	2d76 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    2d22:	4620      	mov	r0, r4
    2d24:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2d26:	b2d5      	uxtb	r5, r2
    2d28:	f7ff fd30 	bl	278c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d2c:	a803      	add	r0, sp, #12
    2d2e:	9403      	str	r4, [sp, #12]
    2d30:	f7ff fd14 	bl	275c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2d34:	9b03      	ldr	r3, [sp, #12]
    2d36:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2d3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    2d3e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    2d42:	429d      	cmp	r5, r3
    2d44:	d107      	bne.n	2d56 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2d46:	2100      	movs	r1, #0
    2d48:	4620      	mov	r0, r4
    2d4a:	f001 fe1c 	bl	4986 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    2d4e:	4629      	mov	r1, r5
    2d50:	4620      	mov	r0, r4
    2d52:	f001 fe18 	bl	4986 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d56:	a803      	add	r0, sp, #12
    2d58:	9403      	str	r4, [sp, #12]
    2d5a:	f7ff fcff 	bl	275c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    2d5e:	9b03      	ldr	r3, [sp, #12]
    2d60:	fa0a f303 	lsl.w	r3, sl, r3
    2d64:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    2d68:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    2d6c:	2c00      	cmp	r4, #0
    2d6e:	d1b1      	bne.n	2cd4 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2d70:	b9cf      	cbnz	r7, 2da6 <nrfx_gpiote_irq_handler+0x136>
    2d72:	2701      	movs	r7, #1
    2d74:	e7a9      	b.n	2cca <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2d76:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    2d78:	bf0c      	ite	eq
    2d7a:	2103      	moveq	r1, #3
    2d7c:	2102      	movne	r1, #2
    2d7e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2d80:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    2d82:	f001 fe00 	bl	4986 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2d86:	2d03      	cmp	r5, #3
    2d88:	d004      	beq.n	2d94 <nrfx_gpiote_irq_handler+0x124>
    2d8a:	9a01      	ldr	r2, [sp, #4]
    2d8c:	2a02      	cmp	r2, #2
    2d8e:	d106      	bne.n	2d9e <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2d90:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    2d92:	d1e0      	bne.n	2d56 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    2d94:	4659      	mov	r1, fp
    2d96:	4620      	mov	r0, r4
    2d98:	f7ff fcf8 	bl	278c <call_handler>
    2d9c:	e7db      	b.n	2d56 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2d9e:	2a03      	cmp	r2, #3
    2da0:	d1d9      	bne.n	2d56 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    2da2:	2d02      	cmp	r5, #2
    2da4:	e7f5      	b.n	2d92 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2da6:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    2daa:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    2dae:	491a      	ldr	r1, [pc, #104]	; (2e18 <nrfx_gpiote_irq_handler+0x1a8>)
    2db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2db4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    2db8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2dba:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    2dbe:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    2dc2:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    2dc4:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    2dc8:	4313      	orrs	r3, r2
    2dca:	f47f af7b 	bne.w	2cc4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    2dce:	2401      	movs	r4, #1
    while (mask)
    2dd0:	b916      	cbnz	r6, 2dd8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    2dd2:	b007      	add	sp, #28
    2dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    2dd8:	fa96 f3a6 	rbit	r3, r6
    2ddc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    2de0:	fa04 f203 	lsl.w	r2, r4, r3
    2de4:	009b      	lsls	r3, r3, #2
    2de6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2dea:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2dee:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2df2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    2df6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    2dfa:	f3c0 2005 	ubfx	r0, r0, #8, #6
    2dfe:	f3c1 4101 	ubfx	r1, r1, #16, #2
    2e02:	f7ff fcc3 	bl	278c <call_handler>
    2e06:	e7e3      	b.n	2dd0 <nrfx_gpiote_irq_handler+0x160>
    2e08:	40006100 	.word	0x40006100
    2e0c:	40006000 	.word	0x40006000
    2e10:	40006120 	.word	0x40006120
    2e14:	20000034 	.word	0x20000034
    2e18:	50000300 	.word	0x50000300

00002e1c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    2e1c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    2e1e:	4801      	ldr	r0, [pc, #4]	; (2e24 <nrfx_ppi_channel_alloc+0x8>)
    2e20:	f7ff bbd6 	b.w	25d0 <nrfx_flag32_alloc>
    2e24:	200000b0 	.word	0x200000b0

00002e28 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    2e28:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2e2a:	4c14      	ldr	r4, [pc, #80]	; (2e7c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2e2c:	4a14      	ldr	r2, [pc, #80]	; (2e80 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    2e2e:	4915      	ldr	r1, [pc, #84]	; (2e84 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2e30:	2303      	movs	r3, #3
    2e32:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2e34:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2e36:	4b14      	ldr	r3, [pc, #80]	; (2e88 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    2e38:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2e3a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    2e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2e40:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    2e42:	2300      	movs	r3, #0
    2e44:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2e46:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2e48:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    2e4a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    2e4c:	4a0f      	ldr	r2, [pc, #60]	; (2e8c <_DoInit+0x64>)
    2e4e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    2e50:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    2e52:	2210      	movs	r2, #16
    2e54:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    2e56:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2e58:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2e5a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    2e5c:	f001 fb3f 	bl	44de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2e60:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    2e64:	490a      	ldr	r1, [pc, #40]	; (2e90 <_DoInit+0x68>)
    2e66:	4620      	mov	r0, r4
    2e68:	f001 fb39 	bl	44de <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2e6c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    2e70:	2320      	movs	r3, #32
    2e72:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2e74:	f3bf 8f5f 	dmb	sy
}
    2e78:	bd10      	pop	{r4, pc}
    2e7a:	bf00      	nop
    2e7c:	200002c8 	.word	0x200002c8
    2e80:	000052c5 	.word	0x000052c5
    2e84:	000052ce 	.word	0x000052ce
    2e88:	200003b9 	.word	0x200003b9
    2e8c:	200003a9 	.word	0x200003a9
    2e90:	000052d2 	.word	0x000052d2

00002e94 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e94:	4b0e      	ldr	r3, [pc, #56]	; (2ed0 <z_sys_init_run_level+0x3c>)
{
    2e96:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e98:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2e9c:	3001      	adds	r0, #1
    2e9e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2ea2:	42a6      	cmp	r6, r4
    2ea4:	d800      	bhi.n	2ea8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2ea6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2ea8:	e9d4 3500 	ldrd	r3, r5, [r4]
    2eac:	4628      	mov	r0, r5
    2eae:	4798      	blx	r3
		if (dev != NULL) {
    2eb0:	b165      	cbz	r5, 2ecc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    2eb2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    2eb4:	b130      	cbz	r0, 2ec4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2eb6:	2800      	cmp	r0, #0
    2eb8:	bfb8      	it	lt
    2eba:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    2ebc:	28ff      	cmp	r0, #255	; 0xff
    2ebe:	bfa8      	it	ge
    2ec0:	20ff      	movge	r0, #255	; 0xff
    2ec2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2ec4:	785a      	ldrb	r2, [r3, #1]
    2ec6:	f042 0201 	orr.w	r2, r2, #1
    2eca:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2ecc:	3408      	adds	r4, #8
    2ece:	e7e8      	b.n	2ea2 <z_sys_init_run_level+0xe>
    2ed0:	00005138 	.word	0x00005138

00002ed4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    2ed4:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    2ed6:	2300      	movs	r3, #0
{
    2ed8:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    2eda:	2201      	movs	r2, #1
    2edc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2ee0:	220f      	movs	r2, #15
    2ee2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    2ee6:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    2ee8:	4c0c      	ldr	r4, [pc, #48]	; (2f1c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2eea:	4b0d      	ldr	r3, [pc, #52]	; (2f20 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    2eec:	490d      	ldr	r1, [pc, #52]	; (2f24 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2eee:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    2ef0:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2ef4:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    2ef8:	f44f 75b0 	mov.w	r5, #352	; 0x160
    2efc:	9300      	str	r3, [sp, #0]
    2efe:	fb05 1100 	mla	r1, r5, r0, r1
    2f02:	4b09      	ldr	r3, [pc, #36]	; (2f28 <init_idle_thread+0x54>)
    2f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2f08:	4620      	mov	r0, r4
    2f0a:	f000 f8a5 	bl	3058 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2f0e:	7b63      	ldrb	r3, [r4, #13]
    2f10:	f023 0304 	bic.w	r3, r3, #4
    2f14:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    2f16:	b007      	add	sp, #28
    2f18:	bd30      	pop	{r4, r5, pc}
    2f1a:	bf00      	nop
    2f1c:	200000e8 	.word	0x200000e8
    2f20:	20000370 	.word	0x20000370
    2f24:	20000be0 	.word	0x20000be0
    2f28:	00003175 	.word	0x00003175

00002f2c <bg_thread_main>:
{
    2f2c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    2f2e:	4b0a      	ldr	r3, [pc, #40]	; (2f58 <bg_thread_main+0x2c>)
    2f30:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2f32:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2f34:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2f36:	f7ff ffad 	bl	2e94 <z_sys_init_run_level>
	boot_banner();
    2f3a:	f000 fed7 	bl	3cec <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2f3e:	2003      	movs	r0, #3
    2f40:	f7ff ffa8 	bl	2e94 <z_sys_init_run_level>
	z_init_static_threads();
    2f44:	f000 f8ba 	bl	30bc <z_init_static_threads>
	main();
    2f48:	f7fd fa48 	bl	3dc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2f4c:	4a03      	ldr	r2, [pc, #12]	; (2f5c <bg_thread_main+0x30>)
    2f4e:	7b13      	ldrb	r3, [r2, #12]
    2f50:	f023 0301 	bic.w	r3, r3, #1
    2f54:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2f56:	bd08      	pop	{r3, pc}
    2f58:	200007b9 	.word	0x200007b9
    2f5c:	20000168 	.word	0x20000168

00002f60 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2f60:	4802      	ldr	r0, [pc, #8]	; (2f6c <z_bss_zero+0xc>)
    2f62:	4a03      	ldr	r2, [pc, #12]	; (2f70 <z_bss_zero+0x10>)
    2f64:	2100      	movs	r1, #0
    2f66:	1a12      	subs	r2, r2, r0
    2f68:	f001 bade 	b.w	4528 <memset>
    2f6c:	200000e8 	.word	0x200000e8
    2f70:	200007bc 	.word	0x200007bc

00002f74 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    2f74:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    2f76:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 3038 <z_cstart+0xc4>
    2f7a:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2f7c:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    2f80:	4d2e      	ldr	r5, [pc, #184]	; (303c <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    2f82:	4e2f      	ldr	r6, [pc, #188]	; (3040 <z_cstart+0xcc>)
    2f84:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2f86:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3044 <z_cstart+0xd0>
    2f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2f8e:	2400      	movs	r4, #0
    2f90:	616b      	str	r3, [r5, #20]
    2f92:	23e0      	movs	r3, #224	; 0xe0
    2f94:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2f98:	77ec      	strb	r4, [r5, #31]
    2f9a:	762c      	strb	r4, [r5, #24]
    2f9c:	766c      	strb	r4, [r5, #25]
    2f9e:	76ac      	strb	r4, [r5, #26]
    2fa0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2fa4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2fa6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2faa:	626b      	str	r3, [r5, #36]	; 0x24
    2fac:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2fb0:	f7fe fb16 	bl	15e0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2fb4:	f7fe f8e6 	bl	1184 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fbc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2fbe:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    2fc0:	f7fe fbec 	bl	179c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2fc4:	f7fe fb54 	bl	1670 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    2fc8:	f240 1301 	movw	r3, #257	; 0x101
    2fcc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2fd0:	ab06      	add	r3, sp, #24
    2fd2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    2fd4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2fd8:	f001 fceb 	bl	49b2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2fdc:	4620      	mov	r0, r4
    2fde:	f7ff ff59 	bl	2e94 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2fe2:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    2fe4:	4d18      	ldr	r5, [pc, #96]	; (3048 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2fe6:	f7ff ff55 	bl	2e94 <z_sys_init_run_level>
	z_sched_init();
    2fea:	f000 fc1d 	bl	3828 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2fee:	4b17      	ldr	r3, [pc, #92]	; (304c <z_cstart+0xd8>)
    2ff0:	9305      	str	r3, [sp, #20]
    2ff2:	2301      	movs	r3, #1
    2ff4:	4916      	ldr	r1, [pc, #88]	; (3050 <z_cstart+0xdc>)
    2ff6:	9400      	str	r4, [sp, #0]
    2ff8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    2ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3000:	464b      	mov	r3, r9
    3002:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3006:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    3008:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    300a:	f000 f825 	bl	3058 <z_setup_new_thread>
    300e:	7b6a      	ldrb	r2, [r5, #13]
    3010:	4607      	mov	r7, r0
    3012:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3016:	4628      	mov	r0, r5
    3018:	736a      	strb	r2, [r5, #13]
    301a:	f001 fd5a 	bl	4ad2 <z_ready_thread>
		init_idle_thread(i);
    301e:	4620      	mov	r0, r4
    3020:	f7ff ff58 	bl	2ed4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3024:	4b0b      	ldr	r3, [pc, #44]	; (3054 <z_cstart+0xe0>)
    3026:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3028:	464a      	mov	r2, r9
    302a:	4639      	mov	r1, r7
    302c:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    302e:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3030:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3034:	f7fe f9a8 	bl	1388 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3038:	20001560 	.word	0x20001560
    303c:	e000ed00 	.word	0xe000ed00
    3040:	20000370 	.word	0x20000370
    3044:	00002f2d 	.word	0x00002f2d
    3048:	20000168 	.word	0x20000168
    304c:	000052d9 	.word	0x000052d9
    3050:	200007c0 	.word	0x200007c0
    3054:	200000e8 	.word	0x200000e8

00003058 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3058:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    305c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    305e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3060:	2604      	movs	r6, #4
    3062:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3064:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3066:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3068:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    306c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    306e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3070:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3074:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    3076:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3078:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    307c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    307e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3082:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3086:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3088:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    308a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    308c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3090:	9202      	str	r2, [sp, #8]
    3092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3094:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3096:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    309a:	9200      	str	r2, [sp, #0]
    309c:	4642      	mov	r2, r8
{
    309e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    30a0:	f7fe f940 	bl	1324 <arch_new_thread>
	if (!_current) {
    30a4:	4b04      	ldr	r3, [pc, #16]	; (30b8 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    30a6:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    30a8:	689b      	ldr	r3, [r3, #8]
    30aa:	b103      	cbz	r3, 30ae <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    30ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    30ae:	6723      	str	r3, [r4, #112]	; 0x70
}
    30b0:	4640      	mov	r0, r8
    30b2:	b004      	add	sp, #16
    30b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30b8:	20000370 	.word	0x20000370

000030bc <z_init_static_threads>:
{
    30bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30c0:	4c29      	ldr	r4, [pc, #164]	; (3168 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    30c2:	4d2a      	ldr	r5, [pc, #168]	; (316c <z_init_static_threads+0xb0>)
{
    30c4:	b087      	sub	sp, #28
    30c6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    30c8:	42ae      	cmp	r6, r5
    30ca:	f104 0430 	add.w	r4, r4, #48	; 0x30
    30ce:	d30f      	bcc.n	30f0 <z_init_static_threads+0x34>
	k_sched_lock();
    30d0:	f000 f9c0 	bl	3454 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    30d4:	4c24      	ldr	r4, [pc, #144]	; (3168 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    30d6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3170 <z_init_static_threads+0xb4>
		} else {
			return (t * to_hz + off) / from_hz;
    30da:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    30de:	f240 37e7 	movw	r7, #999	; 0x3e7
    30e2:	42ac      	cmp	r4, r5
    30e4:	d320      	bcc.n	3128 <z_init_static_threads+0x6c>
}
    30e6:	b007      	add	sp, #28
    30e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    30ec:	f000 bb80 	b.w	37f0 <k_sched_unlock>
		z_setup_new_thread(
    30f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    30f4:	9305      	str	r3, [sp, #20]
    30f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    30fa:	9304      	str	r3, [sp, #16]
    30fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3100:	9303      	str	r3, [sp, #12]
    3102:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3106:	9302      	str	r3, [sp, #8]
    3108:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    310c:	9301      	str	r3, [sp, #4]
    310e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3112:	9300      	str	r3, [sp, #0]
    3114:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3118:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    311c:	f7ff ff9c 	bl	3058 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3120:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3124:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3126:	e7ce      	b.n	30c6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3128:	6a63      	ldr	r3, [r4, #36]	; 0x24
    312a:	1c5a      	adds	r2, r3, #1
    312c:	d00d      	beq.n	314a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    312e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3132:	2100      	movs	r1, #0
    3134:	4638      	mov	r0, r7
    3136:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    313a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    313e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3142:	d104      	bne.n	314e <z_init_static_threads+0x92>
	z_sched_start(thread);
    3144:	4640      	mov	r0, r8
    3146:	f000 fa69 	bl	361c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    314a:	3430      	adds	r4, #48	; 0x30
    314c:	e7c9      	b.n	30e2 <z_init_static_threads+0x26>
    314e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3152:	2300      	movs	r3, #0
    3154:	f7fc ffd4 	bl	100 <__aeabi_uldivmod>
    3158:	4602      	mov	r2, r0
    315a:	460b      	mov	r3, r1
    315c:	f108 0018 	add.w	r0, r8, #24
    3160:	4649      	mov	r1, r9
    3162:	f000 fccd 	bl	3b00 <z_add_timeout>
    3166:	e7f0      	b.n	314a <z_init_static_threads+0x8e>
    3168:	200000d0 	.word	0x200000d0
    316c:	200000d0 	.word	0x200000d0
    3170:	00004af3 	.word	0x00004af3

00003174 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3174:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3176:	4c09      	ldr	r4, [pc, #36]	; (319c <idle+0x28>)
	__asm__ volatile(
    3178:	f04f 0220 	mov.w	r2, #32
    317c:	f3ef 8311 	mrs	r3, BASEPRI
    3180:	f382 8812 	msr	BASEPRI_MAX, r2
    3184:	f3bf 8f6f 	isb	sy
    3188:	f001 fd3d 	bl	4c06 <z_get_next_timeout_expiry>
    318c:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    318e:	f7fd ff79 	bl	1084 <pm_system_suspend>
    3192:	2800      	cmp	r0, #0
    3194:	d1f0      	bne.n	3178 <idle+0x4>
	arch_cpu_idle();
    3196:	f7fd fffb 	bl	1190 <arch_cpu_idle>
}
    319a:	e7ed      	b.n	3178 <idle+0x4>
    319c:	20000370 	.word	0x20000370

000031a0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    31a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    31a4:	4604      	mov	r4, r0
    31a6:	4617      	mov	r7, r2
    31a8:	461e      	mov	r6, r3
    31aa:	f04f 0320 	mov.w	r3, #32
    31ae:	f3ef 8811 	mrs	r8, BASEPRI
    31b2:	f383 8812 	msr	BASEPRI_MAX, r3
    31b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    31ba:	68c3      	ldr	r3, [r0, #12]
    31bc:	4a32      	ldr	r2, [pc, #200]	; (3288 <z_impl_k_mutex_lock+0xe8>)
    31be:	b16b      	cbz	r3, 31dc <z_impl_k_mutex_lock+0x3c>
    31c0:	6880      	ldr	r0, [r0, #8]
    31c2:	6891      	ldr	r1, [r2, #8]
    31c4:	4288      	cmp	r0, r1
    31c6:	d019      	beq.n	31fc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    31c8:	ea57 0306 	orrs.w	r3, r7, r6
    31cc:	d118      	bne.n	3200 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    31ce:	f388 8811 	msr	BASEPRI, r8
    31d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    31d6:	f06f 000f 	mvn.w	r0, #15
    31da:	e00c      	b.n	31f6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    31dc:	6891      	ldr	r1, [r2, #8]
    31de:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    31e2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    31e4:	3301      	adds	r3, #1
    31e6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    31e8:	6893      	ldr	r3, [r2, #8]
    31ea:	60a3      	str	r3, [r4, #8]
    31ec:	f388 8811 	msr	BASEPRI, r8
    31f0:	f3bf 8f6f 	isb	sy
		return 0;
    31f4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    31f6:	b002      	add	sp, #8
    31f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    31fc:	6921      	ldr	r1, [r4, #16]
    31fe:	e7f0      	b.n	31e2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3200:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3204:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    3208:	4299      	cmp	r1, r3
    320a:	bfa8      	it	ge
    320c:	4619      	movge	r1, r3
    320e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3212:	4291      	cmp	r1, r2
    3214:	bfb8      	it	lt
    3216:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3218:	428b      	cmp	r3, r1
    321a:	dd2e      	ble.n	327a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    321c:	f001 fc08 	bl	4a30 <adjust_owner_prio.isra.0>
    3220:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3222:	e9cd 7600 	strd	r7, r6, [sp]
    3226:	4819      	ldr	r0, [pc, #100]	; (328c <z_impl_k_mutex_lock+0xec>)
    3228:	4622      	mov	r2, r4
    322a:	4641      	mov	r1, r8
    322c:	f000 fa52 	bl	36d4 <z_pend_curr>
	if (got_mutex == 0) {
    3230:	2800      	cmp	r0, #0
    3232:	d0e0      	beq.n	31f6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    3234:	f04f 0320 	mov.w	r3, #32
    3238:	f3ef 8611 	mrs	r6, BASEPRI
    323c:	f383 8812 	msr	BASEPRI_MAX, r3
    3240:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3244:	6823      	ldr	r3, [r4, #0]
    3246:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3248:	429c      	cmp	r4, r3
    324a:	d00a      	beq.n	3262 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    324c:	b14b      	cbz	r3, 3262 <z_impl_k_mutex_lock+0xc2>
    324e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3252:	4299      	cmp	r1, r3
    3254:	bfa8      	it	ge
    3256:	4619      	movge	r1, r3
    3258:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    325c:	4299      	cmp	r1, r3
    325e:	bfb8      	it	lt
    3260:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3262:	68a0      	ldr	r0, [r4, #8]
    3264:	f001 fbe4 	bl	4a30 <adjust_owner_prio.isra.0>
    3268:	b900      	cbnz	r0, 326c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    326a:	b145      	cbz	r5, 327e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    326c:	4807      	ldr	r0, [pc, #28]	; (328c <z_impl_k_mutex_lock+0xec>)
    326e:	4631      	mov	r1, r6
    3270:	f000 f8de 	bl	3430 <z_reschedule>
	return -EAGAIN;
    3274:	f06f 000a 	mvn.w	r0, #10
    3278:	e7bd      	b.n	31f6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    327a:	2500      	movs	r5, #0
    327c:	e7d1      	b.n	3222 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    327e:	f386 8811 	msr	BASEPRI, r6
    3282:	f3bf 8f6f 	isb	sy
    3286:	e7f5      	b.n	3274 <z_impl_k_mutex_lock+0xd4>
    3288:	20000370 	.word	0x20000370
    328c:	200007ba 	.word	0x200007ba

00003290 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3290:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3292:	6883      	ldr	r3, [r0, #8]
{
    3294:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3296:	2b00      	cmp	r3, #0
    3298:	d032      	beq.n	3300 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    329a:	4a1c      	ldr	r2, [pc, #112]	; (330c <z_impl_k_mutex_unlock+0x7c>)
    329c:	6892      	ldr	r2, [r2, #8]
    329e:	4293      	cmp	r3, r2
    32a0:	d131      	bne.n	3306 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    32a2:	7bda      	ldrb	r2, [r3, #15]
    32a4:	3a01      	subs	r2, #1
    32a6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    32a8:	68c3      	ldr	r3, [r0, #12]
    32aa:	2b01      	cmp	r3, #1
    32ac:	d905      	bls.n	32ba <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    32ae:	3b01      	subs	r3, #1
    32b0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    32b2:	f000 fa9d 	bl	37f0 <k_sched_unlock>

	return 0;
    32b6:	2000      	movs	r0, #0
}
    32b8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    32ba:	f04f 0320 	mov.w	r3, #32
    32be:	f3ef 8511 	mrs	r5, BASEPRI
    32c2:	f383 8812 	msr	BASEPRI_MAX, r3
    32c6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    32ca:	6901      	ldr	r1, [r0, #16]
    32cc:	6880      	ldr	r0, [r0, #8]
    32ce:	f001 fbaf 	bl	4a30 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    32d2:	4620      	mov	r0, r4
    32d4:	f001 fc59 	bl	4b8a <z_unpend_first_thread>
	mutex->owner = new_owner;
    32d8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    32da:	b158      	cbz	r0, 32f4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    32dc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    32e0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    32e2:	2200      	movs	r2, #0
    32e4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    32e6:	f001 fbf4 	bl	4ad2 <z_ready_thread>
		z_reschedule(&lock, key);
    32ea:	4809      	ldr	r0, [pc, #36]	; (3310 <z_impl_k_mutex_unlock+0x80>)
    32ec:	4629      	mov	r1, r5
    32ee:	f000 f89f 	bl	3430 <z_reschedule>
    32f2:	e7de      	b.n	32b2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    32f4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    32f6:	f385 8811 	msr	BASEPRI, r5
    32fa:	f3bf 8f6f 	isb	sy
    32fe:	e7d8      	b.n	32b2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    3300:	f06f 0015 	mvn.w	r0, #21
    3304:	e7d8      	b.n	32b8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    3306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    330a:	e7d5      	b.n	32b8 <z_impl_k_mutex_unlock+0x28>
    330c:	20000370 	.word	0x20000370
    3310:	200007ba 	.word	0x200007ba

00003314 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3314:	b538      	push	{r3, r4, r5, lr}
    3316:	4604      	mov	r4, r0
	__asm__ volatile(
    3318:	f04f 0320 	mov.w	r3, #32
    331c:	f3ef 8511 	mrs	r5, BASEPRI
    3320:	f383 8812 	msr	BASEPRI_MAX, r3
    3324:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3328:	f001 fc2f 	bl	4b8a <z_unpend_first_thread>

	if (thread != NULL) {
    332c:	b148      	cbz	r0, 3342 <z_impl_k_sem_give+0x2e>
    332e:	2200      	movs	r2, #0
    3330:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3332:	f001 fbce 	bl	4ad2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3336:	4629      	mov	r1, r5
    3338:	4805      	ldr	r0, [pc, #20]	; (3350 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    333e:	f000 b877 	b.w	3430 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3342:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3346:	429a      	cmp	r2, r3
    3348:	bf18      	it	ne
    334a:	3301      	addne	r3, #1
    334c:	60a3      	str	r3, [r4, #8]
}
    334e:	e7f2      	b.n	3336 <z_impl_k_sem_give+0x22>
    3350:	200007ba 	.word	0x200007ba

00003354 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3354:	b513      	push	{r0, r1, r4, lr}
    3356:	f04f 0420 	mov.w	r4, #32
    335a:	f3ef 8111 	mrs	r1, BASEPRI
    335e:	f384 8812 	msr	BASEPRI_MAX, r4
    3362:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3366:	6884      	ldr	r4, [r0, #8]
    3368:	b144      	cbz	r4, 337c <z_impl_k_sem_take+0x28>
		sem->count--;
    336a:	3c01      	subs	r4, #1
    336c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    336e:	f381 8811 	msr	BASEPRI, r1
    3372:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3376:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3378:	b002      	add	sp, #8
    337a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    337c:	ea52 0403 	orrs.w	r4, r2, r3
    3380:	d106      	bne.n	3390 <z_impl_k_sem_take+0x3c>
    3382:	f381 8811 	msr	BASEPRI, r1
    3386:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    338a:	f06f 000f 	mvn.w	r0, #15
    338e:	e7f3      	b.n	3378 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3390:	e9cd 2300 	strd	r2, r3, [sp]
    3394:	4602      	mov	r2, r0
    3396:	4802      	ldr	r0, [pc, #8]	; (33a0 <z_impl_k_sem_take+0x4c>)
    3398:	f000 f99c 	bl	36d4 <z_pend_curr>
	return ret;
    339c:	e7ec      	b.n	3378 <z_impl_k_sem_take+0x24>
    339e:	bf00      	nop
    33a0:	200007ba 	.word	0x200007ba

000033a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    33a4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    33a6:	4c08      	ldr	r4, [pc, #32]	; (33c8 <z_reset_time_slice+0x24>)
    33a8:	6823      	ldr	r3, [r4, #0]
    33aa:	b15b      	cbz	r3, 33c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    33ac:	f7fe fffe 	bl	23ac <sys_clock_elapsed>
    33b0:	4603      	mov	r3, r0
    33b2:	6820      	ldr	r0, [r4, #0]
    33b4:	4a05      	ldr	r2, [pc, #20]	; (33cc <z_reset_time_slice+0x28>)
    33b6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    33b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    33bc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    33be:	2100      	movs	r1, #0
    33c0:	f001 bc31 	b.w	4c26 <z_set_timeout_expiry>
}
    33c4:	bd10      	pop	{r4, pc}
    33c6:	bf00      	nop
    33c8:	200003a0 	.word	0x200003a0
    33cc:	20000370 	.word	0x20000370

000033d0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    33d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33d2:	4604      	mov	r4, r0
    33d4:	460d      	mov	r5, r1
	__asm__ volatile(
    33d6:	f04f 0320 	mov.w	r3, #32
    33da:	f3ef 8611 	mrs	r6, BASEPRI
    33de:	f383 8812 	msr	BASEPRI_MAX, r3
    33e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    33e6:	4b0f      	ldr	r3, [pc, #60]	; (3424 <k_sched_time_slice_set+0x54>)
    33e8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    33ea:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    33ee:	f240 30e7 	movw	r0, #999	; 0x3e7
    33f2:	6119      	str	r1, [r3, #16]
    33f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33f8:	2300      	movs	r3, #0
    33fa:	fbe4 0107 	umlal	r0, r1, r4, r7
    33fe:	f7fc fe7f 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3402:	2c00      	cmp	r4, #0
    3404:	4b08      	ldr	r3, [pc, #32]	; (3428 <k_sched_time_slice_set+0x58>)
    3406:	dc09      	bgt.n	341c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    3408:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    340a:	4b08      	ldr	r3, [pc, #32]	; (342c <k_sched_time_slice_set+0x5c>)
    340c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    340e:	f7ff ffc9 	bl	33a4 <z_reset_time_slice>
	__asm__ volatile(
    3412:	f386 8811 	msr	BASEPRI, r6
    3416:	f3bf 8f6f 	isb	sy
	}
}
    341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    341c:	2802      	cmp	r0, #2
    341e:	bfb8      	it	lt
    3420:	2002      	movlt	r0, #2
    3422:	e7f1      	b.n	3408 <k_sched_time_slice_set+0x38>
    3424:	20000370 	.word	0x20000370
    3428:	200003a0 	.word	0x200003a0
    342c:	2000039c 	.word	0x2000039c

00003430 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3430:	b949      	cbnz	r1, 3446 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3432:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3436:	b930      	cbnz	r0, 3446 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3438:	4b05      	ldr	r3, [pc, #20]	; (3450 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    343a:	69da      	ldr	r2, [r3, #28]
    343c:	689b      	ldr	r3, [r3, #8]
    343e:	429a      	cmp	r2, r3
    3440:	d001      	beq.n	3446 <z_reschedule+0x16>
	ret = arch_swap(key);
    3442:	f7fd bf1b 	b.w	127c <arch_swap>
    3446:	f381 8811 	msr	BASEPRI, r1
    344a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    344e:	4770      	bx	lr
    3450:	20000370 	.word	0x20000370

00003454 <k_sched_lock>:
	__asm__ volatile(
    3454:	f04f 0320 	mov.w	r3, #32
    3458:	f3ef 8111 	mrs	r1, BASEPRI
    345c:	f383 8812 	msr	BASEPRI_MAX, r3
    3460:	f3bf 8f6f 	isb	sy
    3464:	4b04      	ldr	r3, [pc, #16]	; (3478 <k_sched_lock+0x24>)
    3466:	689a      	ldr	r2, [r3, #8]
    3468:	7bd3      	ldrb	r3, [r2, #15]
    346a:	3b01      	subs	r3, #1
    346c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    346e:	f381 8811 	msr	BASEPRI, r1
    3472:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3476:	4770      	bx	lr
    3478:	20000370 	.word	0x20000370

0000347c <update_cache>:
{
    347c:	b538      	push	{r3, r4, r5, lr}
    347e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3480:	480c      	ldr	r0, [pc, #48]	; (34b4 <update_cache+0x38>)
    3482:	4d0d      	ldr	r5, [pc, #52]	; (34b8 <update_cache+0x3c>)
    3484:	f001 fb1f 	bl	4ac6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3488:	4604      	mov	r4, r0
    348a:	b900      	cbnz	r0, 348e <update_cache+0x12>
    348c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    348e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3490:	b94a      	cbnz	r2, 34a6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    3492:	7b5a      	ldrb	r2, [r3, #13]
    3494:	06d2      	lsls	r2, r2, #27
    3496:	d106      	bne.n	34a6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3498:	69a2      	ldr	r2, [r4, #24]
    349a:	b922      	cbnz	r2, 34a6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    349c:	89da      	ldrh	r2, [r3, #14]
    349e:	2a7f      	cmp	r2, #127	; 0x7f
    34a0:	d901      	bls.n	34a6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    34a2:	61eb      	str	r3, [r5, #28]
}
    34a4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    34a6:	429c      	cmp	r4, r3
    34a8:	d001      	beq.n	34ae <update_cache+0x32>
			z_reset_time_slice();
    34aa:	f7ff ff7b 	bl	33a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    34ae:	61ec      	str	r4, [r5, #28]
}
    34b0:	e7f8      	b.n	34a4 <update_cache+0x28>
    34b2:	bf00      	nop
    34b4:	20000390 	.word	0x20000390
    34b8:	20000370 	.word	0x20000370

000034bc <move_thread_to_end_of_prio_q>:
{
    34bc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    34be:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    34c2:	7b43      	ldrb	r3, [r0, #13]
    34c4:	2a00      	cmp	r2, #0
{
    34c6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    34c8:	da04      	bge.n	34d4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    34ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    34ce:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    34d0:	f001 fabd 	bl	4a4e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    34d4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    34d6:	4a15      	ldr	r2, [pc, #84]	; (352c <move_thread_to_end_of_prio_q+0x70>)
    34d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34dc:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    34de:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34e2:	f102 0520 	add.w	r5, r2, #32
    34e6:	42ab      	cmp	r3, r5
    34e8:	d01b      	beq.n	3522 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    34ea:	b1d3      	cbz	r3, 3522 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    34ec:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    34f0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    34f4:	4286      	cmp	r6, r0
    34f6:	d00f      	beq.n	3518 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    34f8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    34fa:	2800      	cmp	r0, #0
    34fc:	dd0c      	ble.n	3518 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    34fe:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3500:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3504:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3506:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3508:	6890      	ldr	r0, [r2, #8]
    350a:	1a43      	subs	r3, r0, r1
    350c:	4258      	negs	r0, r3
}
    350e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3512:	4158      	adcs	r0, r3
    3514:	f7ff bfb2 	b.w	347c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3518:	42a3      	cmp	r3, r4
    351a:	d002      	beq.n	3522 <move_thread_to_end_of_prio_q+0x66>
    351c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    351e:	2b00      	cmp	r3, #0
    3520:	d1e6      	bne.n	34f0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    3522:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    3526:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3528:	6251      	str	r1, [r2, #36]	; 0x24
}
    352a:	e7ed      	b.n	3508 <move_thread_to_end_of_prio_q+0x4c>
    352c:	20000370 	.word	0x20000370

00003530 <z_time_slice>:
{
    3530:	b538      	push	{r3, r4, r5, lr}
    3532:	4601      	mov	r1, r0
	__asm__ volatile(
    3534:	f04f 0320 	mov.w	r3, #32
    3538:	f3ef 8411 	mrs	r4, BASEPRI
    353c:	f383 8812 	msr	BASEPRI_MAX, r3
    3540:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3544:	4b15      	ldr	r3, [pc, #84]	; (359c <z_time_slice+0x6c>)
    3546:	4a16      	ldr	r2, [pc, #88]	; (35a0 <z_time_slice+0x70>)
    3548:	6898      	ldr	r0, [r3, #8]
    354a:	6815      	ldr	r5, [r2, #0]
    354c:	42a8      	cmp	r0, r5
    354e:	d106      	bne.n	355e <z_time_slice+0x2e>
			z_reset_time_slice();
    3550:	f7ff ff28 	bl	33a4 <z_reset_time_slice>
	__asm__ volatile(
    3554:	f384 8811 	msr	BASEPRI, r4
    3558:	f3bf 8f6f 	isb	sy
}
    355c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    355e:	2500      	movs	r5, #0
    3560:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    3562:	4a10      	ldr	r2, [pc, #64]	; (35a4 <z_time_slice+0x74>)
    3564:	6812      	ldr	r2, [r2, #0]
    3566:	b1ba      	cbz	r2, 3598 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    3568:	89c2      	ldrh	r2, [r0, #14]
    356a:	2a7f      	cmp	r2, #127	; 0x7f
    356c:	d814      	bhi.n	3598 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    356e:	7b42      	ldrb	r2, [r0, #13]
    3570:	06d2      	lsls	r2, r2, #27
    3572:	d111      	bne.n	3598 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3574:	4a0c      	ldr	r2, [pc, #48]	; (35a8 <z_time_slice+0x78>)
    3576:	f990 500e 	ldrsb.w	r5, [r0, #14]
    357a:	6812      	ldr	r2, [r2, #0]
    357c:	4295      	cmp	r5, r2
    357e:	db0b      	blt.n	3598 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    3580:	4a0a      	ldr	r2, [pc, #40]	; (35ac <z_time_slice+0x7c>)
    3582:	4290      	cmp	r0, r2
    3584:	d008      	beq.n	3598 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    3586:	691a      	ldr	r2, [r3, #16]
    3588:	428a      	cmp	r2, r1
    358a:	dc02      	bgt.n	3592 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    358c:	f7ff ff96 	bl	34bc <move_thread_to_end_of_prio_q>
    3590:	e7de      	b.n	3550 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    3592:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    3594:	611a      	str	r2, [r3, #16]
    3596:	e7dd      	b.n	3554 <z_time_slice+0x24>
    3598:	2200      	movs	r2, #0
    359a:	e7fb      	b.n	3594 <z_time_slice+0x64>
    359c:	20000370 	.word	0x20000370
    35a0:	20000398 	.word	0x20000398
    35a4:	200003a0 	.word	0x200003a0
    35a8:	2000039c 	.word	0x2000039c
    35ac:	200000e8 	.word	0x200000e8

000035b0 <ready_thread>:
{
    35b0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    35b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    35b6:	7b43      	ldrb	r3, [r0, #13]
    35b8:	2a00      	cmp	r2, #0
    35ba:	db2a      	blt.n	3612 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    35bc:	06da      	lsls	r2, r3, #27
    35be:	d128      	bne.n	3612 <ready_thread+0x62>
    35c0:	6982      	ldr	r2, [r0, #24]
    35c2:	bb32      	cbnz	r2, 3612 <ready_thread+0x62>
	return list->head == list;
    35c4:	4a14      	ldr	r2, [pc, #80]	; (3618 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    35c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35ca:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    35cc:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    35d0:	f102 0520 	add.w	r5, r2, #32
    35d4:	42ab      	cmp	r3, r5
    35d6:	d017      	beq.n	3608 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    35d8:	b1b3      	cbz	r3, 3608 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    35da:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    35de:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    35e2:	428e      	cmp	r6, r1
    35e4:	d00b      	beq.n	35fe <ready_thread+0x4e>
		return b2 - b1;
    35e6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    35e8:	2900      	cmp	r1, #0
    35ea:	dd08      	ble.n	35fe <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    35ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    35ee:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    35f2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    35f4:	6058      	str	r0, [r3, #4]
}
    35f6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    35f8:	2000      	movs	r0, #0
    35fa:	f7ff bf3f 	b.w	347c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    35fe:	42a3      	cmp	r3, r4
    3600:	d002      	beq.n	3608 <ready_thread+0x58>
    3602:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3604:	2b00      	cmp	r3, #0
    3606:	d1ea      	bne.n	35de <ready_thread+0x2e>
	node->prev = tail;
    3608:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    360c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    360e:	6250      	str	r0, [r2, #36]	; 0x24
}
    3610:	e7f1      	b.n	35f6 <ready_thread+0x46>
}
    3612:	bc70      	pop	{r4, r5, r6}
    3614:	4770      	bx	lr
    3616:	bf00      	nop
    3618:	20000370 	.word	0x20000370

0000361c <z_sched_start>:
{
    361c:	b510      	push	{r4, lr}
	__asm__ volatile(
    361e:	f04f 0220 	mov.w	r2, #32
    3622:	f3ef 8411 	mrs	r4, BASEPRI
    3626:	f382 8812 	msr	BASEPRI_MAX, r2
    362a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    362e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3630:	0751      	lsls	r1, r2, #29
    3632:	d404      	bmi.n	363e <z_sched_start+0x22>
	__asm__ volatile(
    3634:	f384 8811 	msr	BASEPRI, r4
    3638:	f3bf 8f6f 	isb	sy
}
    363c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    363e:	f022 0204 	bic.w	r2, r2, #4
    3642:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3644:	f7ff ffb4 	bl	35b0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3648:	4621      	mov	r1, r4
    364a:	4802      	ldr	r0, [pc, #8]	; (3654 <z_sched_start+0x38>)
}
    364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3650:	f7ff beee 	b.w	3430 <z_reschedule>
    3654:	200007ba 	.word	0x200007ba

00003658 <unready_thread>:
{
    3658:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    365a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    365e:	7b43      	ldrb	r3, [r0, #13]
    3660:	2a00      	cmp	r2, #0
{
    3662:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3664:	da04      	bge.n	3670 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    366a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    366c:	f001 f9ef 	bl	4a4e <sys_dlist_remove>
	update_cache(thread == _current);
    3670:	4b04      	ldr	r3, [pc, #16]	; (3684 <unready_thread+0x2c>)
    3672:	6898      	ldr	r0, [r3, #8]
    3674:	1a43      	subs	r3, r0, r1
    3676:	4258      	negs	r0, r3
    3678:	4158      	adcs	r0, r3
}
    367a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    367e:	f7ff befd 	b.w	347c <update_cache>
    3682:	bf00      	nop
    3684:	20000370 	.word	0x20000370

00003688 <pend>:
{
    3688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    368c:	4606      	mov	r6, r0
    368e:	4615      	mov	r5, r2
    3690:	461c      	mov	r4, r3
	__asm__ volatile(
    3692:	f04f 0320 	mov.w	r3, #32
    3696:	f3ef 8711 	mrs	r7, BASEPRI
    369a:	f383 8812 	msr	BASEPRI_MAX, r3
    369e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    36a2:	f001 fa48 	bl	4b36 <add_to_waitq_locked>
	__asm__ volatile(
    36a6:	f387 8811 	msr	BASEPRI, r7
    36aa:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    36ae:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    36b2:	bf08      	it	eq
    36b4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    36b8:	d008      	beq.n	36cc <pend+0x44>
    36ba:	462a      	mov	r2, r5
    36bc:	4623      	mov	r3, r4
    36be:	f106 0018 	add.w	r0, r6, #24
    36c2:	4903      	ldr	r1, [pc, #12]	; (36d0 <pend+0x48>)
}
    36c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36c8:	f000 ba1a 	b.w	3b00 <z_add_timeout>
    36cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36d0:	00004af3 	.word	0x00004af3

000036d4 <z_pend_curr>:
{
    36d4:	b510      	push	{r4, lr}
	pending_current = _current;
    36d6:	4b07      	ldr	r3, [pc, #28]	; (36f4 <z_pend_curr+0x20>)
    36d8:	6898      	ldr	r0, [r3, #8]
    36da:	4b07      	ldr	r3, [pc, #28]	; (36f8 <z_pend_curr+0x24>)
{
    36dc:	460c      	mov	r4, r1
	pending_current = _current;
    36de:	6018      	str	r0, [r3, #0]
{
    36e0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    36e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    36e6:	f7ff ffcf 	bl	3688 <pend>
    36ea:	4620      	mov	r0, r4
}
    36ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36f0:	f7fd bdc4 	b.w	127c <arch_swap>
    36f4:	20000370 	.word	0x20000370
    36f8:	20000398 	.word	0x20000398

000036fc <z_set_prio>:
{
    36fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36fe:	4604      	mov	r4, r0
	__asm__ volatile(
    3700:	f04f 0320 	mov.w	r3, #32
    3704:	f3ef 8611 	mrs	r6, BASEPRI
    3708:	f383 8812 	msr	BASEPRI_MAX, r3
    370c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    3710:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3712:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    3714:	b249      	sxtb	r1, r1
    3716:	d133      	bne.n	3780 <z_set_prio+0x84>
		if (need_sched) {
    3718:	6982      	ldr	r2, [r0, #24]
    371a:	bb8a      	cbnz	r2, 3780 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    371c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3720:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3722:	f001 f994 	bl	4a4e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3726:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    3728:	4a17      	ldr	r2, [pc, #92]	; (3788 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    372a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    372c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3730:	7343      	strb	r3, [r0, #13]
    3732:	4610      	mov	r0, r2
    3734:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3738:	4283      	cmp	r3, r0
    373a:	d01b      	beq.n	3774 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    373c:	b1d3      	cbz	r3, 3774 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    373e:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    3740:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    3744:	42a9      	cmp	r1, r5
    3746:	d010      	beq.n	376a <z_set_prio+0x6e>
		return b2 - b1;
    3748:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    374a:	2d00      	cmp	r5, #0
    374c:	dd0d      	ble.n	376a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    374e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3750:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3754:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3756:	605c      	str	r4, [r3, #4]
			update_cache(1);
    3758:	2001      	movs	r0, #1
    375a:	f7ff fe8f 	bl	347c <update_cache>
    375e:	2001      	movs	r0, #1
	__asm__ volatile(
    3760:	f386 8811 	msr	BASEPRI, r6
    3764:	f3bf 8f6f 	isb	sy
}
    3768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    376a:	42bb      	cmp	r3, r7
    376c:	d002      	beq.n	3774 <z_set_prio+0x78>
    376e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3770:	2b00      	cmp	r3, #0
    3772:	d1e5      	bne.n	3740 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    3774:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    3776:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    377a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    377c:	6254      	str	r4, [r2, #36]	; 0x24
}
    377e:	e7eb      	b.n	3758 <z_set_prio+0x5c>
			thread->base.prio = prio;
    3780:	73a1      	strb	r1, [r4, #14]
    3782:	2000      	movs	r0, #0
    3784:	e7ec      	b.n	3760 <z_set_prio+0x64>
    3786:	bf00      	nop
    3788:	20000370 	.word	0x20000370

0000378c <z_impl_k_thread_suspend>:
{
    378c:	b570      	push	{r4, r5, r6, lr}
    378e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3790:	3018      	adds	r0, #24
    3792:	f001 fa22 	bl	4bda <z_abort_timeout>
	__asm__ volatile(
    3796:	f04f 0320 	mov.w	r3, #32
    379a:	f3ef 8611 	mrs	r6, BASEPRI
    379e:	f383 8812 	msr	BASEPRI_MAX, r3
    37a2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    37a6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    37aa:	7b63      	ldrb	r3, [r4, #13]
    37ac:	2a00      	cmp	r2, #0
    37ae:	da05      	bge.n	37bc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    37b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    37b4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    37b6:	4620      	mov	r0, r4
    37b8:	f001 f949 	bl	4a4e <sys_dlist_remove>
		update_cache(thread == _current);
    37bc:	4d0b      	ldr	r5, [pc, #44]	; (37ec <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    37be:	7b63      	ldrb	r3, [r4, #13]
    37c0:	68a8      	ldr	r0, [r5, #8]
    37c2:	f043 0310 	orr.w	r3, r3, #16
    37c6:	7363      	strb	r3, [r4, #13]
    37c8:	1b03      	subs	r3, r0, r4
    37ca:	4258      	negs	r0, r3
    37cc:	4158      	adcs	r0, r3
    37ce:	f7ff fe55 	bl	347c <update_cache>
	__asm__ volatile(
    37d2:	f386 8811 	msr	BASEPRI, r6
    37d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    37da:	68ab      	ldr	r3, [r5, #8]
    37dc:	42a3      	cmp	r3, r4
    37de:	d103      	bne.n	37e8 <z_impl_k_thread_suspend+0x5c>
}
    37e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    37e4:	f001 b965 	b.w	4ab2 <z_reschedule_unlocked>
}
    37e8:	bd70      	pop	{r4, r5, r6, pc}
    37ea:	bf00      	nop
    37ec:	20000370 	.word	0x20000370

000037f0 <k_sched_unlock>:
{
    37f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    37f2:	f04f 0320 	mov.w	r3, #32
    37f6:	f3ef 8411 	mrs	r4, BASEPRI
    37fa:	f383 8812 	msr	BASEPRI_MAX, r3
    37fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3802:	4b08      	ldr	r3, [pc, #32]	; (3824 <k_sched_unlock+0x34>)
    3804:	689a      	ldr	r2, [r3, #8]
    3806:	7bd3      	ldrb	r3, [r2, #15]
    3808:	3301      	adds	r3, #1
    380a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    380c:	2000      	movs	r0, #0
    380e:	f7ff fe35 	bl	347c <update_cache>
	__asm__ volatile(
    3812:	f384 8811 	msr	BASEPRI, r4
    3816:	f3bf 8f6f 	isb	sy
}
    381a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    381e:	f001 b948 	b.w	4ab2 <z_reschedule_unlocked>
    3822:	bf00      	nop
    3824:	20000370 	.word	0x20000370

00003828 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3828:	4b04      	ldr	r3, [pc, #16]	; (383c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    382a:	2100      	movs	r1, #0
    382c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3830:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3834:	4608      	mov	r0, r1
    3836:	f7ff bdcb 	b.w	33d0 <k_sched_time_slice_set>
    383a:	bf00      	nop
    383c:	20000370 	.word	0x20000370

00003840 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    3840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3842:	f04f 0320 	mov.w	r3, #32
    3846:	f3ef 8511 	mrs	r5, BASEPRI
    384a:	f383 8812 	msr	BASEPRI_MAX, r3
    384e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3852:	491a      	ldr	r1, [pc, #104]	; (38bc <z_impl_k_yield+0x7c>)
    3854:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3856:	7b43      	ldrb	r3, [r0, #13]
    3858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    385c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    385e:	f001 f8f6 	bl	4a4e <sys_dlist_remove>
	}
	queue_thread(_current);
    3862:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3864:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3866:	4608      	mov	r0, r1
    3868:	f062 027f 	orn	r2, r2, #127	; 0x7f
    386c:	735a      	strb	r2, [r3, #13]
    386e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3872:	4282      	cmp	r2, r0
    3874:	d01c      	beq.n	38b0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3876:	b1da      	cbz	r2, 38b0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    3878:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    387a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    387e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    3882:	42a6      	cmp	r6, r4
    3884:	d00f      	beq.n	38a6 <z_impl_k_yield+0x66>
		return b2 - b1;
    3886:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3888:	2c00      	cmp	r4, #0
    388a:	dd0c      	ble.n	38a6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    388c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    388e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3892:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3894:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3896:	2001      	movs	r0, #1
    3898:	f7ff fdf0 	bl	347c <update_cache>
    389c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    389e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    38a2:	f7fd bceb 	b.w	127c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    38a6:	42ba      	cmp	r2, r7
    38a8:	d002      	beq.n	38b0 <z_impl_k_yield+0x70>
    38aa:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    38ac:	2a00      	cmp	r2, #0
    38ae:	d1e6      	bne.n	387e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    38b0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    38b2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    38b6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    38b8:	624b      	str	r3, [r1, #36]	; 0x24
}
    38ba:	e7ec      	b.n	3896 <z_impl_k_yield+0x56>
    38bc:	20000370 	.word	0x20000370

000038c0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    38c0:	ea50 0301 	orrs.w	r3, r0, r1
{
    38c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38c8:	4605      	mov	r5, r0
    38ca:	460e      	mov	r6, r1
	if (ticks == 0) {
    38cc:	d103      	bne.n	38d6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    38ce:	f7ff ffb7 	bl	3840 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    38d2:	2000      	movs	r0, #0
    38d4:	e033      	b.n	393e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    38d6:	f06f 0401 	mvn.w	r4, #1
    38da:	1a24      	subs	r4, r4, r0
    38dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    38e0:	eb63 0301 	sbc.w	r3, r3, r1
    38e4:	2c01      	cmp	r4, #1
    38e6:	f173 0300 	sbcs.w	r3, r3, #0
    38ea:	da02      	bge.n	38f2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    38ec:	f001 f9b5 	bl	4c5a <sys_clock_tick_get_32>
    38f0:	1944      	adds	r4, r0, r5
    38f2:	f04f 0320 	mov.w	r3, #32
    38f6:	f3ef 8811 	mrs	r8, BASEPRI
    38fa:	f383 8812 	msr	BASEPRI_MAX, r3
    38fe:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3902:	4f10      	ldr	r7, [pc, #64]	; (3944 <z_tick_sleep+0x84>)
    3904:	4b10      	ldr	r3, [pc, #64]	; (3948 <z_tick_sleep+0x88>)
    3906:	68b8      	ldr	r0, [r7, #8]
    3908:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    390a:	f7ff fea5 	bl	3658 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    390e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3910:	490e      	ldr	r1, [pc, #56]	; (394c <z_tick_sleep+0x8c>)
    3912:	462a      	mov	r2, r5
    3914:	4633      	mov	r3, r6
    3916:	3018      	adds	r0, #24
    3918:	f000 f8f2 	bl	3b00 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    391c:	68ba      	ldr	r2, [r7, #8]
    391e:	7b53      	ldrb	r3, [r2, #13]
    3920:	f043 0310 	orr.w	r3, r3, #16
    3924:	7353      	strb	r3, [r2, #13]
    3926:	4640      	mov	r0, r8
    3928:	f7fd fca8 	bl	127c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    392c:	f001 f995 	bl	4c5a <sys_clock_tick_get_32>
    3930:	1a20      	subs	r0, r4, r0
    3932:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3936:	2801      	cmp	r0, #1
    3938:	f173 0300 	sbcs.w	r3, r3, #0
    393c:	dbc9      	blt.n	38d2 <z_tick_sleep+0x12>
}
    393e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3942:	bf00      	nop
    3944:	20000370 	.word	0x20000370
    3948:	20000398 	.word	0x20000398
    394c:	00004af3 	.word	0x00004af3

00003950 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3950:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3954:	bf08      	it	eq
    3956:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    395a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    395c:	d106      	bne.n	396c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    395e:	4b08      	ldr	r3, [pc, #32]	; (3980 <z_impl_k_sleep+0x30>)
    3960:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3962:	f7ff ff13 	bl	378c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    396a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    396c:	f7ff ffa8 	bl	38c0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    3970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3974:	fb80 0303 	smull	r0, r3, r0, r3
    3978:	0bc0      	lsrs	r0, r0, #15
    397a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    397e:	e7f4      	b.n	396a <z_impl_k_sleep+0x1a>
    3980:	20000370 	.word	0x20000370

00003984 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3984:	4b01      	ldr	r3, [pc, #4]	; (398c <z_impl_z_current_get+0x8>)
    3986:	6898      	ldr	r0, [r3, #8]
    3988:	4770      	bx	lr
    398a:	bf00      	nop
    398c:	20000370 	.word	0x20000370

00003990 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3994:	4604      	mov	r4, r0
    3996:	f04f 0320 	mov.w	r3, #32
    399a:	f3ef 8611 	mrs	r6, BASEPRI
    399e:	f383 8812 	msr	BASEPRI_MAX, r3
    39a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    39a6:	7b43      	ldrb	r3, [r0, #13]
    39a8:	071a      	lsls	r2, r3, #28
    39aa:	d505      	bpl.n	39b8 <z_thread_abort+0x28>
	__asm__ volatile(
    39ac:	f386 8811 	msr	BASEPRI, r6
    39b0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    39b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    39b8:	f023 0220 	bic.w	r2, r3, #32
    39bc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    39c0:	09d2      	lsrs	r2, r2, #7
    39c2:	d120      	bne.n	3a06 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    39c4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    39c6:	68a3      	ldr	r3, [r4, #8]
    39c8:	b113      	cbz	r3, 39d0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    39ca:	4620      	mov	r0, r4
    39cc:	f001 f847 	bl	4a5e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    39d0:	f104 0018 	add.w	r0, r4, #24
    39d4:	f001 f901 	bl	4bda <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    39d8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    39dc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    39e0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39e2:	42bd      	cmp	r5, r7
    39e4:	d000      	beq.n	39e8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    39e6:	b9b5      	cbnz	r5, 3a16 <z_thread_abort+0x86>
		update_cache(1);
    39e8:	2001      	movs	r0, #1
    39ea:	f7ff fd47 	bl	347c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    39ee:	4b10      	ldr	r3, [pc, #64]	; (3a30 <z_thread_abort+0xa0>)
    39f0:	689b      	ldr	r3, [r3, #8]
    39f2:	42a3      	cmp	r3, r4
    39f4:	d1da      	bne.n	39ac <z_thread_abort+0x1c>
    39f6:	f3ef 8305 	mrs	r3, IPSR
    39fa:	2b00      	cmp	r3, #0
    39fc:	d1d6      	bne.n	39ac <z_thread_abort+0x1c>
    39fe:	4630      	mov	r0, r6
    3a00:	f7fd fc3c 	bl	127c <arch_swap>
	return ret;
    3a04:	e7d2      	b.n	39ac <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a06:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3a0a:	f043 0308 	orr.w	r3, r3, #8
    3a0e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3a10:	f001 f81d 	bl	4a4e <sys_dlist_remove>
}
    3a14:	e7d7      	b.n	39c6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    3a16:	4628      	mov	r0, r5
    3a18:	f001 f821 	bl	4a5e <unpend_thread_no_timeout>
    3a1c:	f105 0018 	add.w	r0, r5, #24
    3a20:	f001 f8db 	bl	4bda <z_abort_timeout>
    3a24:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3a28:	4628      	mov	r0, r5
    3a2a:	f7ff fdc1 	bl	35b0 <ready_thread>
    3a2e:	e7d7      	b.n	39e0 <z_thread_abort+0x50>
    3a30:	20000370 	.word	0x20000370

00003a34 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3a34:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    3a36:	4806      	ldr	r0, [pc, #24]	; (3a50 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    3a38:	4a06      	ldr	r2, [pc, #24]	; (3a54 <z_data_copy+0x20>)
    3a3a:	4907      	ldr	r1, [pc, #28]	; (3a58 <z_data_copy+0x24>)
    3a3c:	1a12      	subs	r2, r2, r0
    3a3e:	f000 fd68 	bl	4512 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3a46:	4a05      	ldr	r2, [pc, #20]	; (3a5c <z_data_copy+0x28>)
    3a48:	4905      	ldr	r1, [pc, #20]	; (3a60 <z_data_copy+0x2c>)
    3a4a:	4806      	ldr	r0, [pc, #24]	; (3a64 <z_data_copy+0x30>)
    3a4c:	f000 bd61 	b.w	4512 <memcpy>
    3a50:	20000000 	.word	0x20000000
    3a54:	200000e4 	.word	0x200000e4
    3a58:	00005320 	.word	0x00005320
    3a5c:	00000000 	.word	0x00000000
    3a60:	00005320 	.word	0x00005320
    3a64:	20000000 	.word	0x20000000

00003a68 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3a68:	4b03      	ldr	r3, [pc, #12]	; (3a78 <elapsed+0x10>)
    3a6a:	681b      	ldr	r3, [r3, #0]
    3a6c:	b90b      	cbnz	r3, 3a72 <elapsed+0xa>
    3a6e:	f7fe bc9d 	b.w	23ac <sys_clock_elapsed>
}
    3a72:	2000      	movs	r0, #0
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop
    3a78:	200003a4 	.word	0x200003a4

00003a7c <next_timeout>:
	return list->head == list;
    3a7c:	4b11      	ldr	r3, [pc, #68]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)

static int32_t next_timeout(void)
{
    3a7e:	b510      	push	{r4, lr}
    3a80:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a82:	429c      	cmp	r4, r3
    3a84:	bf08      	it	eq
    3a86:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3a88:	f7ff ffee 	bl	3a68 <elapsed>
    3a8c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    3a8e:	b16c      	cbz	r4, 3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3a90:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    3a94:	1ac0      	subs	r0, r0, r3
    3a96:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3a9a:	2801      	cmp	r0, #1
    3a9c:	f173 0200 	sbcs.w	r2, r3, #0
    3aa0:	db0d      	blt.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3aa2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    3aa6:	f173 0300 	sbcs.w	r3, r3, #0
    3aaa:	db01      	blt.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
	int32_t ret = to == NULL ? MAX_WAIT
    3aac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3ab0:	4b05      	ldr	r3, [pc, #20]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    3ab2:	691b      	ldr	r3, [r3, #16]
    3ab4:	b113      	cbz	r3, 3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
    3ab6:	4298      	cmp	r0, r3
    3ab8:	bfa8      	it	ge
    3aba:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3abc:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3abe:	2000      	movs	r0, #0
    3ac0:	e7f6      	b.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3ac2:	bf00      	nop
    3ac4:	200000b4 	.word	0x200000b4
    3ac8:	20000370 	.word	0x20000370

00003acc <remove_timeout>:
{
    3acc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    3ace:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3ad0:	b168      	cbz	r0, 3aee <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3ad2:	4a0a      	ldr	r2, [pc, #40]	; (3afc <remove_timeout+0x30>)
    3ad4:	6852      	ldr	r2, [r2, #4]
    3ad6:	4290      	cmp	r0, r2
    3ad8:	d009      	beq.n	3aee <remove_timeout+0x22>
	if (next(t) != NULL) {
    3ada:	b143      	cbz	r3, 3aee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3adc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3ae0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3ae4:	1912      	adds	r2, r2, r4
    3ae6:	eb41 0105 	adc.w	r1, r1, r5
    3aea:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    3aee:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    3af0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3af2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3af4:	2300      	movs	r3, #0
	node->prev = NULL;
    3af6:	e9c0 3300 	strd	r3, r3, [r0]
}
    3afa:	bd30      	pop	{r4, r5, pc}
    3afc:	200000b4 	.word	0x200000b4

00003b00 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3b04:	bf08      	it	eq
    3b06:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b0c:	4604      	mov	r4, r0
    3b0e:	461f      	mov	r7, r3
    3b10:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b12:	d067      	beq.n	3be4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3b14:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3b16:	f04f 0320 	mov.w	r3, #32
    3b1a:	f3ef 8611 	mrs	r6, BASEPRI
    3b1e:	f383 8812 	msr	BASEPRI_MAX, r3
    3b22:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    3b26:	f06f 0201 	mvn.w	r2, #1
    3b2a:	1b53      	subs	r3, r2, r5
    3b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    3b30:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3b34:	2b00      	cmp	r3, #0
    3b36:	db1b      	blt.n	3b70 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3b38:	4b2b      	ldr	r3, [pc, #172]	; (3be8 <z_add_timeout+0xe8>)
    3b3a:	e9d3 1300 	ldrd	r1, r3, [r3]
    3b3e:	1a52      	subs	r2, r2, r1
    3b40:	eb6c 0303 	sbc.w	r3, ip, r3
    3b44:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    3b46:	eb63 0307 	sbc.w	r3, r3, r7
    3b4a:	2d01      	cmp	r5, #1
    3b4c:	f173 0200 	sbcs.w	r2, r3, #0
    3b50:	bfbc      	itt	lt
    3b52:	2501      	movlt	r5, #1
    3b54:	2300      	movlt	r3, #0
    3b56:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    3b5a:	4824      	ldr	r0, [pc, #144]	; (3bec <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    3b5c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b60:	4283      	cmp	r3, r0
    3b62:	d118      	bne.n	3b96 <z_add_timeout+0x96>
	node->prev = tail;
    3b64:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    3b68:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    3b6c:	6044      	str	r4, [r0, #4]
}
    3b6e:	e026      	b.n	3bbe <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    3b70:	f7ff ff7a 	bl	3a68 <elapsed>
    3b74:	3501      	adds	r5, #1
    3b76:	f147 0700 	adc.w	r7, r7, #0
    3b7a:	182d      	adds	r5, r5, r0
    3b7c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    3b80:	e9c4 5704 	strd	r5, r7, [r4, #16]
    3b84:	e7e9      	b.n	3b5a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    3b86:	1a52      	subs	r2, r2, r1
    3b88:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    3b8c:	459c      	cmp	ip, r3
    3b8e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    3b92:	d0e7      	beq.n	3b64 <z_add_timeout+0x64>
    3b94:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    3b96:	2b00      	cmp	r3, #0
    3b98:	d0e4      	beq.n	3b64 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    3b9a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    3b9e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    3ba2:	428a      	cmp	r2, r1
    3ba4:	eb75 0e07 	sbcs.w	lr, r5, r7
    3ba8:	daed      	bge.n	3b86 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    3baa:	1a8a      	subs	r2, r1, r2
    3bac:	eb67 0505 	sbc.w	r5, r7, r5
    3bb0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    3bb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3bb6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3bba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3bbc:	605c      	str	r4, [r3, #4]
	return list->head == list;
    3bbe:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bc0:	4283      	cmp	r3, r0
    3bc2:	d00b      	beq.n	3bdc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3bc4:	429c      	cmp	r4, r3
    3bc6:	d109      	bne.n	3bdc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3bc8:	f7ff ff58 	bl	3a7c <next_timeout>

			if (next_time == 0 ||
    3bcc:	b118      	cbz	r0, 3bd6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    3bce:	4b08      	ldr	r3, [pc, #32]	; (3bf0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    3bd0:	691b      	ldr	r3, [r3, #16]
    3bd2:	4283      	cmp	r3, r0
    3bd4:	d002      	beq.n	3bdc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    3bd6:	2100      	movs	r1, #0
    3bd8:	f7fe fbb6 	bl	2348 <sys_clock_set_timeout>
	__asm__ volatile(
    3bdc:	f386 8811 	msr	BASEPRI, r6
    3be0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3be6:	bf00      	nop
    3be8:	200001e8 	.word	0x200001e8
    3bec:	200000b4 	.word	0x200000b4
    3bf0:	20000370 	.word	0x20000370

00003bf4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3bf8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3bfa:	f7ff fc99 	bl	3530 <z_time_slice>
	__asm__ volatile(
    3bfe:	f04f 0320 	mov.w	r3, #32
    3c02:	f3ef 8411 	mrs	r4, BASEPRI
    3c06:	f383 8812 	msr	BASEPRI_MAX, r3
    3c0a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3c0e:	4e24      	ldr	r6, [pc, #144]	; (3ca0 <sys_clock_announce+0xac>)
	return list->head == list;
    3c10:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3ca4 <sys_clock_announce+0xb0>
    3c14:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3c16:	4d24      	ldr	r5, [pc, #144]	; (3ca8 <sys_clock_announce+0xb4>)
    3c18:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3c1c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c1e:	4540      	cmp	r0, r8
		curr_tick += dt;
    3c20:	e9d5 1e00 	ldrd	r1, lr, [r5]
    3c24:	ea4f 77e2 	mov.w	r7, r2, asr #31
    3c28:	d00b      	beq.n	3c42 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3c2a:	b150      	cbz	r0, 3c42 <sys_clock_announce+0x4e>
    3c2c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    3c30:	429a      	cmp	r2, r3
    3c32:	eb77 090c 	sbcs.w	r9, r7, ip
    3c36:	da16      	bge.n	3c66 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3c38:	1a9b      	subs	r3, r3, r2
    3c3a:	eb6c 0c07 	sbc.w	ip, ip, r7
    3c3e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    3c42:	1852      	adds	r2, r2, r1
    3c44:	eb4e 0707 	adc.w	r7, lr, r7
    3c48:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    3c4c:	2500      	movs	r5, #0
    3c4e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3c50:	f7ff ff14 	bl	3a7c <next_timeout>
    3c54:	4629      	mov	r1, r5
    3c56:	f7fe fb77 	bl	2348 <sys_clock_set_timeout>
	__asm__ volatile(
    3c5a:	f384 8811 	msr	BASEPRI, r4
    3c5e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3c66:	1859      	adds	r1, r3, r1
    3c68:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    3c6c:	1ad3      	subs	r3, r2, r3
    3c6e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    3c70:	2200      	movs	r2, #0
    3c72:	2300      	movs	r3, #0
    3c74:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    3c78:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    3c7c:	f7ff ff26 	bl	3acc <remove_timeout>
    3c80:	f384 8811 	msr	BASEPRI, r4
    3c84:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3c88:	6883      	ldr	r3, [r0, #8]
    3c8a:	4798      	blx	r3
	__asm__ volatile(
    3c8c:	f04f 0320 	mov.w	r3, #32
    3c90:	f3ef 8411 	mrs	r4, BASEPRI
    3c94:	f383 8812 	msr	BASEPRI_MAX, r3
    3c98:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3c9c:	e7bc      	b.n	3c18 <sys_clock_announce+0x24>
    3c9e:	bf00      	nop
    3ca0:	200003a4 	.word	0x200003a4
    3ca4:	200000b4 	.word	0x200000b4
    3ca8:	200001e8 	.word	0x200001e8

00003cac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3cac:	b510      	push	{r4, lr}
    3cae:	f04f 0320 	mov.w	r3, #32
    3cb2:	f3ef 8411 	mrs	r4, BASEPRI
    3cb6:	f383 8812 	msr	BASEPRI_MAX, r3
    3cba:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    3cbe:	f7fe fb75 	bl	23ac <sys_clock_elapsed>
    3cc2:	4a05      	ldr	r2, [pc, #20]	; (3cd8 <sys_clock_tick_get+0x2c>)
    3cc4:	e9d2 3100 	ldrd	r3, r1, [r2]
    3cc8:	18c0      	adds	r0, r0, r3
    3cca:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    3cce:	f384 8811 	msr	BASEPRI, r4
    3cd2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3cd6:	bd10      	pop	{r4, pc}
    3cd8:	200001e8 	.word	0x200001e8

00003cdc <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
    3cdc:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    3cde:	4601      	mov	r1, r0
    3ce0:	4801      	ldr	r0, [pc, #4]	; (3ce8 <k_aligned_alloc+0xc>)
    3ce2:	f000 bfed 	b.w	4cc0 <z_heap_aligned_alloc>
    3ce6:	bf00      	nop
    3ce8:	200000d0 	.word	0x200000d0

00003cec <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3cec:	4a02      	ldr	r2, [pc, #8]	; (3cf8 <boot_banner+0xc>)
    3cee:	4903      	ldr	r1, [pc, #12]	; (3cfc <boot_banner+0x10>)
    3cf0:	4803      	ldr	r0, [pc, #12]	; (3d00 <boot_banner+0x14>)
    3cf2:	f000 b8f9 	b.w	3ee8 <printk>
    3cf6:	bf00      	nop
    3cf8:	000051ef 	.word	0x000051ef
    3cfc:	000052de 	.word	0x000052de
    3d00:	000052f9 	.word	0x000052f9

00003d04 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    3d04:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    3d06:	4c06      	ldr	r4, [pc, #24]	; (3d20 <statics_init+0x1c>)
    3d08:	4d06      	ldr	r5, [pc, #24]	; (3d24 <statics_init+0x20>)
    3d0a:	42ac      	cmp	r4, r5
    3d0c:	d301      	bcc.n	3d12 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    3d0e:	2000      	movs	r0, #0
    3d10:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    3d12:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3d16:	4620      	mov	r0, r4
    3d18:	f000 fff0 	bl	4cfc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    3d1c:	3414      	adds	r4, #20
    3d1e:	e7f4      	b.n	3d0a <statics_init+0x6>
    3d20:	200000d0 	.word	0x200000d0
    3d24:	200000e4 	.word	0x200000e4

00003d28 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    3d28:	4770      	bx	lr

00003d2a <graph_init>:
#include <stdint.h>
#include <stdlib.h>

#include "../include/graph.h"

uint8_t graph_init(struct node_t ** graph, struct k_mutex * graph_mutex){ 
    3d2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d2e:	4607      	mov	r7, r0
    3d30:	4608      	mov	r0, r1
	return z_impl_k_mutex_init(mutex);
    3d32:	f000 fe85 	bl	4a40 <z_impl_k_mutex_init>
    // graph mutex initialization 
    k_mutex_init(graph_mutex); 

    // nodes initialization 
    *graph = k_malloc(MAX_MESH_SIZE * sizeof(struct node_t));
    3d36:	203c      	movs	r0, #60	; 0x3c
    3d38:	f000 ffdc 	bl	4cf4 <k_malloc>
    3d3c:	4606      	mov	r6, r0
    3d3e:	6038      	str	r0, [r7, #0]
    if((*graph) == NULL) return 1;
    3d40:	b910      	cbnz	r0, 3d48 <graph_init+0x1e>
    3d42:	2001      	movs	r0, #1
    (*graph + 3)->visited = false;
    (*graph + 3)->tentative_distance = INF;
    (*graph + 3)->paths_size = 0;

    return 0;
}
    3d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    (*graph)->addr = 0x0;    
    3d48:	f44f 7380 	mov.w	r3, #256	; 0x100
    (*graph)->visited = false;
    3d4c:	2400      	movs	r4, #0
    (*graph)->tentative_distance = INF;
    3d4e:	f04f 08ff 	mov.w	r8, #255	; 0xff
    (*graph)->paths_size = 2;
    3d52:	2502      	movs	r5, #2
    (*graph)->addr = 0x0;    
    3d54:	8003      	strh	r3, [r0, #0]
    (*graph)->visited = false;
    3d56:	7084      	strb	r4, [r0, #2]
    (*graph)->tentative_distance = INF;
    3d58:	f8a0 8004 	strh.w	r8, [r0, #4]
    (*graph)->paths_size = 2;
    3d5c:	7185      	strb	r5, [r0, #6]
    (*graph)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3d5e:	2004      	movs	r0, #4
    3d60:	f000 ffc8 	bl	4cf4 <k_malloc>
    3d64:	60b0      	str	r0, [r6, #8]
    if((*graph)->paths == NULL) return 1;
    3d66:	683e      	ldr	r6, [r7, #0]
    3d68:	68b3      	ldr	r3, [r6, #8]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d0e9      	beq.n	3d42 <graph_init+0x18>
    (*graph)->paths->addr = 0x1;
    3d6e:	f04f 0a01 	mov.w	sl, #1
    ((*graph)->paths + 1)->addr = 0x3;
    3d72:	f04f 0903 	mov.w	r9, #3
    (*graph)->paths->addr = 0x1;
    3d76:	f883 a000 	strb.w	sl, [r3]
    (*graph)->paths->distance = 1;
    3d7a:	f883 a001 	strb.w	sl, [r3, #1]
    ((*graph)->paths + 1)->addr = 0x3;
    3d7e:	f883 9002 	strb.w	r9, [r3, #2]
    ((*graph)->paths + 1)->distance = 2;
    3d82:	70dd      	strb	r5, [r3, #3]
    (*graph + 1)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3d84:	79b0      	ldrb	r0, [r6, #6]
    (*graph + 1)->visited = false;
    3d86:	73b4      	strb	r4, [r6, #14]
    (*graph + 1)->addr = 0x1;    
    3d88:	f240 1301 	movw	r3, #257	; 0x101
    3d8c:	81b3      	strh	r3, [r6, #12]
    (*graph + 1)->tentative_distance = INF;
    3d8e:	f8a6 8010 	strh.w	r8, [r6, #16]
    (*graph + 1)->paths_size = 2;
    3d92:	74b5      	strb	r5, [r6, #18]
    (*graph + 1)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3d94:	fa00 f00a 	lsl.w	r0, r0, sl
    3d98:	f000 ffac 	bl	4cf4 <k_malloc>
    3d9c:	6170      	str	r0, [r6, #20]
    if((*graph + 1)->paths == NULL) return 1;
    3d9e:	683e      	ldr	r6, [r7, #0]
    3da0:	6973      	ldr	r3, [r6, #20]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d0cd      	beq.n	3d42 <graph_init+0x18>
    (*graph + 1)->paths->addr = 0x0;
    3da6:	701c      	strb	r4, [r3, #0]
    (*graph + 1)->paths->distance = 1;
    3da8:	f883 a001 	strb.w	sl, [r3, #1]
    ((*graph + 1)->paths + 1)->addr = 0x2;
    3dac:	709d      	strb	r5, [r3, #2]
    ((*graph + 1)->paths + 1)->distance = 1;
    3dae:	f883 a003 	strb.w	sl, [r3, #3]
    (*graph + 2)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3db2:	79b0      	ldrb	r0, [r6, #6]
    (*graph + 2)->visited = false;
    3db4:	76b4      	strb	r4, [r6, #26]
    (*graph + 2)->addr = 0x2;    
    3db6:	f44f 7381 	mov.w	r3, #258	; 0x102
    3dba:	8333      	strh	r3, [r6, #24]
    (*graph + 2)->tentative_distance = INF;
    3dbc:	f8a6 801c 	strh.w	r8, [r6, #28]
    (*graph + 2)->paths_size = 2;
    3dc0:	77b5      	strb	r5, [r6, #30]
    (*graph + 2)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3dc2:	fa00 f00a 	lsl.w	r0, r0, sl
    3dc6:	f000 ff95 	bl	4cf4 <k_malloc>
    3dca:	6230      	str	r0, [r6, #32]
    if((*graph + 2)->paths == NULL) return 1;
    3dcc:	683e      	ldr	r6, [r7, #0]
    3dce:	6a33      	ldr	r3, [r6, #32]
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d0b6      	beq.n	3d42 <graph_init+0x18>
    (*graph + 2)->paths->addr = 0x1;
    3dd4:	f883 a000 	strb.w	sl, [r3]
    (*graph + 2)->paths->distance = 1;
    3dd8:	f883 a001 	strb.w	sl, [r3, #1]
    ((*graph + 2)->paths + 1)->addr = 0x3;
    3ddc:	f883 9002 	strb.w	r9, [r3, #2]
    ((*graph + 2)->paths + 1)->distance = 2;
    3de0:	70dd      	strb	r5, [r3, #3]
    (*graph + 4)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3de2:	79b0      	ldrb	r0, [r6, #6]
    (*graph + 4)->visited = false;
    3de4:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
    (*graph + 4)->addr = 0x4;    
    3de8:	f44f 7382 	mov.w	r3, #260	; 0x104
    3dec:	8633      	strh	r3, [r6, #48]	; 0x30
    (*graph + 4)->tentative_distance = INF;
    3dee:	f8a6 8034 	strh.w	r8, [r6, #52]	; 0x34
    (*graph + 4)->paths_size = 2;
    3df2:	f886 5036 	strb.w	r5, [r6, #54]	; 0x36
    (*graph + 4)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3df6:	fa00 f00a 	lsl.w	r0, r0, sl
    3dfa:	f000 ff7b 	bl	4cf4 <k_malloc>
    if((*graph + 4)->paths == NULL) return 1;
    3dfe:	683b      	ldr	r3, [r7, #0]
    (*graph + 4)->paths = k_malloc(sizeof(struct path_t) * (*graph)->paths_size);
    3e00:	63b0      	str	r0, [r6, #56]	; 0x38
    if((*graph + 4)->paths == NULL) return 1;
    3e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3e04:	2a00      	cmp	r2, #0
    3e06:	d09c      	beq.n	3d42 <graph_init+0x18>
    (*graph + 4)->paths->addr = 0x2;
    3e08:	7015      	strb	r5, [r2, #0]
    (*graph + 4)->paths->distance = 2;
    3e0a:	7055      	strb	r5, [r2, #1]
    ((*graph + 4)->paths + 1)->addr = 0x0;
    3e0c:	7094      	strb	r4, [r2, #2]
    ((*graph + 4)->paths + 1)->distance = 2;
    3e0e:	70d5      	strb	r5, [r2, #3]
    return 0;
    3e10:	4620      	mov	r0, r4
    (*graph + 3)->addr = 0x3;    
    3e12:	f8a3 9024 	strh.w	r9, [r3, #36]	; 0x24
    (*graph + 3)->visited = false;
    3e16:	f883 4026 	strb.w	r4, [r3, #38]	; 0x26
    (*graph + 3)->tentative_distance = INF;
    3e1a:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
    (*graph + 3)->paths_size = 0;
    3e1e:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
    return 0;
    3e22:	e78f      	b.n	3d44 <graph_init+0x1a>

00003e24 <trace_back>:
        uint8_t * paths_size){
    3e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e28:	4605      	mov	r5, r0
    uint8_t * path = k_malloc(sizeof(uint8_t) * MAX_MESH_SIZE);
    3e2a:	2005      	movs	r0, #5
        uint8_t * paths_size){
    3e2c:	460e      	mov	r6, r1
    3e2e:	4614      	mov	r4, r2
    uint8_t * path = k_malloc(sizeof(uint8_t) * MAX_MESH_SIZE);
    3e30:	f000 ff60 	bl	4cf4 <k_malloc>
    if(!path) return NULL;
    3e34:	b150      	cbz	r0, 3e4c <trace_back+0x28>
    struct node_t current_node = graph[dst_addr];
    3e36:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    3e3e:	f815 2024 	ldrb.w	r2, [r5, r4, lsl #2]
    3e42:	7999      	ldrb	r1, [r3, #6]
    3e44:	689c      	ldr	r4, [r3, #8]
    while(current_node.addr != start_addr){
    3e46:	2700      	movs	r7, #0
    3e48:	42b2      	cmp	r2, r6
    3e4a:	d11f      	bne.n	3e8c <trace_back+0x68>
}
    3e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            struct node_t check_node = graph[current_node.paths[i].addr];
    3e50:	f814 3013 	ldrb.w	r3, [r4, r3, lsl #1]
    3e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e58:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
    3e5c:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    3e60:	f89e 8006 	ldrb.w	r8, [lr, #6]
    3e64:	f8de 9008 	ldr.w	r9, [lr, #8]
            if(check_node.tentative_distance < smallest_td) 
    3e68:	f8be e004 	ldrh.w	lr, [lr, #4]
                current_node = check_node;
    3e6c:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
    3e70:	bf9e      	ittt	ls
    3e72:	464c      	movls	r4, r9
    3e74:	4641      	movls	r1, r8
    3e76:	461a      	movls	r2, r3
        for(uint8_t i = 0; i < current_node.paths_size; i++){
    3e78:	f10c 0c01 	add.w	ip, ip, #1
    3e7c:	fa5f f38c 	uxtb.w	r3, ip
    3e80:	4299      	cmp	r1, r3
    3e82:	d8e5      	bhi.n	3e50 <trace_back+0x2c>
        path[iterator] = current_node.addr;
    3e84:	b2fb      	uxtb	r3, r7
    3e86:	3701      	adds	r7, #1
    3e88:	54c2      	strb	r2, [r0, r3]
        iterator++;
    3e8a:	e7dd      	b.n	3e48 <trace_back+0x24>
    3e8c:	f04f 0c00 	mov.w	ip, #0
    3e90:	e7f4      	b.n	3e7c <trace_back+0x58>

00003e92 <free_slist>:
void free_slist(sys_slist_t * lst){
    3e92:	b538      	push	{r3, r4, r5, lr}
	return list->head;
    3e94:	6804      	ldr	r4, [r0, #0]
    3e96:	4605      	mov	r5, r0
    SYS_SLIST_FOR_EACH_CONTAINER(lst, iterator, next_container_node_ptr){
    3e98:	b12c      	cbz	r4, 3ea6 <free_slist+0x14>
        remove_unvisited_slist_member(lst, iterator);   
    3e9a:	4621      	mov	r1, r4
    3e9c:	4628      	mov	r0, r5
    3e9e:	f7fc faf9 	bl	494 <remove_unvisited_slist_member>
	return node->next;
    3ea2:	6824      	ldr	r4, [r4, #0]
    3ea4:	e7f8      	b.n	3e98 <free_slist+0x6>
}
    3ea6:	bd38      	pop	{r3, r4, r5, pc}

00003ea8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3ea8:	4603      	mov	r3, r0
    3eaa:	b158      	cbz	r0, 3ec4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3eac:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3eae:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3eb2:	2a01      	cmp	r2, #1
    3eb4:	d003      	beq.n	3ebe <sys_notify_validate+0x16>
    3eb6:	2a03      	cmp	r2, #3
    3eb8:	d104      	bne.n	3ec4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3eba:	6802      	ldr	r2, [r0, #0]
    3ebc:	b112      	cbz	r2, 3ec4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3ebe:	2000      	movs	r0, #0
    3ec0:	6098      	str	r0, [r3, #8]
    3ec2:	4770      	bx	lr
		return -EINVAL;
    3ec4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3ec8:	4770      	bx	lr

00003eca <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3eca:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3ecc:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    3ece:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    3ed2:	2a03      	cmp	r2, #3
    3ed4:	f04f 0200 	mov.w	r2, #0
{
    3ed8:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3eda:	bf0c      	ite	eq
    3edc:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    3ede:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3ee0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3ee2:	4770      	bx	lr

00003ee4 <arch_printk_char_out>:
}
    3ee4:	2000      	movs	r0, #0
    3ee6:	4770      	bx	lr

00003ee8 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    3ee8:	b40f      	push	{r0, r1, r2, r3}
    3eea:	b507      	push	{r0, r1, r2, lr}
    3eec:	a904      	add	r1, sp, #16
    3eee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3ef2:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    3ef4:	f7fc fb88 	bl	608 <vprintk>
	}
	va_end(ap);
}
    3ef8:	b003      	add	sp, #12
    3efa:	f85d eb04 	ldr.w	lr, [sp], #4
    3efe:	b004      	add	sp, #16
    3f00:	4770      	bx	lr

00003f02 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3f02:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3f04:	f013 0307 	ands.w	r3, r3, #7
    3f08:	d105      	bne.n	3f16 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3f0a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	bf0c      	ite	eq
    3f10:	2000      	moveq	r0, #0
    3f12:	2003      	movne	r0, #3
    3f14:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3f16:	2b02      	cmp	r3, #2
    3f18:	d105      	bne.n	3f26 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3f1a:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	bf14      	ite	ne
    3f20:	2000      	movne	r0, #0
    3f22:	2004      	moveq	r0, #4
    3f24:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3f26:	2b01      	cmp	r3, #1
    3f28:	d105      	bne.n	3f36 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3f2a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	bf0c      	ite	eq
    3f30:	2000      	moveq	r0, #0
    3f32:	2005      	movne	r0, #5
    3f34:	4770      	bx	lr
	int evt = EVT_NOP;
    3f36:	2000      	movs	r0, #0
}
    3f38:	4770      	bx	lr

00003f3a <notify_one>:
{
    3f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f3e:	460d      	mov	r5, r1
    3f40:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3f42:	4619      	mov	r1, r3
    3f44:	1d28      	adds	r0, r5, #4
{
    3f46:	4690      	mov	r8, r2
    3f48:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3f4a:	f7ff ffbe 	bl	3eca <sys_notify_finalize>
	if (cb) {
    3f4e:	4604      	mov	r4, r0
    3f50:	b138      	cbz	r0, 3f62 <notify_one+0x28>
		cb(mgr, cli, state, res);
    3f52:	4633      	mov	r3, r6
    3f54:	4642      	mov	r2, r8
    3f56:	4629      	mov	r1, r5
    3f58:	4638      	mov	r0, r7
    3f5a:	46a4      	mov	ip, r4
}
    3f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    3f60:	4760      	bx	ip
}
    3f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003f66 <transition_complete>:
{
    3f66:	b410      	push	{r4}
	__asm__ volatile(
    3f68:	f04f 0420 	mov.w	r4, #32
    3f6c:	f3ef 8211 	mrs	r2, BASEPRI
    3f70:	f384 8812 	msr	BASEPRI_MAX, r4
    3f74:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3f78:	6141      	str	r1, [r0, #20]
}
    3f7a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3f7c:	2101      	movs	r1, #1
    3f7e:	f7fc bb51 	b.w	624 <process_event>

00003f82 <validate_args>:
{
    3f82:	b510      	push	{r4, lr}
    3f84:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3f86:	b140      	cbz	r0, 3f9a <validate_args+0x18>
    3f88:	b139      	cbz	r1, 3f9a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    3f8a:	1d08      	adds	r0, r1, #4
    3f8c:	f7ff ff8c 	bl	3ea8 <sys_notify_validate>
	if ((rv == 0)
    3f90:	b928      	cbnz	r0, 3f9e <validate_args+0x1c>
	    && ((cli->notify.flags
    3f92:	68a3      	ldr	r3, [r4, #8]
    3f94:	f033 0303 	bics.w	r3, r3, #3
    3f98:	d001      	beq.n	3f9e <validate_args+0x1c>
		rv = -EINVAL;
    3f9a:	f06f 0015 	mvn.w	r0, #21
}
    3f9e:	bd10      	pop	{r4, pc}

00003fa0 <onoff_manager_init>:
{
    3fa0:	b538      	push	{r3, r4, r5, lr}
    3fa2:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3fa4:	4605      	mov	r5, r0
    3fa6:	b158      	cbz	r0, 3fc0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3fa8:	b151      	cbz	r1, 3fc0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3faa:	680b      	ldr	r3, [r1, #0]
    3fac:	b143      	cbz	r3, 3fc0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3fae:	684b      	ldr	r3, [r1, #4]
    3fb0:	b133      	cbz	r3, 3fc0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3fb2:	221c      	movs	r2, #28
    3fb4:	2100      	movs	r1, #0
    3fb6:	f000 fab7 	bl	4528 <memset>
    3fba:	612c      	str	r4, [r5, #16]
	return 0;
    3fbc:	2000      	movs	r0, #0
}
    3fbe:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3fc0:	f06f 0015 	mvn.w	r0, #21
    3fc4:	e7fb      	b.n	3fbe <onoff_manager_init+0x1e>

00003fc6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3fc6:	b570      	push	{r4, r5, r6, lr}
    3fc8:	4604      	mov	r4, r0
    3fca:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3fcc:	f7ff ffd9 	bl	3f82 <validate_args>

	if (rv < 0) {
    3fd0:	1e05      	subs	r5, r0, #0
    3fd2:	db31      	blt.n	4038 <onoff_request+0x72>
    3fd4:	f04f 0320 	mov.w	r3, #32
    3fd8:	f3ef 8111 	mrs	r1, BASEPRI
    3fdc:	f383 8812 	msr	BASEPRI_MAX, r3
    3fe0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3fe4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3fe6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3fe8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3fec:	42ab      	cmp	r3, r5
    3fee:	f000 0207 	and.w	r2, r0, #7
    3ff2:	d02e      	beq.n	4052 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3ff4:	2a02      	cmp	r2, #2
    3ff6:	d10e      	bne.n	4016 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3ff8:	3301      	adds	r3, #1
    3ffa:	8363      	strh	r3, [r4, #26]
	rv = state;
    3ffc:	4615      	mov	r5, r2
		notify = true;
    3ffe:	2301      	movs	r3, #1
	__asm__ volatile(
    4000:	f381 8811 	msr	BASEPRI, r1
    4004:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4008:	b1b3      	cbz	r3, 4038 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    400a:	2300      	movs	r3, #0
    400c:	4631      	mov	r1, r6
    400e:	4620      	mov	r0, r4
    4010:	f7ff ff93 	bl	3f3a <notify_one>
    4014:	e010      	b.n	4038 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    4016:	0783      	lsls	r3, r0, #30
    4018:	d001      	beq.n	401e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    401a:	2a06      	cmp	r2, #6
    401c:	d10e      	bne.n	403c <onoff_request+0x76>
	parent->next = child;
    401e:	2300      	movs	r3, #0
    4020:	6033      	str	r3, [r6, #0]
	return list->tail;
    4022:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    4024:	b993      	cbnz	r3, 404c <onoff_request+0x86>
	list->head = node;
    4026:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    402a:	4615      	mov	r5, r2
    402c:	b962      	cbnz	r2, 4048 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    402e:	460a      	mov	r2, r1
    4030:	4620      	mov	r0, r4
    4032:	2102      	movs	r1, #2
    4034:	f7fc faf6 	bl	624 <process_event>
		}
	}

	return rv;
}
    4038:	4628      	mov	r0, r5
    403a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    403c:	2a05      	cmp	r2, #5
    403e:	bf0c      	ite	eq
    4040:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    4044:	f06f 0504 	mvnne.w	r5, #4
    4048:	2300      	movs	r3, #0
    404a:	e7d9      	b.n	4000 <onoff_request+0x3a>
	parent->next = child;
    404c:	601e      	str	r6, [r3, #0]
	list->tail = node;
    404e:	6066      	str	r6, [r4, #4]
}
    4050:	e7eb      	b.n	402a <onoff_request+0x64>
		rv = -EAGAIN;
    4052:	f06f 050a 	mvn.w	r5, #10
    4056:	e7f7      	b.n	4048 <onoff_request+0x82>

00004058 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4058:	4604      	mov	r4, r0
    405a:	b508      	push	{r3, lr}
    405c:	4608      	mov	r0, r1
    405e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4060:	461a      	mov	r2, r3
    4062:	47a0      	blx	r4
	return z_impl_z_current_get();
    4064:	f7ff fc8e 	bl	3984 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4068:	f7fd faf0 	bl	164c <z_impl_k_thread_abort>

0000406c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    406c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    4070:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    4072:	0840      	lsrs	r0, r0, #1
    4074:	4770      	bx	lr

00004076 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    4076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4078:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    407a:	f7ff fff7 	bl	406c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    407e:	fab0 f080 	clz	r0, r0
    4082:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    4086:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    408a:	00ca      	lsls	r2, r1, #3
    408c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    4090:	1d17      	adds	r7, r2, #4
{
    4092:	460c      	mov	r4, r1
    4094:	3206      	adds	r2, #6
    4096:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    4098:	b956      	cbnz	r6, 40b0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    409a:	2101      	movs	r1, #1
    409c:	fa01 f000 	lsl.w	r0, r1, r0
    40a0:	68d9      	ldr	r1, [r3, #12]
    40a2:	4301      	orrs	r1, r0
    40a4:	60d9      	str	r1, [r3, #12]
		b->next = c;
    40a6:	f8cc 4010 	str.w	r4, [ip, #16]
    40aa:	53dd      	strh	r5, [r3, r7]
    40ac:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    40ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    40b0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    40b2:	3104      	adds	r1, #4
    40b4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    40b6:	53d8      	strh	r0, [r3, r7]
    40b8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    40bc:	529e      	strh	r6, [r3, r2]
    40be:	80c5      	strh	r5, [r0, #6]
    40c0:	525d      	strh	r5, [r3, r1]
    40c2:	e7f4      	b.n	40ae <free_list_add+0x38>

000040c4 <free_list_remove_bidx>:
{
    40c4:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    40c6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    40ca:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    40cc:	4299      	cmp	r1, r3
    40ce:	f102 0104 	add.w	r1, r2, #4
    40d2:	d10a      	bne.n	40ea <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    40d4:	2301      	movs	r3, #1
    40d6:	fa03 f202 	lsl.w	r2, r3, r2
    40da:	68c3      	ldr	r3, [r0, #12]
    40dc:	ea23 0302 	bic.w	r3, r3, r2
    40e0:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    40e2:	2300      	movs	r3, #0
    40e4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    40e8:	bd10      	pop	{r4, pc}
    40ea:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    40ec:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    40f0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    40f4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    40f8:	80cb      	strh	r3, [r1, #6]
    40fa:	8082      	strh	r2, [r0, #4]
}
    40fc:	e7f4      	b.n	40e8 <free_list_remove_bidx+0x24>

000040fe <free_list_remove>:
{
    40fe:	b508      	push	{r3, lr}
    4100:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    4102:	f7ff ffb3 	bl	406c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    4106:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    410a:	f1c2 021f 	rsb	r2, r2, #31
    410e:	4618      	mov	r0, r3
}
    4110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    4114:	f7ff bfd6 	b.w	40c4 <free_list_remove_bidx>

00004118 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    4118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    411c:	fab1 f581 	clz	r5, r1
    4120:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    4124:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    4128:	4603      	mov	r3, r0
	if (b->next) {
    412a:	693a      	ldr	r2, [r7, #16]
{
    412c:	460e      	mov	r6, r1
	if (b->next) {
    412e:	b1c2      	cbz	r2, 4162 <alloc_chunk+0x4a>
    4130:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    4134:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    4136:	4618      	mov	r0, r3
    4138:	4621      	mov	r1, r4
    413a:	f7ff ff97 	bl	406c <chunk_size>
    413e:	42b0      	cmp	r0, r6
    4140:	d306      	bcc.n	4150 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    4142:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    4144:	4618      	mov	r0, r3
    4146:	f7ff ffbd 	bl	40c4 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    414a:	4620      	mov	r0, r4
    414c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    4150:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    4154:	f1b8 0801 	subs.w	r8, r8, #1
    4158:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    415a:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    415c:	d001      	beq.n	4162 <alloc_chunk+0x4a>
    415e:	4282      	cmp	r2, r0
    4160:	d1e8      	bne.n	4134 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    4162:	f1c5 0220 	rsb	r2, r5, #32
    4166:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    416a:	4094      	lsls	r4, r2
    416c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    416e:	4014      	ands	r4, r2
    4170:	d0eb      	beq.n	414a <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    4172:	fa94 f2a4 	rbit	r2, r4
    4176:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    417a:	1d11      	adds	r1, r2, #4
    417c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    4180:	4621      	mov	r1, r4
    4182:	e7df      	b.n	4144 <alloc_chunk+0x2c>

00004184 <merge_chunks>:
{
    4184:	b538      	push	{r3, r4, r5, lr}
    4186:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    4188:	f7ff ff70 	bl	406c <chunk_size>
{
    418c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    418e:	4604      	mov	r4, r0
    4190:	4611      	mov	r1, r2
    4192:	4618      	mov	r0, r3
    4194:	f7ff ff6a 	bl	406c <chunk_size>
		((uint16_t *)cmem)[f] = val;
    4198:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    419c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    419e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    41a0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    41a2:	4618      	mov	r0, r3
    41a4:	f7ff ff62 	bl	406c <chunk_size>
	void *cmem = &buf[c];
    41a8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    41aa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    41ae:	bd38      	pop	{r3, r4, r5, pc}

000041b0 <split_chunks>:
{
    41b0:	b538      	push	{r3, r4, r5, lr}
    41b2:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    41b4:	f7ff ff5a 	bl	406c <chunk_size>
{
    41b8:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    41ba:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    41bc:	1a51      	subs	r1, r2, r1
    41be:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    41c2:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    41c4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    41c6:	8060      	strh	r0, [r4, #2]
    41c8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    41cc:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    41ce:	8044      	strh	r4, [r0, #2]
    41d0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    41d4:	4618      	mov	r0, r3
    41d6:	4611      	mov	r1, r2
    41d8:	f7ff ff48 	bl	406c <chunk_size>
	void *cmem = &buf[c];
    41dc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    41de:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    41e2:	bd38      	pop	{r3, r4, r5, pc}

000041e4 <free_chunk>:
{
    41e4:	b538      	push	{r3, r4, r5, lr}
    41e6:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    41e8:	f7ff ff40 	bl	406c <chunk_size>
    41ec:	460c      	mov	r4, r1
    41ee:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    41f0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    41f4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    41f6:	07da      	lsls	r2, r3, #31
    41f8:	d40a      	bmi.n	4210 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    41fa:	4628      	mov	r0, r5
    41fc:	f7ff ff7f 	bl	40fe <free_list_remove>
	return c + chunk_size(h, c);
    4200:	4621      	mov	r1, r4
    4202:	4628      	mov	r0, r5
    4204:	f7ff ff32 	bl	406c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    4208:	1822      	adds	r2, r4, r0
    420a:	4628      	mov	r0, r5
    420c:	f7ff ffba 	bl	4184 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    4210:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    4214:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    4216:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    421a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    421c:	07db      	lsls	r3, r3, #31
    421e:	d40c      	bmi.n	423a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    4220:	4628      	mov	r0, r5
    4222:	f7ff ff6c 	bl	40fe <free_list_remove>
		return ((uint16_t *)cmem)[f];
    4226:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    422a:	4622      	mov	r2, r4
    422c:	1a61      	subs	r1, r4, r1
    422e:	4628      	mov	r0, r5
    4230:	f7ff ffa8 	bl	4184 <merge_chunks>
    4234:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    4238:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    423a:	4621      	mov	r1, r4
    423c:	4628      	mov	r0, r5
}
    423e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    4242:	f7ff bf18 	b.w	4076 <free_list_add>

00004246 <sys_heap_free>:
	if (mem == NULL) {
    4246:	b161      	cbz	r1, 4262 <sys_heap_free+0x1c>
    4248:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    424a:	3904      	subs	r1, #4
    424c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    424e:	f021 0307 	bic.w	r3, r1, #7
    4252:	4403      	add	r3, r0
	free_chunk(h, c);
    4254:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4256:	885a      	ldrh	r2, [r3, #2]
    4258:	f022 0201 	bic.w	r2, r2, #1
    425c:	805a      	strh	r2, [r3, #2]
    425e:	f7ff bfc1 	b.w	41e4 <free_chunk>
}
    4262:	4770      	bx	lr

00004264 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    4264:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    4266:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    4268:	b909      	cbnz	r1, 426e <sys_heap_alloc+0xa>
		return NULL;
    426a:	2000      	movs	r0, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
}
    426c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    426e:	68ab      	ldr	r3, [r5, #8]
    4270:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    4274:	d9f9      	bls.n	426a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4276:	310b      	adds	r1, #11
    4278:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    427a:	4621      	mov	r1, r4
    427c:	4628      	mov	r0, r5
    427e:	f7ff ff4b 	bl	4118 <alloc_chunk>
	if (c == 0U) {
    4282:	4606      	mov	r6, r0
    4284:	2800      	cmp	r0, #0
    4286:	d0f0      	beq.n	426a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    4288:	4601      	mov	r1, r0
    428a:	4628      	mov	r0, r5
    428c:	f7ff feee 	bl	406c <chunk_size>
    4290:	42a0      	cmp	r0, r4
    4292:	d907      	bls.n	42a4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    4294:	1932      	adds	r2, r6, r4
    4296:	4628      	mov	r0, r5
    4298:	f7ff ff8a 	bl	41b0 <split_chunks>
		free_list_add(h, c + chunk_sz);
    429c:	4611      	mov	r1, r2
    429e:	4628      	mov	r0, r5
    42a0:	f7ff fee9 	bl	4076 <free_list_add>
	void *cmem = &buf[c];
    42a4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    42a8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    42aa:	8853      	ldrh	r3, [r2, #2]
    42ac:	f043 0301 	orr.w	r3, r3, #1
    42b0:	8053      	strh	r3, [r2, #2]
    42b2:	3004      	adds	r0, #4
	return chunk_mem(h, c);
    42b4:	e7da      	b.n	426c <sys_heap_alloc+0x8>

000042b6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    42b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42ba:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    42bc:	424a      	negs	r2, r1
    42be:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    42c2:	ea31 0202 	bics.w	r2, r1, r2
{
    42c6:	4603      	mov	r3, r0
	if (align != rew) {
    42c8:	d00a      	beq.n	42e0 <sys_heap_aligned_alloc+0x2a>
		return false;
    42ca:	2f04      	cmp	r7, #4
    42cc:	463a      	mov	r2, r7
    42ce:	46b9      	mov	r9, r7
    42d0:	bf28      	it	cs
    42d2:	2204      	movcs	r2, #4
		align -= rew;
    42d4:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    42d6:	b974      	cbnz	r4, 42f6 <sys_heap_aligned_alloc+0x40>
		return NULL;
    42d8:	2500      	movs	r5, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    42da:	4628      	mov	r0, r5
    42dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    42e0:	2904      	cmp	r1, #4
    42e2:	d804      	bhi.n	42ee <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    42e4:	4621      	mov	r1, r4
}
    42e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    42ea:	f7ff bfbb 	b.w	4264 <sys_heap_alloc>
		rew = 0;
    42ee:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    42f2:	2204      	movs	r2, #4
    42f4:	e7ef      	b.n	42d6 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    42f6:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    42f8:	68b3      	ldr	r3, [r6, #8]
    42fa:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    42fe:	d9eb      	bls.n	42d8 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4300:	f104 010b 	add.w	r1, r4, #11
    4304:	4439      	add	r1, r7
    4306:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    4308:	08c9      	lsrs	r1, r1, #3
    430a:	4630      	mov	r0, r6
    430c:	f7ff ff04 	bl	4118 <alloc_chunk>
	if (c0 == 0) {
    4310:	4680      	mov	r8, r0
    4312:	2800      	cmp	r0, #0
    4314:	d0e0      	beq.n	42d8 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    4316:	f109 0504 	add.w	r5, r9, #4
    431a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    431e:	1e7b      	subs	r3, r7, #1
    4320:	4435      	add	r5, r6
    4322:	441d      	add	r5, r3
    4324:	427f      	negs	r7, r7
    4326:	403d      	ands	r5, r7
    4328:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    432c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    432e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4330:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    4332:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    4334:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    4338:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    433a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    433e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    4342:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    4346:	d208      	bcs.n	435a <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    4348:	4601      	mov	r1, r0
    434a:	463a      	mov	r2, r7
    434c:	4630      	mov	r0, r6
    434e:	f7ff ff2f 	bl	41b0 <split_chunks>
		free_list_add(h, c0);
    4352:	4641      	mov	r1, r8
    4354:	4630      	mov	r0, r6
    4356:	f7ff fe8e 	bl	4076 <free_list_add>
	return c + chunk_size(h, c);
    435a:	4639      	mov	r1, r7
    435c:	4630      	mov	r0, r6
    435e:	f7ff fe85 	bl	406c <chunk_size>
    4362:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    4364:	4284      	cmp	r4, r0
    4366:	d207      	bcs.n	4378 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    4368:	4630      	mov	r0, r6
    436a:	4622      	mov	r2, r4
    436c:	f7ff ff20 	bl	41b0 <split_chunks>
		free_list_add(h, c_end);
    4370:	4621      	mov	r1, r4
    4372:	4630      	mov	r0, r6
    4374:	f7ff fe7f 	bl	4076 <free_list_add>
	void *cmem = &buf[c];
    4378:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    437c:	8873      	ldrh	r3, [r6, #2]
    437e:	f043 0301 	orr.w	r3, r3, #1
    4382:	8073      	strh	r3, [r6, #2]
    4384:	e7a9      	b.n	42da <sys_heap_aligned_alloc+0x24>

00004386 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    4386:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4388:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    438a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    438c:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4390:	f021 0107 	bic.w	r1, r1, #7
{
    4394:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    4396:	1acd      	subs	r5, r1, r3
    4398:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    439a:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    439c:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    43a0:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    43a4:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    43a6:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    43a8:	2600      	movs	r6, #0
    43aa:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    43ac:	f1c0 0020 	rsb	r0, r0, #32
    43b0:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    43b4:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    43b6:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    43b8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    43bc:	4284      	cmp	r4, r0
    43be:	d118      	bne.n	43f2 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    43c0:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    43c2:	f040 0001 	orr.w	r0, r0, #1
    43c6:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    43c8:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    43cc:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    43ce:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    43d0:	801e      	strh	r6, [r3, #0]
    43d2:	8067      	strh	r7, [r4, #2]
    43d4:	195c      	adds	r4, r3, r5
    43d6:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    43da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    43de:	8066      	strh	r6, [r4, #2]
    43e0:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    43e2:	8850      	ldrh	r0, [r2, #2]
    43e4:	f040 0001 	orr.w	r0, r0, #1
    43e8:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    43ea:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    43ec:	4618      	mov	r0, r3
    43ee:	f7ff be42 	b.w	4076 <free_list_add>
		h->buckets[i].next = 0;
    43f2:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    43f6:	e7e1      	b.n	43bc <sys_heap_init+0x36>

000043f8 <encode_uint>:
{
    43f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43fc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    43fe:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4400:	2b6f      	cmp	r3, #111	; 0x6f
{
    4402:	4680      	mov	r8, r0
    4404:	460f      	mov	r7, r1
    4406:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4408:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    440c:	d029      	beq.n	4462 <encode_uint+0x6a>
    440e:	d824      	bhi.n	445a <encode_uint+0x62>
		return 16;
    4410:	2b58      	cmp	r3, #88	; 0x58
    4412:	bf14      	ite	ne
    4414:	260a      	movne	r6, #10
    4416:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    4418:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    441c:	4632      	mov	r2, r6
    441e:	2300      	movs	r3, #0
    4420:	4640      	mov	r0, r8
    4422:	4639      	mov	r1, r7
    4424:	f7fb fe6c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4428:	2a09      	cmp	r2, #9
    442a:	b2d4      	uxtb	r4, r2
    442c:	d81e      	bhi.n	446c <encode_uint+0x74>
    442e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4430:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4432:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4434:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4438:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    443c:	d301      	bcc.n	4442 <encode_uint+0x4a>
    443e:	45d1      	cmp	r9, sl
    4440:	d811      	bhi.n	4466 <encode_uint+0x6e>
	if (conv->flag_hash) {
    4442:	782b      	ldrb	r3, [r5, #0]
    4444:	069b      	lsls	r3, r3, #26
    4446:	d505      	bpl.n	4454 <encode_uint+0x5c>
		if (radix == 8) {
    4448:	2e08      	cmp	r6, #8
    444a:	d115      	bne.n	4478 <encode_uint+0x80>
			conv->altform_0 = true;
    444c:	78ab      	ldrb	r3, [r5, #2]
    444e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4452:	70ab      	strb	r3, [r5, #2]
}
    4454:	4648      	mov	r0, r9
    4456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    445a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    445e:	2b70      	cmp	r3, #112	; 0x70
    4460:	e7d7      	b.n	4412 <encode_uint+0x1a>
	switch (specifier) {
    4462:	2608      	movs	r6, #8
    4464:	e7d8      	b.n	4418 <encode_uint+0x20>
		value /= radix;
    4466:	4680      	mov	r8, r0
    4468:	460f      	mov	r7, r1
    446a:	e7d7      	b.n	441c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    446c:	f1bb 0f19 	cmp.w	fp, #25
    4470:	bf94      	ite	ls
    4472:	3437      	addls	r4, #55	; 0x37
    4474:	3457      	addhi	r4, #87	; 0x57
    4476:	e7db      	b.n	4430 <encode_uint+0x38>
		} else if (radix == 16) {
    4478:	2e10      	cmp	r6, #16
    447a:	d1eb      	bne.n	4454 <encode_uint+0x5c>
			conv->altform_0c = true;
    447c:	78ab      	ldrb	r3, [r5, #2]
    447e:	f043 0310 	orr.w	r3, r3, #16
    4482:	e7e6      	b.n	4452 <encode_uint+0x5a>

00004484 <outs>:
{
    4484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4488:	4607      	mov	r7, r0
    448a:	4688      	mov	r8, r1
    448c:	4615      	mov	r5, r2
    448e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4490:	4614      	mov	r4, r2
    4492:	42b4      	cmp	r4, r6
    4494:	eba4 0005 	sub.w	r0, r4, r5
    4498:	d302      	bcc.n	44a0 <outs+0x1c>
    449a:	b93e      	cbnz	r6, 44ac <outs+0x28>
    449c:	7823      	ldrb	r3, [r4, #0]
    449e:	b12b      	cbz	r3, 44ac <outs+0x28>
		int rc = out((int)*sp++, ctx);
    44a0:	f814 0b01 	ldrb.w	r0, [r4], #1
    44a4:	4641      	mov	r1, r8
    44a6:	47b8      	blx	r7
		if (rc < 0) {
    44a8:	2800      	cmp	r0, #0
    44aa:	daf2      	bge.n	4492 <outs+0xe>
}
    44ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000044b0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    44b0:	4770      	bx	lr

000044b2 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    44b2:	2200      	movs	r2, #0
    44b4:	e9c0 2200 	strd	r2, r2, [r0]
    44b8:	6082      	str	r2, [r0, #8]
}
    44ba:	4770      	bx	lr

000044bc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    44bc:	f000 ba90 	b.w	49e0 <z_fatal_error>

000044c0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    44c0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    44c2:	6800      	ldr	r0, [r0, #0]
    44c4:	f000 ba8c 	b.w	49e0 <z_fatal_error>

000044c8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    44c8:	2100      	movs	r1, #0
    44ca:	2001      	movs	r0, #1
    44cc:	f7ff bff6 	b.w	44bc <z_arm_fatal_error>

000044d0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    44d0:	b508      	push	{r3, lr}
	handler();
    44d2:	f7fc feab 	bl	122c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    44d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    44da:	f7fc bf8b 	b.w	13f4 <z_arm_exc_exit>

000044de <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    44de:	3901      	subs	r1, #1
    44e0:	4603      	mov	r3, r0
    44e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    44e6:	b90a      	cbnz	r2, 44ec <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    44e8:	701a      	strb	r2, [r3, #0]

	return dest;
}
    44ea:	4770      	bx	lr
		*d = *s;
    44ec:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    44f0:	e7f7      	b.n	44e2 <strcpy+0x4>

000044f2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    44f2:	4603      	mov	r3, r0
	size_t n = 0;
    44f4:	2000      	movs	r0, #0

	while (*s != '\0') {
    44f6:	5c1a      	ldrb	r2, [r3, r0]
    44f8:	b902      	cbnz	r2, 44fc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    44fa:	4770      	bx	lr
		n++;
    44fc:	3001      	adds	r0, #1
    44fe:	e7fa      	b.n	44f6 <strlen+0x4>

00004500 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4500:	4603      	mov	r3, r0
	size_t n = 0;
    4502:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4504:	5c1a      	ldrb	r2, [r3, r0]
    4506:	b10a      	cbz	r2, 450c <strnlen+0xc>
    4508:	4288      	cmp	r0, r1
    450a:	d100      	bne.n	450e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    450c:	4770      	bx	lr
		n++;
    450e:	3001      	adds	r0, #1
    4510:	e7f8      	b.n	4504 <strnlen+0x4>

00004512 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4512:	b510      	push	{r4, lr}
    4514:	1e43      	subs	r3, r0, #1
    4516:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4518:	4291      	cmp	r1, r2
    451a:	d100      	bne.n	451e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    451c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    451e:	f811 4b01 	ldrb.w	r4, [r1], #1
    4522:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4526:	e7f7      	b.n	4518 <memcpy+0x6>

00004528 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4528:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    452a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    452c:	4603      	mov	r3, r0
	while (n > 0) {
    452e:	4293      	cmp	r3, r2
    4530:	d100      	bne.n	4534 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4532:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4534:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4538:	e7f9      	b.n	452e <memset+0x6>

0000453a <_stdout_hook_default>:
}
    453a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    453e:	4770      	bx	lr

00004540 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    4540:	b084      	sub	sp, #16
    4542:	ab04      	add	r3, sp, #16
    4544:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    4548:	f89d 3004 	ldrb.w	r3, [sp, #4]
    454c:	2b06      	cmp	r3, #6
    454e:	d108      	bne.n	4562 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4554:	2201      	movs	r2, #1
    4556:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    455a:	f3bf 8f4f 	dsb	sy
        __WFE();
    455e:	bf20      	wfe
    while (true)
    4560:	e7fd      	b.n	455e <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    4562:	b004      	add	sp, #16
    4564:	4770      	bx	lr

00004566 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    4566:	b084      	sub	sp, #16
    4568:	ab04      	add	r3, sp, #16
    456a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    456e:	2300      	movs	r3, #0
    4570:	f383 8811 	msr	BASEPRI, r3
    4574:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4578:	b004      	add	sp, #16
    457a:	4770      	bx	lr

0000457c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    457c:	6903      	ldr	r3, [r0, #16]
    457e:	b2c9      	uxtb	r1, r1
    4580:	220c      	movs	r2, #12
    4582:	fb01 3302 	mla	r3, r1, r2, r3
    4586:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    4588:	f000 0007 	and.w	r0, r0, #7
    458c:	4770      	bx	lr

0000458e <set_on_state>:
	__asm__ volatile(
    458e:	f04f 0320 	mov.w	r3, #32
    4592:	f3ef 8211 	mrs	r2, BASEPRI
    4596:	f383 8812 	msr	BASEPRI_MAX, r3
    459a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    459e:	6803      	ldr	r3, [r0, #0]
    45a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    45a4:	f043 0302 	orr.w	r3, r3, #2
    45a8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    45aa:	f382 8811 	msr	BASEPRI, r2
    45ae:	f3bf 8f6f 	isb	sy
}
    45b2:	4770      	bx	lr

000045b4 <stop>:
{
    45b4:	4603      	mov	r3, r0
    45b6:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    45b8:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    45ba:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    45bc:	f04f 0420 	mov.w	r4, #32
    45c0:	f3ef 8611 	mrs	r6, BASEPRI
    45c4:	f384 8812 	msr	BASEPRI_MAX, r4
    45c8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    45cc:	250c      	movs	r5, #12
    45ce:	fb05 0401 	mla	r4, r5, r1, r0
    45d2:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    45d4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    45d8:	d001      	beq.n	45de <stop+0x2a>
    45da:	42a2      	cmp	r2, r4
    45dc:	d110      	bne.n	4600 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    45de:	fb05 0001 	mla	r0, r5, r1, r0
    45e2:	2201      	movs	r2, #1
    45e4:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    45e6:	2000      	movs	r0, #0
	__asm__ volatile(
    45e8:	f386 8811 	msr	BASEPRI, r6
    45ec:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    45f0:	b928      	cbnz	r0, 45fe <stop+0x4a>
	get_sub_config(dev, type)->stop();
    45f2:	685b      	ldr	r3, [r3, #4]
    45f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    45f8:	684b      	ldr	r3, [r1, #4]
    45fa:	4798      	blx	r3
	return 0;
    45fc:	2000      	movs	r0, #0
}
    45fe:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    4600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4604:	e7f0      	b.n	45e8 <stop+0x34>

00004606 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4606:	2280      	movs	r2, #128	; 0x80
    4608:	f7ff bfd4 	b.w	45b4 <stop>

0000460c <async_start>:
{
    460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    460e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4610:	6904      	ldr	r4, [r0, #16]
{
    4612:	4605      	mov	r5, r0
    4614:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4616:	f04f 0020 	mov.w	r0, #32
    461a:	f3ef 8c11 	mrs	ip, BASEPRI
    461e:	f380 8812 	msr	BASEPRI_MAX, r0
    4622:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4626:	260c      	movs	r6, #12
    4628:	fb06 4601 	mla	r6, r6, r1, r4
    462c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    462e:	f000 0e07 	and.w	lr, r0, #7
    4632:	f1be 0f01 	cmp.w	lr, #1
    4636:	d111      	bne.n	465c <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4638:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    463a:	2600      	movs	r6, #0
	__asm__ volatile(
    463c:	f38c 8811 	msr	BASEPRI, ip
    4640:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4644:	b946      	cbnz	r6, 4658 <async_start+0x4c>
	subdata->cb = cb;
    4646:	200c      	movs	r0, #12
    4648:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    464c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4650:	686b      	ldr	r3, [r5, #4]
    4652:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4656:	4798      	blx	r3
}
    4658:	4630      	mov	r0, r6
    465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    465c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    4660:	4287      	cmp	r7, r0
    4662:	bf14      	ite	ne
    4664:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    4668:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    466c:	e7e6      	b.n	463c <async_start+0x30>

0000466e <api_start>:
{
    466e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4670:	2480      	movs	r4, #128	; 0x80
    4672:	9400      	str	r4, [sp, #0]
    4674:	f7ff ffca 	bl	460c <async_start>
}
    4678:	b002      	add	sp, #8
    467a:	bd10      	pop	{r4, pc}

0000467c <onoff_started_callback>:
	return &data->mgr[type];
    467c:	6900      	ldr	r0, [r0, #16]
{
    467e:	b410      	push	{r4}
	return &data->mgr[type];
    4680:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4682:	241c      	movs	r4, #28
    4684:	fb03 0004 	mla	r0, r3, r4, r0
    4688:	2100      	movs	r1, #0
}
    468a:	bc10      	pop	{r4}
	notify(mgr, 0);
    468c:	4710      	bx	r2

0000468e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    468e:	2000      	movs	r0, #0
    4690:	f000 b906 	b.w	48a0 <nrfx_clock_start>

00004694 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4694:	2000      	movs	r0, #0
    4696:	f7fd bff1 	b.w	267c <nrfx_clock_stop>

0000469a <blocking_start_callback>:
{
    469a:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    469c:	f7fe be3a 	b.w	3314 <z_impl_k_sem_give>

000046a0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46a0:	6843      	ldr	r3, [r0, #4]
    46a2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    46a4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    46a8:	600b      	str	r3, [r1, #0]
}
    46aa:	2000      	movs	r0, #0
    46ac:	4770      	bx	lr

000046ae <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46ae:	6843      	ldr	r3, [r0, #4]
    46b0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    46b2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    46b6:	4042      	eors	r2, r0
    46b8:	400a      	ands	r2, r1
    46ba:	4042      	eors	r2, r0
    p_reg->OUT = value;
    46bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    46c0:	2000      	movs	r0, #0
    46c2:	4770      	bx	lr

000046c4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46c4:	6843      	ldr	r3, [r0, #4]
    46c6:	685b      	ldr	r3, [r3, #4]
}
    46c8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    46ca:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    46ce:	4770      	bx	lr

000046d0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46d0:	6843      	ldr	r3, [r0, #4]
    46d2:	685b      	ldr	r3, [r3, #4]
}
    46d4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    46d6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    46da:	4770      	bx	lr

000046dc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46dc:	6843      	ldr	r3, [r0, #4]
    46de:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    46e0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    46e4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    46e6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    46ea:	2000      	movs	r0, #0
    46ec:	4770      	bx	lr

000046ee <gpio_nrfx_manage_callback>:
	return port->data;
    46ee:	6903      	ldr	r3, [r0, #16]
	return list->head;
    46f0:	6858      	ldr	r0, [r3, #4]
{
    46f2:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    46f4:	b158      	cbz	r0, 470e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    46f6:	2400      	movs	r4, #0
    46f8:	4281      	cmp	r1, r0
    46fa:	d112      	bne.n	4722 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    46fc:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    46fe:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    4700:	b954      	cbnz	r4, 4718 <gpio_nrfx_manage_callback+0x2a>
    4702:	428d      	cmp	r5, r1
	list->head = node;
    4704:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4706:	d100      	bne.n	470a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4708:	6098      	str	r0, [r3, #8]
	parent->next = child;
    470a:	2000      	movs	r0, #0
    470c:	6008      	str	r0, [r1, #0]
	if (set) {
    470e:	b96a      	cbnz	r2, 472c <gpio_nrfx_manage_callback+0x3e>
	return 0;
    4710:	2000      	movs	r0, #0
}
    4712:	bd30      	pop	{r4, r5, pc}
    4714:	4628      	mov	r0, r5
    4716:	e7ef      	b.n	46f8 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    4718:	428d      	cmp	r5, r1
	parent->next = child;
    471a:	6020      	str	r0, [r4, #0]
	list->tail = node;
    471c:	bf08      	it	eq
    471e:	609c      	streq	r4, [r3, #8]
}
    4720:	e7f3      	b.n	470a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    4722:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4724:	4604      	mov	r4, r0
    4726:	2d00      	cmp	r5, #0
    4728:	d1f4      	bne.n	4714 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    472a:	b13a      	cbz	r2, 473c <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    472c:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    472e:	685a      	ldr	r2, [r3, #4]
    4730:	600a      	str	r2, [r1, #0]
	list->head = node;
    4732:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4734:	2800      	cmp	r0, #0
    4736:	d1eb      	bne.n	4710 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4738:	6099      	str	r1, [r3, #8]
}
    473a:	e7ea      	b.n	4712 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    473c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4740:	e7e7      	b.n	4712 <gpio_nrfx_manage_callback+0x24>

00004742 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    4742:	6902      	ldr	r2, [r0, #16]
{
    4744:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4746:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    474a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    474e:	2000      	movs	r0, #0
    4750:	4770      	bx	lr

00004752 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4752:	6843      	ldr	r3, [r0, #4]
    4754:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4756:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    475a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    475e:	4770      	bx	lr

00004760 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4760:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    4762:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4764:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4766:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    476a:	b148      	cbz	r0, 4780 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    476c:	7c52      	ldrb	r2, [r2, #17]
    476e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4770:	2000      	movs	r0, #0
    4772:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4776:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    477a:	2201      	movs	r2, #1
    477c:	601a      	str	r2, [r3, #0]
	return 0;
    477e:	4770      	bx	lr
		return -1;
    4780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4784:	4770      	bx	lr

00004786 <nrf_gpio_cfg_input>:
{
    4786:	b507      	push	{r0, r1, r2, lr}
    4788:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    478a:	a801      	add	r0, sp, #4
    478c:	f7fd fb58 	bl	1e40 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4790:	9b01      	ldr	r3, [sp, #4]
    4792:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4796:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    4798:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    479c:	b003      	add	sp, #12
    479e:	f85d fb04 	ldr.w	pc, [sp], #4

000047a2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    47a2:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    47a4:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47a6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    47aa:	b940      	cbnz	r0, 47be <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    47ac:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    47ae:	079b      	lsls	r3, r3, #30
    47b0:	d406      	bmi.n	47c0 <is_tx_ready.isra.0+0x1e>
    47b2:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    47b6:	3800      	subs	r0, #0
    47b8:	bf18      	it	ne
    47ba:	2001      	movne	r0, #1
    47bc:	4770      	bx	lr
    47be:	2001      	movs	r0, #1
}
    47c0:	4770      	bx	lr

000047c2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    47c2:	6843      	ldr	r3, [r0, #4]
    47c4:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    47c6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    47ca:	05d1      	lsls	r1, r2, #23
    47cc:	d518      	bpl.n	4800 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47ce:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    47d2:	b1aa      	cbz	r2, 4800 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    47d4:	f04f 0120 	mov.w	r1, #32
    47d8:	f3ef 8211 	mrs	r2, BASEPRI
    47dc:	f381 8812 	msr	BASEPRI_MAX, r1
    47e0:	f3bf 8f6f 	isb	sy
    47e4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    47e8:	b131      	cbz	r1, 47f8 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47ea:	2100      	movs	r1, #0
    47ec:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    47f0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    47f4:	2101      	movs	r1, #1
    47f6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    47f8:	f382 8811 	msr	BASEPRI, r2
    47fc:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4800:	6842      	ldr	r2, [r0, #4]
    4802:	6852      	ldr	r2, [r2, #4]
    4804:	06d2      	lsls	r2, r2, #27
    4806:	d515      	bpl.n	4834 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    4808:	f04f 0120 	mov.w	r1, #32
    480c:	f3ef 8211 	mrs	r2, BASEPRI
    4810:	f381 8812 	msr	BASEPRI_MAX, r1
    4814:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4818:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    481c:	b111      	cbz	r1, 4824 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    481e:	2100      	movs	r1, #0
    4820:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4824:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4828:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    482c:	f382 8811 	msr	BASEPRI, r2
    4830:	f3bf 8f6f 	isb	sy
}
    4834:	4770      	bx	lr

00004836 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    4836:	b510      	push	{r4, lr}
    4838:	2200      	movs	r2, #0
    483a:	4604      	mov	r4, r0
    483c:	2101      	movs	r1, #1
    483e:	2028      	movs	r0, #40	; 0x28
    4840:	f7fc fcdc 	bl	11fc <z_arm_irq_priority_set>
    4844:	2028      	movs	r0, #40	; 0x28
    4846:	f7fc fcbb 	bl	11c0 <arch_irq_enable>
    484a:	4620      	mov	r0, r4
    484c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4850:	f7fd bc18 	b.w	2084 <uarte_instance_init.constprop.0>

00004854 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    4854:	b510      	push	{r4, lr}
    4856:	2200      	movs	r2, #0
    4858:	4604      	mov	r4, r0
    485a:	2101      	movs	r1, #1
    485c:	2002      	movs	r0, #2
    485e:	f7fc fccd 	bl	11fc <z_arm_irq_priority_set>
    4862:	2002      	movs	r0, #2
    4864:	f7fc fcac 	bl	11c0 <arch_irq_enable>
    4868:	4620      	mov	r0, r4
    486a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    486e:	f7fd bc09 	b.w	2084 <uarte_instance_init.constprop.0>

00004872 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4872:	4770      	bx	lr

00004874 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4878:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    487c:	f1a0 0308 	sub.w	r3, r0, #8
    4880:	4258      	negs	r0, r3
    4882:	4158      	adcs	r0, r3
    4884:	4770      	bx	lr

00004886 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4886:	4700      	bx	r0

00004888 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4888:	f000 b9eb 	b.w	4c62 <z_impl_k_busy_wait>

0000488c <nrfx_clock_enable>:
{
    488c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    488e:	2000      	movs	r0, #0
    4890:	f7fc fca6 	bl	11e0 <arch_irq_is_enabled>
    4894:	b918      	cbnz	r0, 489e <nrfx_clock_enable+0x12>
}
    4896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    489a:	f7fc bc91 	b.w	11c0 <arch_irq_enable>
    489e:	bd08      	pop	{r3, pc}

000048a0 <nrfx_clock_start>:
    switch (domain)
    48a0:	b110      	cbz	r0, 48a8 <nrfx_clock_start+0x8>
    48a2:	2801      	cmp	r0, #1
    48a4:	d01d      	beq.n	48e2 <nrfx_clock_start+0x42>
    48a6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    48a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48ac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    48b0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    48b4:	03c9      	lsls	r1, r1, #15
    48b6:	d512      	bpl.n	48de <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    48b8:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    48bc:	2a01      	cmp	r2, #1
    48be:	d10e      	bne.n	48de <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    48c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48c8:	2200      	movs	r2, #0
    48ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    48ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    48d2:	2202      	movs	r2, #2
    48d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48d8:	2201      	movs	r2, #1
    48da:	609a      	str	r2, [r3, #8]
}
    48dc:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    48de:	2200      	movs	r2, #0
    48e0:	e7ee      	b.n	48c0 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48e6:	2200      	movs	r2, #0
    48e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    48ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    48f0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48f4:	6018      	str	r0, [r3, #0]
}
    48f6:	4770      	bx	lr

000048f8 <nrf_gpio_reconfigure>:
{
    48f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    48fa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    48fc:	a801      	add	r0, sp, #4
{
    48fe:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    4902:	4617      	mov	r7, r2
    4904:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4906:	f7fd ff29 	bl	275c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    490a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    490c:	2f00      	cmp	r7, #0
    490e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4912:	bf14      	ite	ne
    4914:	2302      	movne	r3, #2
    4916:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4918:	2900      	cmp	r1, #0
    491a:	bf18      	it	ne
    491c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4920:	2d00      	cmp	r5, #0
    4922:	bf14      	ite	ne
    4924:	f04f 0c0c 	movne.w	ip, #12
    4928:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    492c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    492e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4932:	bf14      	ite	ne
    4934:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    4938:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    493c:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    493e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4942:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4946:	bf14      	ite	ne
    4948:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    494c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4950:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    4954:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4958:	b101      	cbz	r1, 495c <nrf_gpio_reconfigure+0x64>
    495a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    495c:	b10f      	cbz	r7, 4962 <nrf_gpio_reconfigure+0x6a>
    495e:	783f      	ldrb	r7, [r7, #0]
    4960:	007f      	lsls	r7, r7, #1
    4962:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4964:	b10d      	cbz	r5, 496a <nrf_gpio_reconfigure+0x72>
    4966:	782d      	ldrb	r5, [r5, #0]
    4968:	00ad      	lsls	r5, r5, #2
    496a:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    496c:	b10c      	cbz	r4, 4972 <nrf_gpio_reconfigure+0x7a>
    496e:	7822      	ldrb	r2, [r4, #0]
    4970:	0214      	lsls	r4, r2, #8
    4972:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    4974:	b10e      	cbz	r6, 497a <nrf_gpio_reconfigure+0x82>
    4976:	7836      	ldrb	r6, [r6, #0]
    4978:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    497a:	432c      	orrs	r4, r5
    497c:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    497e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    4982:	b003      	add	sp, #12
    4984:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004986 <nrf_gpio_cfg_sense_set>:
{
    4986:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4988:	f10d 030f 	add.w	r3, sp, #15
    498c:	9301      	str	r3, [sp, #4]
    498e:	2300      	movs	r3, #0
{
    4990:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4994:	9300      	str	r3, [sp, #0]
    4996:	461a      	mov	r2, r3
    4998:	4619      	mov	r1, r3
    499a:	f7ff ffad 	bl	48f8 <nrf_gpio_reconfigure>
}
    499e:	b005      	add	sp, #20
    49a0:	f85d fb04 	ldr.w	pc, [sp], #4

000049a4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    49a4:	f7fe ba40 	b.w	2e28 <_DoInit>

000049a8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    49a8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    49aa:	f7ff fffb 	bl	49a4 <SEGGER_RTT_Init>

	return 0;
}
    49ae:	2000      	movs	r0, #0
    49b0:	bd08      	pop	{r3, pc}

000049b2 <z_device_state_init>:
}
    49b2:	4770      	bx	lr

000049b4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    49b4:	b138      	cbz	r0, 49c6 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    49b6:	68c3      	ldr	r3, [r0, #12]
    49b8:	8818      	ldrh	r0, [r3, #0]
    49ba:	f3c0 0008 	ubfx	r0, r0, #0, #9
    49be:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    49c2:	4258      	negs	r0, r3
    49c4:	4158      	adcs	r0, r3
}
    49c6:	4770      	bx	lr

000049c8 <arch_system_halt>:
	__asm__ volatile(
    49c8:	f04f 0220 	mov.w	r2, #32
    49cc:	f3ef 8311 	mrs	r3, BASEPRI
    49d0:	f382 8812 	msr	BASEPRI_MAX, r2
    49d4:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    49d8:	e7fe      	b.n	49d8 <arch_system_halt+0x10>

000049da <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    49da:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    49dc:	f7ff fff4 	bl	49c8 <arch_system_halt>

000049e0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    49e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49e2:	4605      	mov	r5, r0
    49e4:	460e      	mov	r6, r1
    49e6:	f04f 0320 	mov.w	r3, #32
    49ea:	f3ef 8711 	mrs	r7, BASEPRI
    49ee:	f383 8812 	msr	BASEPRI_MAX, r3
    49f2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    49f6:	f7fe ffc5 	bl	3984 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    49fa:	4631      	mov	r1, r6
    49fc:	4604      	mov	r4, r0
    49fe:	4628      	mov	r0, r5
    4a00:	f7ff ffeb 	bl	49da <k_sys_fatal_error_handler>
	__asm__ volatile(
    4a04:	f387 8811 	msr	BASEPRI, r7
    4a08:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4a0c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4a0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4a12:	f7fc be1b 	b.w	164c <z_impl_k_thread_abort>

00004a16 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4a16:	f3ef 8005 	mrs	r0, IPSR
}
    4a1a:	3800      	subs	r0, #0
    4a1c:	bf18      	it	ne
    4a1e:	2001      	movne	r0, #1
    4a20:	4770      	bx	lr

00004a22 <z_pm_save_idle_exit>:
{
    4a22:	b508      	push	{r3, lr}
	pm_system_resume();
    4a24:	f7fc faea 	bl	ffc <pm_system_resume>
}
    4a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4a2c:	f7ff bf21 	b.w	4872 <sys_clock_idle_exit>

00004a30 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    4a30:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4a34:	428b      	cmp	r3, r1
    4a36:	d001      	beq.n	4a3c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    4a38:	f7fe be60 	b.w	36fc <z_set_prio>
}
    4a3c:	2000      	movs	r0, #0
    4a3e:	4770      	bx	lr

00004a40 <z_impl_k_mutex_init>:
{
    4a40:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4a42:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    4a44:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    4a48:	e9c3 3300 	strd	r3, r3, [r3]
}
    4a4c:	4770      	bx	lr

00004a4e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4a4e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4a52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4a54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4a56:	2300      	movs	r3, #0
	node->prev = NULL;
    4a58:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4a5c:	4770      	bx	lr

00004a5e <unpend_thread_no_timeout>:
{
    4a5e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4a60:	f7ff fff5 	bl	4a4e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4a64:	7b43      	ldrb	r3, [r0, #13]
    4a66:	f023 0302 	bic.w	r3, r3, #2
    4a6a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4a6c:	2300      	movs	r3, #0
    4a6e:	6083      	str	r3, [r0, #8]
}
    4a70:	bd08      	pop	{r3, pc}

00004a72 <z_unpend_thread>:
{
    4a72:	b510      	push	{r4, lr}
	__asm__ volatile(
    4a74:	f04f 0320 	mov.w	r3, #32
    4a78:	f3ef 8411 	mrs	r4, BASEPRI
    4a7c:	f383 8812 	msr	BASEPRI_MAX, r3
    4a80:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    4a84:	f7ff ffeb 	bl	4a5e <unpend_thread_no_timeout>
	__asm__ volatile(
    4a88:	f384 8811 	msr	BASEPRI, r4
    4a8c:	f3bf 8f6f 	isb	sy
}
    4a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a94:	3018      	adds	r0, #24
    4a96:	f000 b8a0 	b.w	4bda <z_abort_timeout>

00004a9a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4a9a:	4603      	mov	r3, r0
    4a9c:	b920      	cbnz	r0, 4aa8 <z_reschedule_irqlock+0xe>
    4a9e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    4aa2:	b90a      	cbnz	r2, 4aa8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4aa4:	f7fc bbea 	b.w	127c <arch_swap>
    4aa8:	f383 8811 	msr	BASEPRI, r3
    4aac:	f3bf 8f6f 	isb	sy
}
    4ab0:	4770      	bx	lr

00004ab2 <z_reschedule_unlocked>:
	__asm__ volatile(
    4ab2:	f04f 0320 	mov.w	r3, #32
    4ab6:	f3ef 8011 	mrs	r0, BASEPRI
    4aba:	f383 8812 	msr	BASEPRI_MAX, r3
    4abe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4ac2:	f7ff bfea 	b.w	4a9a <z_reschedule_irqlock>

00004ac6 <z_priq_dumb_best>:
{
    4ac6:	4603      	mov	r3, r0
	return list->head == list;
    4ac8:	6800      	ldr	r0, [r0, #0]
}
    4aca:	4283      	cmp	r3, r0
    4acc:	bf08      	it	eq
    4ace:	2000      	moveq	r0, #0
    4ad0:	4770      	bx	lr

00004ad2 <z_ready_thread>:
{
    4ad2:	b510      	push	{r4, lr}
    4ad4:	f04f 0320 	mov.w	r3, #32
    4ad8:	f3ef 8411 	mrs	r4, BASEPRI
    4adc:	f383 8812 	msr	BASEPRI_MAX, r3
    4ae0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4ae4:	f7fe fd64 	bl	35b0 <ready_thread>
	__asm__ volatile(
    4ae8:	f384 8811 	msr	BASEPRI, r4
    4aec:	f3bf 8f6f 	isb	sy
}
    4af0:	bd10      	pop	{r4, pc}

00004af2 <z_thread_timeout>:
{
    4af2:	b510      	push	{r4, lr}
    4af4:	4601      	mov	r1, r0
	__asm__ volatile(
    4af6:	f04f 0320 	mov.w	r3, #32
    4afa:	f3ef 8411 	mrs	r4, BASEPRI
    4afe:	f383 8812 	msr	BASEPRI_MAX, r3
    4b02:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4b06:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    4b0a:	f013 0f28 	tst.w	r3, #40	; 0x28
    4b0e:	d10d      	bne.n	4b2c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    4b10:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4b14:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    4b16:	b10b      	cbz	r3, 4b1c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    4b18:	f7ff ffa1 	bl	4a5e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4b1c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    4b20:	f023 0314 	bic.w	r3, r3, #20
    4b24:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    4b28:	f7fe fd42 	bl	35b0 <ready_thread>
	__asm__ volatile(
    4b2c:	f384 8811 	msr	BASEPRI, r4
    4b30:	f3bf 8f6f 	isb	sy
}
    4b34:	bd10      	pop	{r4, pc}

00004b36 <add_to_waitq_locked>:
{
    4b36:	b538      	push	{r3, r4, r5, lr}
    4b38:	4604      	mov	r4, r0
    4b3a:	460d      	mov	r5, r1
	unready_thread(thread);
    4b3c:	f7fe fd8c 	bl	3658 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4b40:	7b63      	ldrb	r3, [r4, #13]
    4b42:	f043 0302 	orr.w	r3, r3, #2
    4b46:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4b48:	b195      	cbz	r5, 4b70 <add_to_waitq_locked+0x3a>
    4b4a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4b4c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b4e:	429d      	cmp	r5, r3
    4b50:	d015      	beq.n	4b7e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b52:	b1a3      	cbz	r3, 4b7e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    4b54:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4b58:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4b5c:	4291      	cmp	r1, r2
    4b5e:	d008      	beq.n	4b72 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    4b60:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4b62:	2a00      	cmp	r2, #0
    4b64:	dd05      	ble.n	4b72 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4b66:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4b68:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4b6c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4b6e:	605c      	str	r4, [r3, #4]
}
    4b70:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4b72:	686a      	ldr	r2, [r5, #4]
    4b74:	4293      	cmp	r3, r2
    4b76:	d002      	beq.n	4b7e <add_to_waitq_locked+0x48>
    4b78:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	d1ec      	bne.n	4b58 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    4b7e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4b80:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4b84:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4b86:	606c      	str	r4, [r5, #4]
}
    4b88:	e7f2      	b.n	4b70 <add_to_waitq_locked+0x3a>

00004b8a <z_unpend_first_thread>:
{
    4b8a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4b8c:	f04f 0320 	mov.w	r3, #32
    4b90:	f3ef 8511 	mrs	r5, BASEPRI
    4b94:	f383 8812 	msr	BASEPRI_MAX, r3
    4b98:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    4b9c:	f7ff ff93 	bl	4ac6 <z_priq_dumb_best>
		if (thread != NULL) {
    4ba0:	4604      	mov	r4, r0
    4ba2:	b120      	cbz	r0, 4bae <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    4ba4:	f7ff ff5b 	bl	4a5e <unpend_thread_no_timeout>
    4ba8:	3018      	adds	r0, #24
    4baa:	f000 f816 	bl	4bda <z_abort_timeout>
	__asm__ volatile(
    4bae:	f385 8811 	msr	BASEPRI, r5
    4bb2:	f3bf 8f6f 	isb	sy
}
    4bb6:	4620      	mov	r0, r4
    4bb8:	bd38      	pop	{r3, r4, r5, pc}

00004bba <z_unpend_all>:
{
    4bba:	b538      	push	{r3, r4, r5, lr}
    4bbc:	4605      	mov	r5, r0
	int need_sched = 0;
    4bbe:	2000      	movs	r0, #0
	return list->head == list;
    4bc0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bc2:	42a5      	cmp	r5, r4
    4bc4:	d000      	beq.n	4bc8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4bc6:	b904      	cbnz	r4, 4bca <z_unpend_all+0x10>
}
    4bc8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    4bca:	4620      	mov	r0, r4
    4bcc:	f7ff ff51 	bl	4a72 <z_unpend_thread>
		z_ready_thread(thread);
    4bd0:	4620      	mov	r0, r4
    4bd2:	f7ff ff7e 	bl	4ad2 <z_ready_thread>
		need_sched = 1;
    4bd6:	2001      	movs	r0, #1
    4bd8:	e7f2      	b.n	4bc0 <z_unpend_all+0x6>

00004bda <z_abort_timeout>:
{
    4bda:	b510      	push	{r4, lr}
	__asm__ volatile(
    4bdc:	f04f 0220 	mov.w	r2, #32
    4be0:	f3ef 8411 	mrs	r4, BASEPRI
    4be4:	f382 8812 	msr	BASEPRI_MAX, r2
    4be8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4bec:	6803      	ldr	r3, [r0, #0]
    4bee:	b13b      	cbz	r3, 4c00 <z_abort_timeout+0x26>
			remove_timeout(to);
    4bf0:	f7fe ff6c 	bl	3acc <remove_timeout>
			ret = 0;
    4bf4:	2000      	movs	r0, #0
	__asm__ volatile(
    4bf6:	f384 8811 	msr	BASEPRI, r4
    4bfa:	f3bf 8f6f 	isb	sy
}
    4bfe:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4c00:	f06f 0015 	mvn.w	r0, #21
    4c04:	e7f7      	b.n	4bf6 <z_abort_timeout+0x1c>

00004c06 <z_get_next_timeout_expiry>:
{
    4c06:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c08:	f04f 0320 	mov.w	r3, #32
    4c0c:	f3ef 8411 	mrs	r4, BASEPRI
    4c10:	f383 8812 	msr	BASEPRI_MAX, r3
    4c14:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4c18:	f7fe ff30 	bl	3a7c <next_timeout>
	__asm__ volatile(
    4c1c:	f384 8811 	msr	BASEPRI, r4
    4c20:	f3bf 8f6f 	isb	sy
}
    4c24:	bd10      	pop	{r4, pc}

00004c26 <z_set_timeout_expiry>:
{
    4c26:	b570      	push	{r4, r5, r6, lr}
    4c28:	4604      	mov	r4, r0
    4c2a:	460d      	mov	r5, r1
	__asm__ volatile(
    4c2c:	f04f 0320 	mov.w	r3, #32
    4c30:	f3ef 8611 	mrs	r6, BASEPRI
    4c34:	f383 8812 	msr	BASEPRI_MAX, r3
    4c38:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4c3c:	f7fe ff1e 	bl	3a7c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4c40:	2801      	cmp	r0, #1
    4c42:	dd05      	ble.n	4c50 <z_set_timeout_expiry+0x2a>
    4c44:	42a0      	cmp	r0, r4
    4c46:	db03      	blt.n	4c50 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4c48:	4629      	mov	r1, r5
    4c4a:	4620      	mov	r0, r4
    4c4c:	f7fd fb7c 	bl	2348 <sys_clock_set_timeout>
	__asm__ volatile(
    4c50:	f386 8811 	msr	BASEPRI, r6
    4c54:	f3bf 8f6f 	isb	sy
}
    4c58:	bd70      	pop	{r4, r5, r6, pc}

00004c5a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4c5a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4c5c:	f7ff f826 	bl	3cac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4c60:	bd08      	pop	{r3, pc}

00004c62 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4c62:	b108      	cbz	r0, 4c68 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4c64:	f7fc be00 	b.w	1868 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4c68:	4770      	bx	lr

00004c6a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c6a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4c6e:	bf08      	it	eq
    4c70:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4c74:	b538      	push	{r3, r4, r5, lr}
    4c76:	4605      	mov	r5, r0
    4c78:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c7a:	d01d      	beq.n	4cb8 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4c7c:	ea51 0300 	orrs.w	r3, r1, r0
    4c80:	d103      	bne.n	4c8a <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    4c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    4c86:	f7ff b811 	b.w	3cac <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    4c8a:	f06f 0301 	mvn.w	r3, #1
    4c8e:	1a18      	subs	r0, r3, r0
    4c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c94:	eb63 0101 	sbc.w	r1, r3, r1
    4c98:	2900      	cmp	r1, #0
    4c9a:	da0c      	bge.n	4cb6 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    4c9c:	f7ff f806 	bl	3cac <sys_clock_tick_get>
    4ca0:	2d01      	cmp	r5, #1
    4ca2:	4622      	mov	r2, r4
    4ca4:	f174 0400 	sbcs.w	r4, r4, #0
    4ca8:	462b      	mov	r3, r5
    4caa:	bfbc      	itt	lt
    4cac:	2301      	movlt	r3, #1
    4cae:	2200      	movlt	r2, #0
    4cb0:	1818      	adds	r0, r3, r0
    4cb2:	eb41 0102 	adc.w	r1, r1, r2
}
    4cb6:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    4cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cbc:	4601      	mov	r1, r0
    4cbe:	e7fa      	b.n	4cb6 <sys_clock_timeout_end_calc+0x4c>

00004cc0 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    4cc0:	3204      	adds	r2, #4
{
    4cc2:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    4cc4:	4604      	mov	r4, r0
    4cc6:	d208      	bcs.n	4cda <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    4cc8:	2600      	movs	r6, #0
    4cca:	2700      	movs	r7, #0
    4ccc:	e9cd 6700 	strd	r6, r7, [sp]
    4cd0:	f041 0104 	orr.w	r1, r1, #4
    4cd4:	f000 f81a 	bl	4d0c <k_heap_aligned_alloc>
	if (mem == NULL) {
    4cd8:	b910      	cbnz	r0, 4ce0 <z_heap_aligned_alloc+0x20>
		return NULL;
    4cda:	2000      	movs	r0, #0
}
    4cdc:	b002      	add	sp, #8
    4cde:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
    4ce0:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
    4ce4:	e7fa      	b.n	4cdc <z_heap_aligned_alloc+0x1c>

00004ce6 <k_free>:
	if (ptr != NULL) {
    4ce6:	b120      	cbz	r0, 4cf2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    4ce8:	1f01      	subs	r1, r0, #4
    4cea:	f850 0c04 	ldr.w	r0, [r0, #-4]
    4cee:	f000 b84e 	b.w	4d8e <k_heap_free>
}
    4cf2:	4770      	bx	lr

00004cf4 <k_malloc>:

	return ret;
}

void *k_malloc(size_t size)
{
    4cf4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
    4cf6:	2004      	movs	r0, #4
    4cf8:	f7fe bff0 	b.w	3cdc <k_aligned_alloc>

00004cfc <k_heap_init>:
{
    4cfc:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    4cfe:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    4d02:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4d06:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    4d08:	f7ff bb3d 	b.w	4386 <sys_heap_init>

00004d0c <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    4d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d10:	b085      	sub	sp, #20
    4d12:	4606      	mov	r6, r0
    4d14:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    4d16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    4d1a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    4d1c:	f7ff ffa5 	bl	4c6a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    4d20:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    4d24:	4605      	mov	r5, r0
    4d26:	460f      	mov	r7, r1
	__asm__ volatile(
    4d28:	f04f 0320 	mov.w	r3, #32
    4d2c:	f3ef 8411 	mrs	r4, BASEPRI
    4d30:	f383 8812 	msr	BASEPRI_MAX, r3
    4d34:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    4d38:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    4d3c:	464a      	mov	r2, r9
    4d3e:	4641      	mov	r1, r8
    4d40:	4630      	mov	r0, r6
    4d42:	f7ff fab8 	bl	42b6 <sys_heap_aligned_alloc>
    4d46:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    4d48:	f7fe ffb0 	bl	3cac <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    4d4c:	9b03      	ldr	r3, [sp, #12]
    4d4e:	b13b      	cbz	r3, 4d60 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    4d50:	f384 8811 	msr	BASEPRI, r4
    4d54:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    4d58:	4618      	mov	r0, r3
    4d5a:	b005      	add	sp, #20
    4d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    4d60:	1a28      	subs	r0, r5, r0
    4d62:	eb67 0101 	sbc.w	r1, r7, r1
    4d66:	2801      	cmp	r0, #1
    4d68:	f171 0200 	sbcs.w	r2, r1, #0
    4d6c:	dbf0      	blt.n	4d50 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    4d6e:	e9cd 0100 	strd	r0, r1, [sp]
    4d72:	465a      	mov	r2, fp
    4d74:	4621      	mov	r1, r4
    4d76:	4650      	mov	r0, sl
    4d78:	f7fe fcac 	bl	36d4 <z_pend_curr>
	__asm__ volatile(
    4d7c:	f04f 0320 	mov.w	r3, #32
    4d80:	f3ef 8411 	mrs	r4, BASEPRI
    4d84:	f383 8812 	msr	BASEPRI_MAX, r3
    4d88:	f3bf 8f6f 	isb	sy
    4d8c:	e7d6      	b.n	4d3c <k_heap_aligned_alloc+0x30>

00004d8e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    4d8e:	b538      	push	{r3, r4, r5, lr}
    4d90:	4604      	mov	r4, r0
    4d92:	f04f 0320 	mov.w	r3, #32
    4d96:	f3ef 8511 	mrs	r5, BASEPRI
    4d9a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d9e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    4da2:	f7ff fa50 	bl	4246 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    4da6:	f104 000c 	add.w	r0, r4, #12
    4daa:	f7ff ff06 	bl	4bba <z_unpend_all>
    4dae:	b130      	cbz	r0, 4dbe <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    4db0:	4629      	mov	r1, r5
    4db2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    4db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    4dba:	f7fe bb39 	b.w	3430 <z_reschedule>
	__asm__ volatile(
    4dbe:	f385 8811 	msr	BASEPRI, r5
    4dc2:	f3bf 8f6f 	isb	sy
}
    4dc6:	bd38      	pop	{r3, r4, r5, pc}

00004dc8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    4dc8:	f7fd bb18 	b.w	23fc <SystemInit>
