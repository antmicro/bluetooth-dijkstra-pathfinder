
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	a0 06 00 20 51 1c 00 00 f5 3e 00 00 25 1c 00 00     ... Q....>..%...
    1010:	25 1c 00 00 25 1c 00 00 25 1c 00 00 00 00 00 00     %...%...%.......
	...
    102c:	39 19 00 00 25 1c 00 00 00 00 00 00 e5 18 00 00     9...%...........
    103c:	25 1c 00 00                                         %...

00001040 <_irq_vector_table>:
    1040:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    1050:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    1060:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    1070:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    1080:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    1090:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    10a0:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    10b0:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    10c0:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    10d0:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    10e0:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................
    10f0:	e9 19 00 00 e9 19 00 00 e9 19 00 00 e9 19 00 00     ................

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1138:	4607      	mov	r7, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    1140:	4615      	mov	r5, r2
    1142:	463c      	mov	r4, r7
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c6 	bne.w	12d8 <__udivmoddi4+0x1a4>
    114c:	4282      	cmp	r2, r0
    114e:	fab2 f782 	clz	r7, r2
    1152:	d946      	bls.n	11e2 <__udivmoddi4+0xae>
    1154:	b14f      	cbz	r7, 116a <__udivmoddi4+0x36>
    1156:	f1c7 0e20 	rsb	lr, r7, #32
    115a:	fa24 fe0e 	lsr.w	lr, r4, lr
    115e:	fa00 f307 	lsl.w	r3, r0, r7
    1162:	40bd      	lsls	r5, r7
    1164:	ea4e 0c03 	orr.w	ip, lr, r3
    1168:	40bc      	lsls	r4, r7
    116a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    116e:	fa1f fe85 	uxth.w	lr, r5
    1172:	fbbc f9f8 	udiv	r9, ip, r8
    1176:	0c22      	lsrs	r2, r4, #16
    1178:	fb08 c319 	mls	r3, r8, r9, ip
    117c:	fb09 fa0e 	mul.w	sl, r9, lr
    1180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1184:	459a      	cmp	sl, r3
    1186:	d928      	bls.n	11da <__udivmoddi4+0xa6>
    1188:	18eb      	adds	r3, r5, r3
    118a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    118e:	d204      	bcs.n	119a <__udivmoddi4+0x66>
    1190:	459a      	cmp	sl, r3
    1192:	d902      	bls.n	119a <__udivmoddi4+0x66>
    1194:	f1a9 0002 	sub.w	r0, r9, #2
    1198:	442b      	add	r3, r5
    119a:	eba3 030a 	sub.w	r3, r3, sl
    119e:	b2a4      	uxth	r4, r4
    11a0:	fbb3 f2f8 	udiv	r2, r3, r8
    11a4:	fb08 3312 	mls	r3, r8, r2, r3
    11a8:	fb02 fe0e 	mul.w	lr, r2, lr
    11ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11b0:	45a6      	cmp	lr, r4
    11b2:	d914      	bls.n	11de <__udivmoddi4+0xaa>
    11b4:	192c      	adds	r4, r5, r4
    11b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    11ba:	d203      	bcs.n	11c4 <__udivmoddi4+0x90>
    11bc:	45a6      	cmp	lr, r4
    11be:	d901      	bls.n	11c4 <__udivmoddi4+0x90>
    11c0:	1e93      	subs	r3, r2, #2
    11c2:	442c      	add	r4, r5
    11c4:	eba4 040e 	sub.w	r4, r4, lr
    11c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    11cc:	b11e      	cbz	r6, 11d6 <__udivmoddi4+0xa2>
    11ce:	40fc      	lsrs	r4, r7
    11d0:	2300      	movs	r3, #0
    11d2:	6034      	str	r4, [r6, #0]
    11d4:	6073      	str	r3, [r6, #4]
    11d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11da:	4648      	mov	r0, r9
    11dc:	e7dd      	b.n	119a <__udivmoddi4+0x66>
    11de:	4613      	mov	r3, r2
    11e0:	e7f0      	b.n	11c4 <__udivmoddi4+0x90>
    11e2:	b902      	cbnz	r2, 11e6 <__udivmoddi4+0xb2>
    11e4:	deff      	udf	#255	; 0xff
    11e6:	bb87      	cbnz	r7, 124a <__udivmoddi4+0x116>
    11e8:	1a83      	subs	r3, r0, r2
    11ea:	2101      	movs	r1, #1
    11ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11f0:	b2aa      	uxth	r2, r5
    11f2:	fbb3 fcfe 	udiv	ip, r3, lr
    11f6:	0c20      	lsrs	r0, r4, #16
    11f8:	fb0e 331c 	mls	r3, lr, ip, r3
    11fc:	fb0c f802 	mul.w	r8, ip, r2
    1200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    1204:	4598      	cmp	r8, r3
    1206:	d963      	bls.n	12d0 <__udivmoddi4+0x19c>
    1208:	18eb      	adds	r3, r5, r3
    120a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    120e:	d204      	bcs.n	121a <__udivmoddi4+0xe6>
    1210:	4598      	cmp	r8, r3
    1212:	d902      	bls.n	121a <__udivmoddi4+0xe6>
    1214:	f1ac 0002 	sub.w	r0, ip, #2
    1218:	442b      	add	r3, r5
    121a:	eba3 0308 	sub.w	r3, r3, r8
    121e:	b2a4      	uxth	r4, r4
    1220:	fbb3 fcfe 	udiv	ip, r3, lr
    1224:	fb0e 331c 	mls	r3, lr, ip, r3
    1228:	fb0c f202 	mul.w	r2, ip, r2
    122c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1230:	42a2      	cmp	r2, r4
    1232:	d94f      	bls.n	12d4 <__udivmoddi4+0x1a0>
    1234:	192c      	adds	r4, r5, r4
    1236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    123a:	d204      	bcs.n	1246 <__udivmoddi4+0x112>
    123c:	42a2      	cmp	r2, r4
    123e:	d902      	bls.n	1246 <__udivmoddi4+0x112>
    1240:	f1ac 0302 	sub.w	r3, ip, #2
    1244:	442c      	add	r4, r5
    1246:	1aa4      	subs	r4, r4, r2
    1248:	e7be      	b.n	11c8 <__udivmoddi4+0x94>
    124a:	f1c7 0c20 	rsb	ip, r7, #32
    124e:	fa20 f80c 	lsr.w	r8, r0, ip
    1252:	fa00 f307 	lsl.w	r3, r0, r7
    1256:	fa24 fc0c 	lsr.w	ip, r4, ip
    125a:	40bd      	lsls	r5, r7
    125c:	ea4c 0203 	orr.w	r2, ip, r3
    1260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1264:	b2ab      	uxth	r3, r5
    1266:	fbb8 fcfe 	udiv	ip, r8, lr
    126a:	0c11      	lsrs	r1, r2, #16
    126c:	fb0e 801c 	mls	r0, lr, ip, r8
    1270:	fb0c f903 	mul.w	r9, ip, r3
    1274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    1278:	4581      	cmp	r9, r0
    127a:	fa04 f407 	lsl.w	r4, r4, r7
    127e:	d923      	bls.n	12c8 <__udivmoddi4+0x194>
    1280:	1828      	adds	r0, r5, r0
    1282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    1286:	d204      	bcs.n	1292 <__udivmoddi4+0x15e>
    1288:	4581      	cmp	r9, r0
    128a:	d902      	bls.n	1292 <__udivmoddi4+0x15e>
    128c:	f1ac 0102 	sub.w	r1, ip, #2
    1290:	4428      	add	r0, r5
    1292:	eba0 0009 	sub.w	r0, r0, r9
    1296:	b292      	uxth	r2, r2
    1298:	fbb0 fcfe 	udiv	ip, r0, lr
    129c:	fb0e 001c 	mls	r0, lr, ip, r0
    12a0:	fb0c f803 	mul.w	r8, ip, r3
    12a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    12a8:	4598      	cmp	r8, r3
    12aa:	d90f      	bls.n	12cc <__udivmoddi4+0x198>
    12ac:	18eb      	adds	r3, r5, r3
    12ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    12b2:	d204      	bcs.n	12be <__udivmoddi4+0x18a>
    12b4:	4598      	cmp	r8, r3
    12b6:	d902      	bls.n	12be <__udivmoddi4+0x18a>
    12b8:	f1ac 0202 	sub.w	r2, ip, #2
    12bc:	442b      	add	r3, r5
    12be:	eba3 0308 	sub.w	r3, r3, r8
    12c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    12c6:	e791      	b.n	11ec <__udivmoddi4+0xb8>
    12c8:	4661      	mov	r1, ip
    12ca:	e7e2      	b.n	1292 <__udivmoddi4+0x15e>
    12cc:	4662      	mov	r2, ip
    12ce:	e7f6      	b.n	12be <__udivmoddi4+0x18a>
    12d0:	4660      	mov	r0, ip
    12d2:	e7a2      	b.n	121a <__udivmoddi4+0xe6>
    12d4:	4663      	mov	r3, ip
    12d6:	e7b6      	b.n	1246 <__udivmoddi4+0x112>
    12d8:	4283      	cmp	r3, r0
    12da:	d905      	bls.n	12e8 <__udivmoddi4+0x1b4>
    12dc:	b10e      	cbz	r6, 12e2 <__udivmoddi4+0x1ae>
    12de:	e9c6 7000 	strd	r7, r0, [r6]
    12e2:	2100      	movs	r1, #0
    12e4:	4608      	mov	r0, r1
    12e6:	e776      	b.n	11d6 <__udivmoddi4+0xa2>
    12e8:	fab3 f183 	clz	r1, r3
    12ec:	b981      	cbnz	r1, 1310 <__udivmoddi4+0x1dc>
    12ee:	4283      	cmp	r3, r0
    12f0:	d301      	bcc.n	12f6 <__udivmoddi4+0x1c2>
    12f2:	42ba      	cmp	r2, r7
    12f4:	d80a      	bhi.n	130c <__udivmoddi4+0x1d8>
    12f6:	1abc      	subs	r4, r7, r2
    12f8:	eb60 0303 	sbc.w	r3, r0, r3
    12fc:	2001      	movs	r0, #1
    12fe:	469c      	mov	ip, r3
    1300:	2e00      	cmp	r6, #0
    1302:	d068      	beq.n	13d6 <__udivmoddi4+0x2a2>
    1304:	e9c6 4c00 	strd	r4, ip, [r6]
    1308:	2100      	movs	r1, #0
    130a:	e764      	b.n	11d6 <__udivmoddi4+0xa2>
    130c:	4608      	mov	r0, r1
    130e:	e7f7      	b.n	1300 <__udivmoddi4+0x1cc>
    1310:	f1c1 0c20 	rsb	ip, r1, #32
    1314:	408b      	lsls	r3, r1
    1316:	fa22 f40c 	lsr.w	r4, r2, ip
    131a:	431c      	orrs	r4, r3
    131c:	fa02 f501 	lsl.w	r5, r2, r1
    1320:	fa00 f301 	lsl.w	r3, r0, r1
    1324:	fa27 f20c 	lsr.w	r2, r7, ip
    1328:	fa20 fb0c 	lsr.w	fp, r0, ip
    132c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1330:	4313      	orrs	r3, r2
    1332:	fbbb f8f9 	udiv	r8, fp, r9
    1336:	fa1f fe84 	uxth.w	lr, r4
    133a:	fb09 bb18 	mls	fp, r9, r8, fp
    133e:	0c1a      	lsrs	r2, r3, #16
    1340:	fb08 fa0e 	mul.w	sl, r8, lr
    1344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    1348:	4592      	cmp	sl, r2
    134a:	fa07 f701 	lsl.w	r7, r7, r1
    134e:	d93e      	bls.n	13ce <__udivmoddi4+0x29a>
    1350:	18a2      	adds	r2, r4, r2
    1352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1356:	d204      	bcs.n	1362 <__udivmoddi4+0x22e>
    1358:	4592      	cmp	sl, r2
    135a:	d902      	bls.n	1362 <__udivmoddi4+0x22e>
    135c:	f1a8 0002 	sub.w	r0, r8, #2
    1360:	4422      	add	r2, r4
    1362:	eba2 020a 	sub.w	r2, r2, sl
    1366:	b29b      	uxth	r3, r3
    1368:	fbb2 f8f9 	udiv	r8, r2, r9
    136c:	fb09 2218 	mls	r2, r9, r8, r2
    1370:	fb08 fe0e 	mul.w	lr, r8, lr
    1374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    1378:	4596      	cmp	lr, r2
    137a:	d92a      	bls.n	13d2 <__udivmoddi4+0x29e>
    137c:	18a2      	adds	r2, r4, r2
    137e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1382:	d204      	bcs.n	138e <__udivmoddi4+0x25a>
    1384:	4596      	cmp	lr, r2
    1386:	d902      	bls.n	138e <__udivmoddi4+0x25a>
    1388:	f1a8 0302 	sub.w	r3, r8, #2
    138c:	4422      	add	r2, r4
    138e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1392:	fba0 9305 	umull	r9, r3, r0, r5
    1396:	eba2 020e 	sub.w	r2, r2, lr
    139a:	429a      	cmp	r2, r3
    139c:	46ce      	mov	lr, r9
    139e:	4698      	mov	r8, r3
    13a0:	d302      	bcc.n	13a8 <__udivmoddi4+0x274>
    13a2:	d106      	bne.n	13b2 <__udivmoddi4+0x27e>
    13a4:	454f      	cmp	r7, r9
    13a6:	d204      	bcs.n	13b2 <__udivmoddi4+0x27e>
    13a8:	ebb9 0e05 	subs.w	lr, r9, r5
    13ac:	eb63 0804 	sbc.w	r8, r3, r4
    13b0:	3801      	subs	r0, #1
    13b2:	b186      	cbz	r6, 13d6 <__udivmoddi4+0x2a2>
    13b4:	ebb7 030e 	subs.w	r3, r7, lr
    13b8:	eb62 0708 	sbc.w	r7, r2, r8
    13bc:	fa07 fc0c 	lsl.w	ip, r7, ip
    13c0:	40cb      	lsrs	r3, r1
    13c2:	ea4c 0303 	orr.w	r3, ip, r3
    13c6:	40cf      	lsrs	r7, r1
    13c8:	e9c6 3700 	strd	r3, r7, [r6]
    13cc:	e79c      	b.n	1308 <__udivmoddi4+0x1d4>
    13ce:	4640      	mov	r0, r8
    13d0:	e7c7      	b.n	1362 <__udivmoddi4+0x22e>
    13d2:	4643      	mov	r3, r8
    13d4:	e7db      	b.n	138e <__udivmoddi4+0x25a>
    13d6:	4631      	mov	r1, r6
    13d8:	e6fd      	b.n	11d6 <__udivmoddi4+0xa2>
	...

000013dc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13e0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13e4:	f019 0808 	ands.w	r8, r9, #8
{
    13e8:	4604      	mov	r4, r0
    13ea:	4693      	mov	fp, r2
	if (processing) {
    13ec:	d00d      	beq.n	140a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    13ee:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13f0:	bf0c      	ite	eq
    13f2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13f6:	f049 0920 	orrne.w	r9, r9, #32
    13fa:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13fe:	f38b 8811 	msr	BASEPRI, fp
    1402:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    140a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    140e:	2902      	cmp	r1, #2
    1410:	d107      	bne.n	1422 <process_event+0x46>
			evt = process_recheck(mgr);
    1412:	4620      	mov	r0, r4
    1414:	f002 fca9 	bl	3d6a <process_recheck>
		if (evt == EVT_NOP) {
    1418:	2800      	cmp	r0, #0
    141a:	d0f0      	beq.n	13fe <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    141c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    141e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1420:	d14e      	bne.n	14c0 <process_event+0xe4>
			res = mgr->last_res;
    1422:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1424:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1426:	2f00      	cmp	r7, #0
    1428:	da15      	bge.n	1456 <process_event+0x7a>
		*clients = mgr->clients;
    142a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    142c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1430:	e9c4 8800 	strd	r8, r8, [r4]
    1434:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1438:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    143a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    143c:	8b21      	ldrh	r1, [r4, #24]
    143e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1442:	45ca      	cmp	sl, r9
    1444:	d002      	beq.n	144c <process_event+0x70>
		if (do_monitors
    1446:	68a3      	ldr	r3, [r4, #8]
    1448:	2b00      	cmp	r3, #0
    144a:	d15a      	bne.n	1502 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    144c:	b90d      	cbnz	r5, 1452 <process_event+0x76>
		    || (transit != NULL)) {
    144e:	2e00      	cmp	r6, #0
    1450:	d071      	beq.n	1536 <process_event+0x15a>
    1452:	2300      	movs	r3, #0
    1454:	e056      	b.n	1504 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1456:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    145a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    145c:	2a01      	cmp	r2, #1
    145e:	d81e      	bhi.n	149e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1460:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1464:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1466:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1468:	b289      	uxth	r1, r1
    146a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    146e:	d10a      	bne.n	1486 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1470:	b13d      	cbz	r5, 1482 <process_event+0xa6>
    1472:	8b63      	ldrh	r3, [r4, #26]
    1474:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1476:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1478:	3301      	adds	r3, #1
    147a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    147c:	2a00      	cmp	r2, #0
    147e:	d1fa      	bne.n	1476 <process_event+0x9a>
    1480:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1482:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1486:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1488:	4620      	mov	r0, r4
    148a:	f002 fc6e 	bl	3d6a <process_recheck>
    148e:	4606      	mov	r6, r0
    1490:	2800      	cmp	r0, #0
    1492:	d0d3      	beq.n	143c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1494:	8b23      	ldrh	r3, [r4, #24]
    1496:	f043 0320 	orr.w	r3, r3, #32
    149a:	8323      	strh	r3, [r4, #24]
    149c:	e7cd      	b.n	143a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    149e:	2b04      	cmp	r3, #4
    14a0:	d10c      	bne.n	14bc <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a2:	f021 0107 	bic.w	r1, r1, #7
    14a6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    14a8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14aa:	4620      	mov	r0, r4
    14ac:	f002 fc5d 	bl	3d6a <process_recheck>
    14b0:	4605      	mov	r5, r0
    14b2:	2800      	cmp	r0, #0
    14b4:	d0c1      	beq.n	143a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14b6:	f041 0120 	orr.w	r1, r1, #32
    14ba:	8321      	strh	r1, [r4, #24]
    14bc:	2500      	movs	r5, #0
    14be:	e7bc      	b.n	143a <process_event+0x5e>
		} else if (evt == EVT_START) {
    14c0:	2803      	cmp	r0, #3
    14c2:	d109      	bne.n	14d8 <process_event+0xfc>
			transit = mgr->transitions->start;
    14c4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14c6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    14ca:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14cc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    14d0:	8323      	strh	r3, [r4, #24]
}
    14d2:	2500      	movs	r5, #0
		res = 0;
    14d4:	462f      	mov	r7, r5
    14d6:	e7b1      	b.n	143c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    14d8:	2804      	cmp	r0, #4
    14da:	d106      	bne.n	14ea <process_event+0x10e>
			transit = mgr->transitions->stop;
    14dc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14de:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    14e2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14e4:	f043 0304 	orr.w	r3, r3, #4
    14e8:	e7f2      	b.n	14d0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    14ea:	2805      	cmp	r0, #5
    14ec:	d106      	bne.n	14fc <process_event+0x120>
			transit = mgr->transitions->reset;
    14ee:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    14f4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f6:	f043 0305 	orr.w	r3, r3, #5
    14fa:	e7e9      	b.n	14d0 <process_event+0xf4>
    14fc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14fe:	462e      	mov	r6, r5
    1500:	e7e8      	b.n	14d4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1502:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1504:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1508:	8321      	strh	r1, [r4, #24]
    150a:	f38b 8811 	msr	BASEPRI, fp
    150e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1512:	b9fb      	cbnz	r3, 1554 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1514:	bb85      	cbnz	r5, 1578 <process_event+0x19c>
			if (transit != NULL) {
    1516:	b116      	cbz	r6, 151e <process_event+0x142>
				transit(mgr, transition_complete);
    1518:	491f      	ldr	r1, [pc, #124]	; (1598 <process_event+0x1bc>)
    151a:	4620      	mov	r0, r4
    151c:	47b0      	blx	r6
	__asm__ volatile(
    151e:	f04f 0320 	mov.w	r3, #32
    1522:	f3ef 8b11 	mrs	fp, BASEPRI
    1526:	f383 8812 	msr	BASEPRI_MAX, r3
    152a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    152e:	8b23      	ldrh	r3, [r4, #24]
    1530:	f023 0308 	bic.w	r3, r3, #8
    1534:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1536:	8b23      	ldrh	r3, [r4, #24]
    1538:	06da      	lsls	r2, r3, #27
    153a:	d525      	bpl.n	1588 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    153c:	f023 0310 	bic.w	r3, r3, #16
    1540:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1542:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1544:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1548:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    154c:	2900      	cmp	r1, #0
    154e:	f47f af5e 	bne.w	140e <process_event+0x32>
out:
    1552:	e754      	b.n	13fe <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1554:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1556:	2900      	cmp	r1, #0
    1558:	d0dc      	beq.n	1514 <process_event+0x138>
	return node->next;
    155a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    155e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1562:	463b      	mov	r3, r7
    1564:	4652      	mov	r2, sl
    1566:	4620      	mov	r0, r4
    1568:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    156a:	f1b9 0f00 	cmp.w	r9, #0
    156e:	d0d1      	beq.n	1514 <process_event+0x138>
    1570:	4649      	mov	r1, r9
    1572:	f8d9 9000 	ldr.w	r9, [r9]
    1576:	e7f2      	b.n	155e <process_event+0x182>
    1578:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    157a:	463b      	mov	r3, r7
    157c:	4652      	mov	r2, sl
    157e:	4620      	mov	r0, r4
    1580:	682d      	ldr	r5, [r5, #0]
    1582:	f002 fc0e 	bl	3da2 <notify_one>
    1586:	e7c5      	b.n	1514 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1588:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    158c:	bf1e      	ittt	ne
    158e:	f023 0320 	bicne.w	r3, r3, #32
    1592:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1594:	2102      	movne	r1, #2
    1596:	e7d5      	b.n	1544 <process_event+0x168>
    1598:	00003dcf 	.word	0x00003dcf

0000159c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    159c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    15a0:	4605      	mov	r5, r0
    15a2:	f04f 0320 	mov.w	r3, #32
    15a6:	f3ef 8611 	mrs	r6, BASEPRI
    15aa:	f383 8812 	msr	BASEPRI_MAX, r3
    15ae:	f3bf 8f6f 	isb	sy
	return list->head;
    15b2:	4b0e      	ldr	r3, [pc, #56]	; (15ec <pm_state_notify+0x50>)
    15b4:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    15b6:	b19c      	cbz	r4, 15e0 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    15b8:	4f0d      	ldr	r7, [pc, #52]	; (15f0 <pm_state_notify+0x54>)
    15ba:	f8df 8038 	ldr.w	r8, [pc, #56]	; 15f4 <pm_state_notify+0x58>
    15be:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    15c2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    15c6:	2d00      	cmp	r5, #0
    15c8:	bf08      	it	eq
    15ca:	4613      	moveq	r3, r2
		if (callback) {
    15cc:	b12b      	cbz	r3, 15da <pm_state_notify+0x3e>
			callback(z_power_states[_current_cpu->id].state);
    15ce:	f898 2014 	ldrb.w	r2, [r8, #20]
    15d2:	fb09 f202 	mul.w	r2, r9, r2
    15d6:	5cb8      	ldrb	r0, [r7, r2]
    15d8:	4798      	blx	r3
	return node->next;
    15da:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    15dc:	2c00      	cmp	r4, #0
    15de:	d1f0      	bne.n	15c2 <pm_state_notify+0x26>
	__asm__ volatile(
    15e0:	f386 8811 	msr	BASEPRI, r6
    15e4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    15e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    15ec:	200001a0 	.word	0x200001a0
    15f0:	200001ac 	.word	0x200001ac
    15f4:	20000260 	.word	0x20000260

000015f8 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    15f8:	f000 031f 	and.w	r3, r0, #31
    15fc:	2201      	movs	r2, #1
    15fe:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1600:	4b0a      	ldr	r3, [pc, #40]	; (162c <atomic_test_and_set_bit.constprop.0+0x34>)
    1602:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1606:	0940      	lsrs	r0, r0, #5
    1608:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    160c:	e850 3f00 	ldrex	r3, [r0]
    1610:	ea43 0102 	orr.w	r1, r3, r2
    1614:	e840 1c00 	strex	ip, r1, [r0]
    1618:	f1bc 0f00 	cmp.w	ip, #0
    161c:	d1f6      	bne.n	160c <atomic_test_and_set_bit.constprop.0+0x14>
    161e:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1622:	421a      	tst	r2, r3
}
    1624:	bf14      	ite	ne
    1626:	2001      	movne	r0, #1
    1628:	2000      	moveq	r0, #0
    162a:	4770      	bx	lr
    162c:	200001b8 	.word	0x200001b8

00001630 <pm_system_resume>:

void pm_system_resume(void)
{
    1630:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1632:	4b1d      	ldr	r3, [pc, #116]	; (16a8 <pm_system_resume+0x78>)
    1634:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1636:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    163a:	f004 031f 	and.w	r3, r4, #31
    163e:	2201      	movs	r2, #1
    1640:	409a      	lsls	r2, r3
    1642:	4b1a      	ldr	r3, [pc, #104]	; (16ac <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1644:	0961      	lsrs	r1, r4, #5
{
    1646:	b085      	sub	sp, #20
    1648:	43d0      	mvns	r0, r2
    164a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    164e:	e853 1f00 	ldrex	r1, [r3]
    1652:	ea01 0500 	and.w	r5, r1, r0
    1656:	e843 5c00 	strex	ip, r5, [r3]
    165a:	f1bc 0f00 	cmp.w	ip, #0
    165e:	d1f6      	bne.n	164e <pm_system_resume+0x1e>
    1660:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1664:	4211      	tst	r1, r2
    1666:	d017      	beq.n	1698 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1668:	4d11      	ldr	r5, [pc, #68]	; (16b0 <pm_system_resume+0x80>)
    166a:	220c      	movs	r2, #12
    166c:	fb02 5204 	mla	r2, r2, r4, r5
    1670:	ca07      	ldmia	r2, {r0, r1, r2}
    1672:	ab01      	add	r3, sp, #4
    1674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1678:	4a0e      	ldr	r2, [pc, #56]	; (16b4 <pm_system_resume+0x84>)
    167a:	b17a      	cbz	r2, 169c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    167c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1680:	f002 fc66 	bl	3f50 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1684:	2000      	movs	r0, #0
    1686:	f7ff ff89 	bl	159c <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    168a:	230c      	movs	r3, #12
    168c:	435c      	muls	r4, r3
    168e:	192a      	adds	r2, r5, r4
    1690:	2300      	movs	r3, #0
    1692:	512b      	str	r3, [r5, r4]
    1694:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1698:	b005      	add	sp, #20
    169a:	bd30      	pop	{r4, r5, pc}
    169c:	f382 8811 	msr	BASEPRI, r2
    16a0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    16a4:	e7ee      	b.n	1684 <pm_system_resume+0x54>
    16a6:	bf00      	nop
    16a8:	20000260 	.word	0x20000260
    16ac:	200001a8 	.word	0x200001a8
    16b0:	200001ac 	.word	0x200001ac
    16b4:	00003f51 	.word	0x00003f51

000016b8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    16b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    16bc:	4b37      	ldr	r3, [pc, #220]	; (179c <pm_system_suspend+0xe4>)
    16be:	4c38      	ldr	r4, [pc, #224]	; (17a0 <pm_system_suspend+0xe8>)
    16c0:	7d1d      	ldrb	r5, [r3, #20]
{
    16c2:	b088      	sub	sp, #32
    16c4:	4680      	mov	r8, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    16c6:	4628      	mov	r0, r5
    16c8:	f7ff ff96 	bl	15f8 <atomic_test_and_set_bit.constprop.0>
    16cc:	b960      	cbnz	r0, 16e8 <pm_system_suspend+0x30>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    16ce:	466f      	mov	r7, sp
    16d0:	4642      	mov	r2, r8
    16d2:	4629      	mov	r1, r5
    16d4:	4638      	mov	r0, r7
    16d6:	f002 fbfe 	bl	3ed6 <pm_policy_next_state>
    16da:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    16de:	260c      	movs	r6, #12
    16e0:	fb06 4605 	mla	r6, r6, r5, r4
    16e4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    16e8:	230c      	movs	r3, #12
    16ea:	436b      	muls	r3, r5
    16ec:	18e2      	adds	r2, r4, r3
    16ee:	5ce0      	ldrb	r0, [r4, r3]
    16f0:	096e      	lsrs	r6, r5, #5
    16f2:	f005 071f 	and.w	r7, r5, #31
    16f6:	2800      	cmp	r0, #0
    16f8:	d03b      	beq.n	1772 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    16fa:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    16fe:	d010      	beq.n	1722 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1700:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1704:	4827      	ldr	r0, [pc, #156]	; (17a4 <pm_system_suspend+0xec>)
    1706:	4a28      	ldr	r2, [pc, #160]	; (17a8 <pm_system_suspend+0xf0>)
    1708:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    170c:	2100      	movs	r1, #0
    170e:	2300      	movs	r3, #0
    1710:	fbee 010c 	umlal	r0, r1, lr, ip
    1714:	f7ff fcf4 	bl	1100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1718:	2101      	movs	r1, #1
    171a:	eba8 0000 	sub.w	r0, r8, r0
    171e:	f002 fe9a 	bl	4456 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1722:	f001 fee7 	bl	34f4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1726:	2001      	movs	r0, #1
    1728:	f7ff ff38 	bl	159c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    172c:	f3bf 8f5b 	dmb	ish
    1730:	4b1e      	ldr	r3, [pc, #120]	; (17ac <pm_system_suspend+0xf4>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1732:	2201      	movs	r2, #1
    1734:	40ba      	lsls	r2, r7
    1736:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    173a:	e853 1f00 	ldrex	r1, [r3]
    173e:	4311      	orrs	r1, r2
    1740:	e843 1000 	strex	r0, r1, [r3]
    1744:	2800      	cmp	r0, #0
    1746:	d1f8      	bne.n	173a <pm_system_suspend+0x82>
    1748:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    174c:	230c      	movs	r3, #12
    174e:	fb03 4405 	mla	r4, r3, r5, r4
    1752:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1756:	ab05      	add	r3, sp, #20
    1758:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    175c:	4a14      	ldr	r2, [pc, #80]	; (17b0 <pm_system_suspend+0xf8>)
    175e:	b11a      	cbz	r2, 1768 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    1760:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1764:	f002 fbe1 	bl	3f2a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1768:	f7ff ff62 	bl	1630 <pm_system_resume>
	k_sched_unlock();
    176c:	f002 f848 	bl	3800 <k_sched_unlock>
	bool ret = true;
    1770:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1772:	4a10      	ldr	r2, [pc, #64]	; (17b4 <pm_system_suspend+0xfc>)
    1774:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1778:	2301      	movs	r3, #1
    177a:	40bb      	lsls	r3, r7
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    177c:	43db      	mvns	r3, r3
    177e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    1782:	e856 2f00 	ldrex	r2, [r6]
    1786:	401a      	ands	r2, r3
    1788:	e846 2100 	strex	r1, r2, [r6]
    178c:	2900      	cmp	r1, #0
    178e:	d1f8      	bne.n	1782 <pm_system_suspend+0xca>
    1790:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1794:	b008      	add	sp, #32
    1796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    179a:	bf00      	nop
    179c:	20000260 	.word	0x20000260
    17a0:	200001ac 	.word	0x200001ac
    17a4:	000f423f 	.word	0x000f423f
    17a8:	000f4240 	.word	0x000f4240
    17ac:	200001a8 	.word	0x200001a8
    17b0:	00003f2b 	.word	0x00003f2b
    17b4:	200001b8 	.word	0x200001b8

000017b8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    17b8:	4901      	ldr	r1, [pc, #4]	; (17c0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    17ba:	2210      	movs	r2, #16
	str	r2, [r1]
    17bc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    17be:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    17c0:	e000ed10 	.word	0xe000ed10

000017c4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    17c4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    17c6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    17c8:	f380 8811 	msr	BASEPRI, r0
	isb
    17cc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    17d0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    17d4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    17d6:	b662      	cpsie	i
	isb
    17d8:	f3bf 8f6f 	isb	sy

	bx	lr
    17dc:	4770      	bx	lr
    17de:	bf00      	nop

000017e0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    17e0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    17e2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    17e4:	f381 8811 	msr	BASEPRI, r1

	wfe
    17e8:	bf20      	wfe

	msr	BASEPRI, r0
    17ea:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    17ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    17f0:	4770      	bx	lr
    17f2:	bf00      	nop

000017f4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    17f4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    17f6:	2b00      	cmp	r3, #0
    17f8:	db08      	blt.n	180c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17fa:	2201      	movs	r2, #1
    17fc:	f000 001f 	and.w	r0, r0, #31
    1800:	fa02 f000 	lsl.w	r0, r2, r0
    1804:	095b      	lsrs	r3, r3, #5
    1806:	4a02      	ldr	r2, [pc, #8]	; (1810 <arch_irq_enable+0x1c>)
    1808:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    180c:	4770      	bx	lr
    180e:	bf00      	nop
    1810:	e000e100 	.word	0xe000e100

00001814 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1814:	4b05      	ldr	r3, [pc, #20]	; (182c <arch_irq_is_enabled+0x18>)
    1816:	0942      	lsrs	r2, r0, #5
    1818:	f000 001f 	and.w	r0, r0, #31
    181c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1820:	2301      	movs	r3, #1
    1822:	fa03 f000 	lsl.w	r0, r3, r0
}
    1826:	4010      	ands	r0, r2
    1828:	4770      	bx	lr
    182a:	bf00      	nop
    182c:	e000e100 	.word	0xe000e100

00001830 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1830:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1832:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1834:	bfa8      	it	ge
    1836:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    183a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    183e:	bfb8      	it	lt
    1840:	4b06      	ldrlt	r3, [pc, #24]	; (185c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1842:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1846:	bfac      	ite	ge
    1848:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    184c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1850:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1852:	bfb4      	ite	lt
    1854:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1856:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    185a:	4770      	bx	lr
    185c:	e000ed14 	.word	0xe000ed14

00001860 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1860:	bf30      	wfi
    b z_SysNmiOnReset
    1862:	f7ff bffd 	b.w	1860 <z_SysNmiOnReset>
    1866:	bf00      	nop

00001868 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1868:	4a0f      	ldr	r2, [pc, #60]	; (18a8 <z_arm_prep_c+0x40>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    186a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    186c:	4b0f      	ldr	r3, [pc, #60]	; (18ac <z_arm_prep_c+0x44>)
    186e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1872:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1874:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1878:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    187c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1880:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1888:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    188c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1890:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    1894:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1898:	f001 fc6c 	bl	3174 <z_bss_zero>
	z_data_copy();
    189c:	f002 f8d2 	bl	3a44 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    18a0:	f000 f9ca 	bl	1c38 <z_arm_interrupt_init>
	z_cstart();
    18a4:	f001 fc70 	bl	3188 <z_cstart>
    18a8:	00001000 	.word	0x00001000
    18ac:	e000ed00 	.word	0xe000ed00

000018b0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    18b0:	4a09      	ldr	r2, [pc, #36]	; (18d8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    18b2:	490a      	ldr	r1, [pc, #40]	; (18dc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    18b4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    18b6:	6809      	ldr	r1, [r1, #0]
    18b8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18ba:	4909      	ldr	r1, [pc, #36]	; (18e0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    18bc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18be:	684b      	ldr	r3, [r1, #4]
    18c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    18c4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    18c6:	2300      	movs	r3, #0
    18c8:	f383 8811 	msr	BASEPRI, r3
    18cc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    18d0:	6893      	ldr	r3, [r2, #8]
}
    18d2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    18d4:	4770      	bx	lr
    18d6:	bf00      	nop
    18d8:	20000260 	.word	0x20000260
    18dc:	00004764 	.word	0x00004764
    18e0:	e000ed00 	.word	0xe000ed00

000018e4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    18e4:	4912      	ldr	r1, [pc, #72]	; (1930 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    18e6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    18e8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    18ec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    18ee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    18f2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    18f6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    18f8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    18fc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1900:	4f0c      	ldr	r7, [pc, #48]	; (1934 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1902:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1906:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1908:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    190a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    190c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    190e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1910:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1912:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1916:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1918:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    191a:	f000 f9cf 	bl	1cbc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    191e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1922:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1926:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    192a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    192e:	4770      	bx	lr
    ldr r1, =_kernel
    1930:	20000260 	.word	0x20000260
    ldr v4, =_SCS_ICSR
    1934:	e000ed04 	.word	0xe000ed04

00001938 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1938:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    193c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    193e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1942:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1946:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1948:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    194c:	2902      	cmp	r1, #2
    beq _oops
    194e:	d0ff      	beq.n	1950 <_oops>

00001950 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1950:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1952:	f002 fac7 	bl	3ee4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1956:	bd01      	pop	{r0, pc}

00001958 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1958:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    195c:	9b00      	ldr	r3, [sp, #0]
    195e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1962:	490a      	ldr	r1, [pc, #40]	; (198c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1964:	9b01      	ldr	r3, [sp, #4]
    1966:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    196a:	9b02      	ldr	r3, [sp, #8]
    196c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1970:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1978:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    197c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1980:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1982:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1984:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1986:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	00003ec1 	.word	0x00003ec1

00001990 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1990:	4a09      	ldr	r2, [pc, #36]	; (19b8 <z_check_thread_stack_fail+0x28>)
{
    1992:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1994:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1996:	b170      	cbz	r0, 19b6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1998:	f113 0f16 	cmn.w	r3, #22
    199c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    199e:	d005      	beq.n	19ac <z_check_thread_stack_fail+0x1c>
    19a0:	f1a0 0220 	sub.w	r2, r0, #32
    19a4:	429a      	cmp	r2, r3
    19a6:	d805      	bhi.n	19b4 <z_check_thread_stack_fail+0x24>
    19a8:	4283      	cmp	r3, r0
    19aa:	d203      	bcs.n	19b4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    19ac:	4281      	cmp	r1, r0
    19ae:	bf28      	it	cs
    19b0:	2000      	movcs	r0, #0
    19b2:	4770      	bx	lr
    19b4:	2000      	movs	r0, #0
}
    19b6:	4770      	bx	lr
    19b8:	20000260 	.word	0x20000260

000019bc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    19bc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    19be:	4b09      	ldr	r3, [pc, #36]	; (19e4 <arch_switch_to_main_thread+0x28>)
    19c0:	6098      	str	r0, [r3, #8]
{
    19c2:	460d      	mov	r5, r1
    19c4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    19c6:	f000 f979 	bl	1cbc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    19ca:	4620      	mov	r0, r4
    19cc:	f385 8809 	msr	PSP, r5
    19d0:	2100      	movs	r1, #0
    19d2:	b663      	cpsie	if
    19d4:	f381 8811 	msr	BASEPRI, r1
    19d8:	f3bf 8f6f 	isb	sy
    19dc:	2200      	movs	r2, #0
    19de:	2300      	movs	r3, #0
    19e0:	f002 fa6e 	bl	3ec0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    19e4:	20000260 	.word	0x20000260

000019e8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    19e8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    19ea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    19ec:	4a0b      	ldr	r2, [pc, #44]	; (1a1c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    19ee:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    19f0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    19f2:	bf1e      	ittt	ne
	movne	r1, #0
    19f4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    19f6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    19f8:	f002 fc5e 	blne	42b8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    19fc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    19fe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1a02:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1a06:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1a0a:	4905      	ldr	r1, [pc, #20]	; (1a20 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1a0c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1a0e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1a10:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1a12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1a16:	4903      	ldr	r1, [pc, #12]	; (1a24 <_isr_wrapper+0x3c>)
	bx r1
    1a18:	4708      	bx	r1
    1a1a:	0000      	.short	0x0000
	ldr r2, =_kernel
    1a1c:	20000260 	.word	0x20000260
	ldr r1, =_sw_isr_table
    1a20:	00004528 	.word	0x00004528
	ldr r1, =z_arm_int_exit
    1a24:	00001a29 	.word	0x00001a29

00001a28 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1a2a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1a2c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1a2e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1a30:	d003      	beq.n	1a3a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1a32:	4903      	ldr	r1, [pc, #12]	; (1a40 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1a38:	600a      	str	r2, [r1, #0]

00001a3a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1a3a:	4770      	bx	lr
	ldr r3, =_kernel
    1a3c:	20000260 	.word	0x20000260
	ldr r1, =_SCS_ICSR
    1a40:	e000ed04 	.word	0xe000ed04

00001a44 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1a44:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1a46:	4b19      	ldr	r3, [pc, #100]	; (1aac <mem_manage_fault+0x68>)
{
    1a48:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1a50:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1a52:	0790      	lsls	r0, r2, #30
    1a54:	d519      	bpl.n	1a8a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1a56:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a5a:	0612      	lsls	r2, r2, #24
    1a5c:	d515      	bpl.n	1a8a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1a5e:	b119      	cbz	r1, 1a68 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1a66:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a6e:	06d1      	lsls	r1, r2, #27
    1a70:	d40e      	bmi.n	1a90 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1a74:	079a      	lsls	r2, r3, #30
    1a76:	d40b      	bmi.n	1a90 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1a78:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1a7a:	4a0c      	ldr	r2, [pc, #48]	; (1aac <mem_manage_fault+0x68>)
    1a7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a7e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1a82:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1a84:	2300      	movs	r3, #0
    1a86:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1a88:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1a8a:	f06f 0015 	mvn.w	r0, #21
    1a8e:	e7eb      	b.n	1a68 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1a90:	4b06      	ldr	r3, [pc, #24]	; (1aac <mem_manage_fault+0x68>)
    1a92:	685b      	ldr	r3, [r3, #4]
    1a94:	051b      	lsls	r3, r3, #20
    1a96:	d5ef      	bpl.n	1a78 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1a98:	4629      	mov	r1, r5
    1a9a:	f7ff ff79 	bl	1990 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d0ea      	beq.n	1a78 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1aa2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1aa6:	2002      	movs	r0, #2
    1aa8:	e7e7      	b.n	1a7a <mem_manage_fault+0x36>
    1aaa:	bf00      	nop
    1aac:	e000ed00 	.word	0xe000ed00

00001ab0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1ab0:	4b0d      	ldr	r3, [pc, #52]	; (1ae8 <bus_fault.constprop.0+0x38>)
    1ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ab8:	0592      	lsls	r2, r2, #22
    1aba:	d508      	bpl.n	1ace <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ac0:	0412      	lsls	r2, r2, #16
    1ac2:	d504      	bpl.n	1ace <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1ac4:	b118      	cbz	r0, 1ace <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1acc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1ace:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <bus_fault.constprop.0+0x38>)
    1ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ad4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1ad6:	bf58      	it	pl
    1ad8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1adc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1ade:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1ae2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1ae4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1ae6:	4770      	bx	lr
    1ae8:	e000ed00 	.word	0xe000ed00

00001aec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1aec:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1aee:	4b48      	ldr	r3, [pc, #288]	; (1c10 <z_arm_fault+0x124>)
    1af0:	685b      	ldr	r3, [r3, #4]
{
    1af2:	b08a      	sub	sp, #40	; 0x28
    1af4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1afa:	2600      	movs	r6, #0
    1afc:	f386 8811 	msr	BASEPRI, r6
    1b00:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1b04:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1b08:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1b0c:	d111      	bne.n	1b32 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1b0e:	f002 010c 	and.w	r1, r2, #12
    1b12:	2908      	cmp	r1, #8
    1b14:	d00d      	beq.n	1b32 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1b16:	0711      	lsls	r1, r2, #28
    1b18:	d401      	bmi.n	1b1e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1b1a:	4605      	mov	r5, r0
			*nested_exc = true;
    1b1c:	2601      	movs	r6, #1
	*recoverable = false;
    1b1e:	2200      	movs	r2, #0
	switch (fault) {
    1b20:	3b03      	subs	r3, #3
	*recoverable = false;
    1b22:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1b26:	2b03      	cmp	r3, #3
    1b28:	d86b      	bhi.n	1c02 <z_arm_fault+0x116>
    1b2a:	e8df f003 	tbb	[pc, r3]
    1b2e:	5504      	.short	0x5504
    1b30:	5d59      	.short	0x5d59
		return NULL;
    1b32:	4635      	mov	r5, r6
    1b34:	e7f3      	b.n	1b1e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1b36:	4b36      	ldr	r3, [pc, #216]	; (1c10 <z_arm_fault+0x124>)
    1b38:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1b3a:	f014 0402 	ands.w	r4, r4, #2
    1b3e:	d160      	bne.n	1c02 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b42:	2a00      	cmp	r2, #0
    1b44:	db15      	blt.n	1b72 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b48:	0052      	lsls	r2, r2, #1
    1b4a:	d512      	bpl.n	1b72 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    1b4c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1b4e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1b52:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1b56:	4291      	cmp	r1, r2
    1b58:	d00a      	beq.n	1b70 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    1b5a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1b5e:	b30a      	cbz	r2, 1ba4 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1b60:	f10d 0207 	add.w	r2, sp, #7
    1b64:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1b66:	4628      	mov	r0, r5
    1b68:	f7ff ff6c 	bl	1a44 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1b6c:	4604      	mov	r4, r0
		break;
    1b6e:	e000      	b.n	1b72 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    1b70:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1b72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1b76:	b99b      	cbnz	r3, 1ba0 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1b78:	2220      	movs	r2, #32
    1b7a:	4629      	mov	r1, r5
    1b7c:	a802      	add	r0, sp, #8
    1b7e:	f002 f9c0 	bl	3f02 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b84:	2e00      	cmp	r6, #0
    1b86:	d03e      	beq.n	1c06 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1b88:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1b8c:	b922      	cbnz	r2, 1b98 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1b8e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1b92:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1b96:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1b98:	a902      	add	r1, sp, #8
    1b9a:	4620      	mov	r0, r4
    1b9c:	f002 f9a0 	bl	3ee0 <z_arm_fatal_error>
}
    1ba0:	b00a      	add	sp, #40	; 0x28
    1ba2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1ba4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1ba8:	b12a      	cbz	r2, 1bb6 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    1baa:	f10d 0107 	add.w	r1, sp, #7
    1bae:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1bb0:	f7ff ff7e 	bl	1ab0 <bus_fault.constprop.0>
    1bb4:	e7da      	b.n	1b6c <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    1bb6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1bb8:	b292      	uxth	r2, r2
    1bba:	2a00      	cmp	r2, #0
    1bbc:	d0d9      	beq.n	1b72 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bcc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1bd0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1bd4:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    1bd6:	e7cc      	b.n	1b72 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    1bd8:	f10d 0207 	add.w	r2, sp, #7
    1bdc:	2100      	movs	r1, #0
    1bde:	e7c2      	b.n	1b66 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    1be0:	f10d 0107 	add.w	r1, sp, #7
    1be4:	2000      	movs	r0, #0
    1be6:	e7e3      	b.n	1bb0 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1be8:	4b09      	ldr	r3, [pc, #36]	; (1c10 <z_arm_fault+0x124>)
    1bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bf8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1bfc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1c00:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c02:	2400      	movs	r4, #0
    1c04:	e7b5      	b.n	1b72 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c06:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1c0a:	f023 0301 	bic.w	r3, r3, #1
    1c0e:	e7c2      	b.n	1b96 <z_arm_fault+0xaa>
    1c10:	e000ed00 	.word	0xe000ed00

00001c14 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1c14:	4a02      	ldr	r2, [pc, #8]	; (1c20 <z_arm_fault_init+0xc>)
    1c16:	6953      	ldr	r3, [r2, #20]
    1c18:	f043 0310 	orr.w	r3, r3, #16
    1c1c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1c1e:	4770      	bx	lr
    1c20:	e000ed00 	.word	0xe000ed00

00001c24 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1c24:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1c28:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1c2c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1c2e:	4672      	mov	r2, lr
	bl z_arm_fault
    1c30:	f7ff ff5c 	bl	1aec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1c34:	bd01      	pop	{r0, pc}
    1c36:	bf00      	nop

00001c38 <z_arm_interrupt_init>:
    1c38:	4804      	ldr	r0, [pc, #16]	; (1c4c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1c3a:	2300      	movs	r3, #0
    1c3c:	2120      	movs	r1, #32
    1c3e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1c40:	3301      	adds	r3, #1
    1c42:	2b30      	cmp	r3, #48	; 0x30
    1c44:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1c48:	d1f9      	bne.n	1c3e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1c4a:	4770      	bx	lr
    1c4c:	e000e100 	.word	0xe000e100

00001c50 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1c50:	f002 fc28 	bl	44a4 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1c54:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1c56:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1c5a:	4808      	ldr	r0, [pc, #32]	; (1c7c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1c5c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1c60:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1c62:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1c66:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1c6a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1c6c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1c6e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1c72:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1c76:	f7ff fdf7 	bl	1868 <z_arm_prep_c>
    1c7a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1c7c:	20000820 	.word	0x20000820

00001c80 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1c80:	4b06      	ldr	r3, [pc, #24]	; (1c9c <z_impl_k_thread_abort+0x1c>)
    1c82:	689b      	ldr	r3, [r3, #8]
    1c84:	4283      	cmp	r3, r0
    1c86:	d107      	bne.n	1c98 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1c88:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1c8c:	b123      	cbz	r3, 1c98 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c8e:	4a04      	ldr	r2, [pc, #16]	; (1ca0 <z_impl_k_thread_abort+0x20>)
    1c90:	6853      	ldr	r3, [r2, #4]
    1c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1c96:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1c98:	f001 be82 	b.w	39a0 <z_thread_abort>
    1c9c:	20000260 	.word	0x20000260
    1ca0:	e000ed00 	.word	0xe000ed00

00001ca4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ca4:	4b02      	ldr	r3, [pc, #8]	; (1cb0 <z_arm_configure_static_mpu_regions+0xc>)
    1ca6:	4a03      	ldr	r2, [pc, #12]	; (1cb4 <z_arm_configure_static_mpu_regions+0x10>)
    1ca8:	4803      	ldr	r0, [pc, #12]	; (1cb8 <z_arm_configure_static_mpu_regions+0x14>)
    1caa:	2101      	movs	r1, #1
    1cac:	f000 b86e 	b.w	1d8c <arm_core_mpu_configure_static_mpu_regions>
    1cb0:	20040000 	.word	0x20040000
    1cb4:	20000000 	.word	0x20000000
    1cb8:	000046c8 	.word	0x000046c8

00001cbc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1cbc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1cbe:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1cc0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1cc2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1cc4:	4a04      	ldr	r2, [pc, #16]	; (1cd8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1cc6:	2120      	movs	r1, #32
    1cc8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1ccc:	4618      	mov	r0, r3
    1cce:	2101      	movs	r1, #1
    1cd0:	f000 b866 	b.w	1da0 <arm_core_mpu_configure_dynamic_mpu_regions>
    1cd4:	200001bc 	.word	0x200001bc
    1cd8:	150b0000 	.word	0x150b0000

00001cdc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1cde:	4f1f      	ldr	r7, [pc, #124]	; (1d5c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1ce0:	2600      	movs	r6, #0
    1ce2:	428e      	cmp	r6, r1
    1ce4:	db01      	blt.n	1cea <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1ce6:	4610      	mov	r0, r2
    1ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1cea:	6844      	ldr	r4, [r0, #4]
    1cec:	b39c      	cbz	r4, 1d56 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    1cee:	b153      	cbz	r3, 1d06 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1cf0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1cf4:	ea14 0f0c 	tst.w	r4, ip
    1cf8:	d118      	bne.n	1d2c <mpu_configure_regions+0x50>
		&&
    1cfa:	2c1f      	cmp	r4, #31
    1cfc:	d916      	bls.n	1d2c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1cfe:	6805      	ldr	r5, [r0, #0]
		&&
    1d00:	ea1c 0f05 	tst.w	ip, r5
    1d04:	d112      	bne.n	1d2c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1d06:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1d08:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1d0a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1d0e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1d10:	d90f      	bls.n	1d32 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    1d12:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1d16:	d80e      	bhi.n	1d36 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1d18:	3c01      	subs	r4, #1
    1d1a:	fab4 f484 	clz	r4, r4
    1d1e:	f1c4 041f 	rsb	r4, r4, #31
    1d22:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1d24:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1d26:	ea4c 0404 	orr.w	r4, ip, r4
    1d2a:	d906      	bls.n	1d3a <mpu_configure_regions+0x5e>
			return -EINVAL;
    1d2c:	f06f 0215 	mvn.w	r2, #21
    1d30:	e7d9      	b.n	1ce6 <mpu_configure_regions+0xa>
		return REGION_32B;
    1d32:	2408      	movs	r4, #8
    1d34:	e7f6      	b.n	1d24 <mpu_configure_regions+0x48>
		return REGION_4G;
    1d36:	243e      	movs	r4, #62	; 0x3e
    1d38:	e7f4      	b.n	1d24 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d3a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1d3e:	4315      	orrs	r5, r2
    1d40:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1d44:	f044 0401 	orr.w	r4, r4, #1
    1d48:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d4c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1d50:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1d52:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1d56:	3601      	adds	r6, #1
    1d58:	300c      	adds	r0, #12
    1d5a:	e7c2      	b.n	1ce2 <mpu_configure_regions+0x6>
    1d5c:	e000ed00 	.word	0xe000ed00

00001d60 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1d60:	4b04      	ldr	r3, [pc, #16]	; (1d74 <arm_core_mpu_enable+0x14>)
    1d62:	2205      	movs	r2, #5
    1d64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d6c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1d70:	4770      	bx	lr
    1d72:	bf00      	nop
    1d74:	e000ed00 	.word	0xe000ed00

00001d78 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1d78:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1d7c:	4b02      	ldr	r3, [pc, #8]	; (1d88 <arm_core_mpu_disable+0x10>)
    1d7e:	2200      	movs	r2, #0
    1d80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1d84:	4770      	bx	lr
    1d86:	bf00      	nop
    1d88:	e000ed00 	.word	0xe000ed00

00001d8c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1d8c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1d8e:	4c03      	ldr	r4, [pc, #12]	; (1d9c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1d90:	2301      	movs	r3, #1
    1d92:	7822      	ldrb	r2, [r4, #0]
    1d94:	f7ff ffa2 	bl	1cdc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1d98:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1d9a:	bd10      	pop	{r4, pc}
    1d9c:	20000298 	.word	0x20000298

00001da0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1da0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1da2:	4a09      	ldr	r2, [pc, #36]	; (1dc8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1da4:	2300      	movs	r3, #0
    1da6:	7812      	ldrb	r2, [r2, #0]
    1da8:	f7ff ff98 	bl	1cdc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1dac:	f110 0f16 	cmn.w	r0, #22
    1db0:	d002      	beq.n	1db8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1db2:	4a06      	ldr	r2, [pc, #24]	; (1dcc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1db4:	2807      	cmp	r0, #7
    1db6:	dd00      	ble.n	1dba <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1db8:	bd08      	pop	{r3, pc}
    1dba:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1dbe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1dc2:	3001      	adds	r0, #1
    1dc4:	e7f6      	b.n	1db4 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    1dc6:	bf00      	nop
    1dc8:	20000298 	.word	0x20000298
    1dcc:	e000ed00 	.word	0xe000ed00

00001dd0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1dd0:	4914      	ldr	r1, [pc, #80]	; (1e24 <z_arm_mpu_init+0x54>)
    1dd2:	6808      	ldr	r0, [r1, #0]
    1dd4:	2808      	cmp	r0, #8
{
    1dd6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1dd8:	d821      	bhi.n	1e1e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1dda:	f7ff ffcd 	bl	1d78 <arm_core_mpu_disable>
    1dde:	4c12      	ldr	r4, [pc, #72]	; (1e28 <z_arm_mpu_init+0x58>)
    1de0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1de2:	2200      	movs	r2, #0
    1de4:	4290      	cmp	r0, r2
    1de6:	f101 010c 	add.w	r1, r1, #12
    1dea:	d105      	bne.n	1df8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1dec:	4b0f      	ldr	r3, [pc, #60]	; (1e2c <z_arm_mpu_init+0x5c>)
    1dee:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1df0:	f7ff ffb6 	bl	1d60 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1df4:	2000      	movs	r0, #0
}
    1df6:	bd10      	pop	{r4, pc}
    1df8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1dfc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1e00:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1e04:	4313      	orrs	r3, r2
    1e06:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e0a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1e12:	f043 0301 	orr.w	r3, r3, #1
    1e16:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e1a:	3201      	adds	r2, #1
    1e1c:	e7e2      	b.n	1de4 <z_arm_mpu_init+0x14>
		return -1;
    1e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e22:	e7e8      	b.n	1df6 <z_arm_mpu_init+0x26>
    1e24:	000046d4 	.word	0x000046d4
    1e28:	e000ed00 	.word	0xe000ed00
    1e2c:	20000298 	.word	0x20000298

00001e30 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    1e30:	b510      	push	{r4, lr}
	__asm__ volatile(
    1e32:	f04f 0320 	mov.w	r3, #32
    1e36:	f3ef 8011 	mrs	r0, BASEPRI
    1e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    1e3e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1e42:	4a11      	ldr	r2, [pc, #68]	; (1e88 <nordicsemi_nrf52_init+0x58>)
    1e44:	2301      	movs	r3, #1
    1e46:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1e4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1e52:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    1e56:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    1e5a:	2c08      	cmp	r4, #8
    1e5c:	d108      	bne.n	1e70 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    1e5e:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    1e62:	2905      	cmp	r1, #5
    1e64:	d804      	bhi.n	1e70 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    1e66:	4c09      	ldr	r4, [pc, #36]	; (1e8c <nordicsemi_nrf52_init+0x5c>)
    1e68:	5c61      	ldrb	r1, [r4, r1]
    1e6a:	b109      	cbz	r1, 1e70 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1e6c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    1e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e74:	2201      	movs	r2, #1
    1e76:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1e7a:	f380 8811 	msr	BASEPRI, r0
    1e7e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1e82:	2000      	movs	r0, #0
    1e84:	bd10      	pop	{r4, pc}
    1e86:	bf00      	nop
    1e88:	4001e000 	.word	0x4001e000
    1e8c:	0000478b 	.word	0x0000478b

00001e90 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1e90:	b120      	cbz	r0, 1e9c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1e92:	4b03      	ldr	r3, [pc, #12]	; (1ea0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1e94:	0180      	lsls	r0, r0, #6
    1e96:	f043 0301 	orr.w	r3, r3, #1
    1e9a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1e9c:	4770      	bx	lr
    1e9e:	bf00      	nop
    1ea0:	000046c0 	.word	0x000046c0

00001ea4 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    1ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ea8:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    1eac:	07db      	lsls	r3, r3, #31
    1eae:	d52e      	bpl.n	1f0e <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    1eb0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1eb4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    1eb8:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    1ebc:	2b07      	cmp	r3, #7
    1ebe:	d126      	bne.n	1f0e <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    1ec0:	4a14      	ldr	r2, [pc, #80]	; (1f14 <board_nrf52840dongle_nrf52840_init+0x70>)
    1ec2:	2301      	movs	r3, #1
    1ec4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    1ec8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d0fb      	beq.n	1ec8 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    1ed0:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    1ed4:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    1ed8:	f023 0307 	bic.w	r3, r3, #7
    1edc:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    1ee0:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1ee4:	2300      	movs	r3, #0
    1ee6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    1eea:	4a0a      	ldr	r2, [pc, #40]	; (1f14 <board_nrf52840dongle_nrf52840_init+0x70>)
    1eec:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d0fb      	beq.n	1eec <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    1ef4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1ef8:	4907      	ldr	r1, [pc, #28]	; (1f18 <board_nrf52840dongle_nrf52840_init+0x74>)
    1efa:	4b08      	ldr	r3, [pc, #32]	; (1f1c <board_nrf52840dongle_nrf52840_init+0x78>)
    1efc:	68ca      	ldr	r2, [r1, #12]
    1efe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1f02:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1f04:	60cb      	str	r3, [r1, #12]
    1f06:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1f0a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1f0c:	e7fd      	b.n	1f0a <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    1f0e:	2000      	movs	r0, #0
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop
    1f14:	4001e000 	.word	0x4001e000
    1f18:	e000ed00 	.word	0xe000ed00
    1f1c:	05fa0004 	.word	0x05fa0004

00001f20 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1f20:	4b08      	ldr	r3, [pc, #32]	; (1f44 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1f22:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1f24:	1ac3      	subs	r3, r0, r3
{
    1f26:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1f28:	4907      	ldr	r1, [pc, #28]	; (1f48 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1f2a:	109b      	asrs	r3, r3, #2
{
    1f2c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1f2e:	4359      	muls	r1, r3
    1f30:	4806      	ldr	r0, [pc, #24]	; (1f4c <onoff_stop+0x2c>)
    1f32:	2240      	movs	r2, #64	; 0x40
    1f34:	f002 f833 	bl	3f9e <stop>
	notify(mgr, res);
    1f38:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1f3a:	4601      	mov	r1, r0
	notify(mgr, res);
    1f3c:	4620      	mov	r0, r4
}
    1f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1f42:	4718      	bx	r3
    1f44:	200001d8 	.word	0x200001d8
    1f48:	b6db6db7 	.word	0xb6db6db7
    1f4c:	000044e0 	.word	0x000044e0

00001f50 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1f50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1f52:	4c0c      	ldr	r4, [pc, #48]	; (1f84 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f54:	4a0c      	ldr	r2, [pc, #48]	; (1f88 <onoff_start+0x38>)
    1f56:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1f58:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f5a:	9300      	str	r3, [sp, #0]
{
    1f5c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f5e:	460b      	mov	r3, r1
    1f60:	490a      	ldr	r1, [pc, #40]	; (1f8c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1f62:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f64:	4361      	muls	r1, r4
{
    1f66:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f68:	4809      	ldr	r0, [pc, #36]	; (1f90 <onoff_start+0x40>)
    1f6a:	f002 f844 	bl	3ff6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1f6e:	1e01      	subs	r1, r0, #0
    1f70:	da05      	bge.n	1f7e <onoff_start+0x2e>
		notify(mgr, err);
    1f72:	4630      	mov	r0, r6
    1f74:	462b      	mov	r3, r5
	}
}
    1f76:	b002      	add	sp, #8
    1f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1f7c:	4718      	bx	r3
}
    1f7e:	b002      	add	sp, #8
    1f80:	bd70      	pop	{r4, r5, r6, pc}
    1f82:	bf00      	nop
    1f84:	200001d8 	.word	0x200001d8
    1f88:	00004067 	.word	0x00004067
    1f8c:	b6db6db7 	.word	0xb6db6db7
    1f90:	000044e0 	.word	0x000044e0

00001f94 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f94:	2200      	movs	r2, #0
{
    1f96:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f98:	2101      	movs	r1, #1
{
    1f9a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f9c:	4610      	mov	r0, r2
    1f9e:	f7ff fc47 	bl	1830 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1fa2:	2000      	movs	r0, #0
    1fa4:	f7ff fc26 	bl	17f4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1fa8:	480f      	ldr	r0, [pc, #60]	; (1fe8 <clk_init+0x54>)
    1faa:	f000 fcbd 	bl	2928 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1fae:	4b0f      	ldr	r3, [pc, #60]	; (1fec <clk_init+0x58>)
    1fb0:	4298      	cmp	r0, r3
    1fb2:	d115      	bne.n	1fe0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1fb4:	f002 f8c7 	bl	4146 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1fb8:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1fba:	490d      	ldr	r1, [pc, #52]	; (1ff0 <clk_init+0x5c>)
    1fbc:	4630      	mov	r0, r6
    1fbe:	f001 ff23 	bl	3e08 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1fc2:	2800      	cmp	r0, #0
    1fc4:	db0b      	blt.n	1fde <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    1fc6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1fc8:	4909      	ldr	r1, [pc, #36]	; (1ff0 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1fca:	2501      	movs	r5, #1
    1fcc:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1fce:	f104 001c 	add.w	r0, r4, #28
    1fd2:	f001 ff19 	bl	3e08 <onoff_manager_init>
		if (err < 0) {
    1fd6:	2800      	cmp	r0, #0
    1fd8:	db01      	blt.n	1fde <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1fda:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1fdc:	2000      	movs	r0, #0
}
    1fde:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1fe0:	f06f 0004 	mvn.w	r0, #4
    1fe4:	e7fb      	b.n	1fde <clk_init+0x4a>
    1fe6:	bf00      	nop
    1fe8:	00002029 	.word	0x00002029
    1fec:	0bad0000 	.word	0x0bad0000
    1ff0:	0000471c 	.word	0x0000471c

00001ff4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1ff4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1ff6:	230c      	movs	r3, #12
    1ff8:	4809      	ldr	r0, [pc, #36]	; (2020 <clkstarted_handle.constprop.0+0x2c>)
    1ffa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1ffc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1ffe:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2000:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2004:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2006:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2008:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    200a:	4418      	add	r0, r3
    200c:	f001 ffb4 	bl	3f78 <set_on_state>
	if (callback) {
    2010:	b12d      	cbz	r5, 201e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2012:	4632      	mov	r2, r6
    2014:	462b      	mov	r3, r5
    2016:	4803      	ldr	r0, [pc, #12]	; (2024 <clkstarted_handle.constprop.0+0x30>)
}
    2018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    201c:	4718      	bx	r3
}
    201e:	bd70      	pop	{r4, r5, r6, pc}
    2020:	200001d8 	.word	0x200001d8
    2024:	000044e0 	.word	0x000044e0

00002028 <clock_event_handler>:
	switch (event) {
    2028:	b110      	cbz	r0, 2030 <clock_event_handler+0x8>
    202a:	2801      	cmp	r0, #1
    202c:	d004      	beq.n	2038 <clock_event_handler+0x10>
    202e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2030:	4b03      	ldr	r3, [pc, #12]	; (2040 <clock_event_handler+0x18>)
    2032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2034:	075b      	lsls	r3, r3, #29
    2036:	d101      	bne.n	203c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2038:	f7ff bfdc 	b.w	1ff4 <clkstarted_handle.constprop.0>
}
    203c:	4770      	bx	lr
    203e:	bf00      	nop
    2040:	200001d8 	.word	0x200001d8

00002044 <generic_hfclk_start>:
{
    2044:	b508      	push	{r3, lr}
	__asm__ volatile(
    2046:	f04f 0320 	mov.w	r3, #32
    204a:	f3ef 8111 	mrs	r1, BASEPRI
    204e:	f383 8812 	msr	BASEPRI_MAX, r3
    2052:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2056:	4a12      	ldr	r2, [pc, #72]	; (20a0 <generic_hfclk_start+0x5c>)
    2058:	6813      	ldr	r3, [r2, #0]
    205a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    205e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2062:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2064:	d00c      	beq.n	2080 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    206a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    206e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2072:	f013 0301 	ands.w	r3, r3, #1
    2076:	d003      	beq.n	2080 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2078:	480a      	ldr	r0, [pc, #40]	; (20a4 <generic_hfclk_start+0x60>)
    207a:	f001 ff7d 	bl	3f78 <set_on_state>
			already_started = true;
    207e:	2301      	movs	r3, #1
	__asm__ volatile(
    2080:	f381 8811 	msr	BASEPRI, r1
    2084:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2088:	b123      	cbz	r3, 2094 <generic_hfclk_start+0x50>
}
    208a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    208e:	2000      	movs	r0, #0
    2090:	f7ff bfb0 	b.w	1ff4 <clkstarted_handle.constprop.0>
}
    2094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2098:	2001      	movs	r0, #1
    209a:	f002 b85e 	b.w	415a <nrfx_clock_start>
    209e:	bf00      	nop
    20a0:	20000228 	.word	0x20000228
    20a4:	20000218 	.word	0x20000218

000020a8 <api_blocking_start>:
{
    20a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    20aa:	2200      	movs	r2, #0
    20ac:	2301      	movs	r3, #1
    20ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    20b2:	4a09      	ldr	r2, [pc, #36]	; (20d8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    20b4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    20b8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    20ba:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    20be:	f001 ffcb 	bl	4058 <api_start>
	if (err < 0) {
    20c2:	2800      	cmp	r0, #0
    20c4:	db05      	blt.n	20d2 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    20c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    20ca:	2300      	movs	r3, #0
    20cc:	4668      	mov	r0, sp
    20ce:	f001 f991 	bl	33f4 <z_impl_k_sem_take>
}
    20d2:	b005      	add	sp, #20
    20d4:	f85d fb04 	ldr.w	pc, [sp], #4
    20d8:	00004085 	.word	0x00004085

000020dc <generic_hfclk_stop>:
    20dc:	4b09      	ldr	r3, [pc, #36]	; (2104 <generic_hfclk_stop+0x28>)
    20de:	f3bf 8f5b 	dmb	ish
    20e2:	e853 2f00 	ldrex	r2, [r3]
    20e6:	f022 0102 	bic.w	r1, r2, #2
    20ea:	e843 1000 	strex	r0, r1, [r3]
    20ee:	2800      	cmp	r0, #0
    20f0:	d1f7      	bne.n	20e2 <generic_hfclk_stop+0x6>
    20f2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    20f6:	07d3      	lsls	r3, r2, #31
    20f8:	d402      	bmi.n	2100 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    20fa:	2001      	movs	r0, #1
    20fc:	f000 bc24 	b.w	2948 <nrfx_clock_stop>
}
    2100:	4770      	bx	lr
    2102:	bf00      	nop
    2104:	20000228 	.word	0x20000228

00002108 <z_nrf_clock_control_lf_on>:
{
    2108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    210c:	4939      	ldr	r1, [pc, #228]	; (21f4 <z_nrf_clock_control_lf_on+0xec>)
    210e:	f3bf 8f5b 	dmb	ish
    2112:	4607      	mov	r7, r0
    2114:	2201      	movs	r2, #1
    2116:	e851 3f00 	ldrex	r3, [r1]
    211a:	e841 2000 	strex	r0, r2, [r1]
    211e:	2800      	cmp	r0, #0
    2120:	d1f9      	bne.n	2116 <z_nrf_clock_control_lf_on+0xe>
    2122:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2126:	b933      	cbnz	r3, 2136 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2128:	4933      	ldr	r1, [pc, #204]	; (21f8 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    212a:	4834      	ldr	r0, [pc, #208]	; (21fc <z_nrf_clock_control_lf_on+0xf4>)
    212c:	604b      	str	r3, [r1, #4]
    212e:	60cb      	str	r3, [r1, #12]
    2130:	608a      	str	r2, [r1, #8]
    2132:	f001 fe7c 	bl	3e2e <onoff_request>
	switch (start_mode) {
    2136:	1e7b      	subs	r3, r7, #1
    2138:	2b01      	cmp	r3, #1
    213a:	d82f      	bhi.n	219c <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    213c:	2f01      	cmp	r7, #1
    213e:	d107      	bne.n	2150 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2144:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2148:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    214c:	2b01      	cmp	r3, #1
    214e:	d025      	beq.n	219c <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2150:	f002 f8ac 	bl	42ac <k_is_in_isr>
    2154:	4604      	mov	r4, r0
    2156:	b918      	cbnz	r0, 2160 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2158:	4b29      	ldr	r3, [pc, #164]	; (2200 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    215a:	781b      	ldrb	r3, [r3, #0]
    215c:	2b00      	cmp	r3, #0
    215e:	d141      	bne.n	21e4 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2160:	f04f 0320 	mov.w	r3, #32
    2164:	f3ef 8611 	mrs	r6, BASEPRI
    2168:	f383 8812 	msr	BASEPRI_MAX, r3
    216c:	f3bf 8f6f 	isb	sy
    2170:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2172:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2204 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2176:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    217a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    217e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2182:	03d2      	lsls	r2, r2, #15
    2184:	d50c      	bpl.n	21a0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2186:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    218a:	2b01      	cmp	r3, #1
    218c:	d001      	beq.n	2192 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    218e:	2f01      	cmp	r7, #1
    2190:	d106      	bne.n	21a0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2192:	b30c      	cbz	r4, 21d8 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2194:	f386 8811 	msr	BASEPRI, r6
    2198:	f3bf 8f6f 	isb	sy
}
    219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    21a0:	b1ac      	cbz	r4, 21ce <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    21a2:	4630      	mov	r0, r6
    21a4:	f7ff fb1c 	bl	17e0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    21a8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    21ac:	2b00      	cmp	r3, #0
    21ae:	d1e4      	bne.n	217a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    21b0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    21b4:	2a00      	cmp	r2, #0
    21b6:	d0e0      	beq.n	217a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21b8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    21bc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    21c0:	2301      	movs	r3, #1
    21c2:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    21c6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21ca:	60ab      	str	r3, [r5, #8]
}
    21cc:	e7d5      	b.n	217a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    21ce:	2100      	movs	r1, #0
    21d0:	2021      	movs	r0, #33	; 0x21
    21d2:	f001 fbc5 	bl	3960 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    21d6:	e7e7      	b.n	21a8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    21d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21dc:	2202      	movs	r2, #2
    21de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    21e2:	e7db      	b.n	219c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    21e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21e8:	2202      	movs	r2, #2
    21ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    21ee:	4606      	mov	r6, r0
}
    21f0:	e7bf      	b.n	2172 <z_nrf_clock_control_lf_on+0x6a>
    21f2:	bf00      	nop
    21f4:	2000022c 	.word	0x2000022c
    21f8:	200001c8 	.word	0x200001c8
    21fc:	200001f4 	.word	0x200001f4
    2200:	20000299 	.word	0x20000299
    2204:	e000e100 	.word	0xe000e100

00002208 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2208:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    220a:	6840      	ldr	r0, [r0, #4]
    220c:	7a04      	ldrb	r4, [r0, #8]
    220e:	f001 011f 	and.w	r1, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2212:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
    2216:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2218:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    221c:	f04f 0500 	mov.w	r5, #0
    2220:	d104      	bne.n	222c <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2222:	4620      	mov	r0, r4
    2224:	f000 fe3e 	bl	2ea4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2228:	2000      	movs	r0, #0
    222a:	e02d      	b.n	2288 <gpio_nrfx_pin_interrupt_configure+0x80>
	if (mode == GPIO_INT_MODE_LEVEL) {
    222c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2230:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2234:	d12a      	bne.n	228c <gpio_nrfx_pin_interrupt_configure+0x84>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    223a:	bf0c      	ite	eq
    223c:	2304      	moveq	r3, #4
    223e:	2305      	movne	r3, #5
	if (IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_GPIOTE) &&
    2240:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2244:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_GPIOTE) &&
    2248:	d12c      	bne.n	22a4 <gpio_nrfx_pin_interrupt_configure+0x9c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    224a:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    224c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    224e:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    2252:	4a1d      	ldr	r2, [pc, #116]	; (22c8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2254:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2258:	bf18      	it	ne
    225a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2262:	07db      	lsls	r3, r3, #31
    2264:	d41e      	bmi.n	22a4 <gpio_nrfx_pin_interrupt_configure+0x9c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2266:	f10d 0507 	add.w	r5, sp, #7
    226a:	4629      	mov	r1, r5
    226c:	4620      	mov	r0, r4
    226e:	f000 fd7d 	bl	2d6c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2272:	4b16      	ldr	r3, [pc, #88]	; (22cc <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2274:	4298      	cmp	r0, r3
    2276:	d114      	bne.n	22a2 <gpio_nrfx_pin_interrupt_configure+0x9a>
			err = nrfx_gpiote_channel_alloc(&ch);
    2278:	4628      	mov	r0, r5
    227a:	f000 fdc5 	bl	2e08 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    227e:	4b14      	ldr	r3, [pc, #80]	; (22d0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2280:	4298      	cmp	r0, r3
    2282:	d00e      	beq.n	22a2 <gpio_nrfx_pin_interrupt_configure+0x9a>
				return -ENOMEM;
    2284:	f06f 000b 	mvn.w	r0, #11
}
    2288:	b005      	add	sp, #20
    228a:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    228c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2290:	d005      	beq.n	229e <gpio_nrfx_pin_interrupt_configure+0x96>
    2292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2296:	bf0c      	ite	eq
    2298:	2302      	moveq	r3, #2
    229a:	2301      	movne	r3, #1
    229c:	e7d0      	b.n	2240 <gpio_nrfx_pin_interrupt_configure+0x38>
    229e:	2303      	movs	r3, #3
    22a0:	e7ce      	b.n	2240 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    22a2:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    22a4:	2300      	movs	r3, #0
    22a6:	4619      	mov	r1, r3
    22a8:	aa02      	add	r2, sp, #8
    22aa:	4620      	mov	r0, r4
    22ac:	f000 fc38 	bl	2b20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    22b0:	4b07      	ldr	r3, [pc, #28]	; (22d0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    22b2:	4298      	cmp	r0, r3
    22b4:	d104      	bne.n	22c0 <gpio_nrfx_pin_interrupt_configure+0xb8>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    22b6:	2101      	movs	r1, #1
    22b8:	4620      	mov	r0, r4
    22ba:	f000 fdab 	bl	2e14 <nrfx_gpiote_trigger_enable>
    22be:	e7b3      	b.n	2228 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    22c0:	f06f 0004 	mvn.w	r0, #4
    22c4:	e7e0      	b.n	2288 <gpio_nrfx_pin_interrupt_configure+0x80>
    22c6:	bf00      	nop
    22c8:	50000300 	.word	0x50000300
    22cc:	0bad0004 	.word	0x0bad0004
    22d0:	0bad0000 	.word	0x0bad0000

000022d4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    22d4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    22d6:	f000 fd87 	bl	2de8 <nrfx_gpiote_is_init>
    22da:	4604      	mov	r4, r0
    22dc:	b968      	cbnz	r0, 22fa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    22de:	f000 fd5b 	bl	2d98 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    22e2:	4b08      	ldr	r3, [pc, #32]	; (2304 <gpio_nrfx_init+0x30>)
    22e4:	4298      	cmp	r0, r3
    22e6:	d10a      	bne.n	22fe <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    22e8:	4807      	ldr	r0, [pc, #28]	; (2308 <gpio_nrfx_init+0x34>)
    22ea:	4621      	mov	r1, r4
    22ec:	f000 fd38 	bl	2d60 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    22f0:	4622      	mov	r2, r4
    22f2:	2105      	movs	r1, #5
    22f4:	2006      	movs	r0, #6
    22f6:	f7ff fa9b 	bl	1830 <z_arm_irq_priority_set>
		return 0;
    22fa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    22fc:	bd10      	pop	{r4, pc}
		return -EIO;
    22fe:	f06f 0004 	mvn.w	r0, #4
    2302:	e7fb      	b.n	22fc <gpio_nrfx_init+0x28>
    2304:	0bad0000 	.word	0x0bad0000
    2308:	0000230d 	.word	0x0000230d

0000230c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    230c:	0942      	lsrs	r2, r0, #5
{
    230e:	b570      	push	{r4, r5, r6, lr}
    2310:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2312:	d002      	beq.n	231a <nrfx_gpio_handler+0xe>
    2314:	2a01      	cmp	r2, #1
    2316:	d015      	beq.n	2344 <nrfx_gpio_handler+0x38>
}
    2318:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    231a:	4e0b      	ldr	r6, [pc, #44]	; (2348 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    231c:	6932      	ldr	r2, [r6, #16]
    231e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2320:	2900      	cmp	r1, #0
    2322:	d0f9      	beq.n	2318 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2324:	f003 031f 	and.w	r3, r3, #31
    2328:	2501      	movs	r5, #1
    232a:	680c      	ldr	r4, [r1, #0]
    232c:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    232e:	688a      	ldr	r2, [r1, #8]
    2330:	402a      	ands	r2, r5
    2332:	d002      	beq.n	233a <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2334:	684b      	ldr	r3, [r1, #4]
    2336:	4630      	mov	r0, r6
    2338:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    233a:	2c00      	cmp	r4, #0
    233c:	d0ec      	beq.n	2318 <nrfx_gpio_handler+0xc>
    233e:	4621      	mov	r1, r4
    2340:	6824      	ldr	r4, [r4, #0]
    2342:	e7f4      	b.n	232e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2344:	4e01      	ldr	r6, [pc, #4]	; (234c <nrfx_gpio_handler+0x40>)
    2346:	e7e9      	b.n	231c <nrfx_gpio_handler+0x10>
    2348:	000044f8 	.word	0x000044f8
    234c:	00004510 	.word	0x00004510

00002350 <gpio_nrfx_pin_configure>:
{
    2350:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
    2352:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2354:	7a3b      	ldrb	r3, [r7, #8]
    2356:	f001 051f 	and.w	r5, r1, #31
{
    235a:	b085      	sub	sp, #20
    235c:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    235e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2362:	4614      	mov	r4, r2
    2364:	b9c2      	cbnz	r2, 2398 <gpio_nrfx_pin_configure+0x48>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2366:	a902      	add	r1, sp, #8
    2368:	4628      	mov	r0, r5
    236a:	f000 fcff 	bl	2d6c <nrfx_gpiote_channel_get>
    236e:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2370:	4628      	mov	r0, r5
    2372:	f000 fdbf 	bl	2ef4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2376:	4b41      	ldr	r3, [pc, #260]	; (247c <gpio_nrfx_pin_configure+0x12c>)
    2378:	4298      	cmp	r0, r3
    237a:	d003      	beq.n	2384 <gpio_nrfx_pin_configure+0x34>
		return -EIO;
    237c:	f06f 0004 	mvn.w	r0, #4
}
    2380:	b005      	add	sp, #20
    2382:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (free_ch) {
    2384:	4284      	cmp	r4, r0
    2386:	d105      	bne.n	2394 <gpio_nrfx_pin_configure+0x44>
		err = nrfx_gpiote_channel_free(ch);
    2388:	f89d 0008 	ldrb.w	r0, [sp, #8]
    238c:	f000 fd36 	bl	2dfc <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2390:	42a0      	cmp	r0, r4
    2392:	d1f3      	bne.n	237c <gpio_nrfx_pin_configure+0x2c>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2394:	2000      	movs	r0, #0
    2396:	e7f3      	b.n	2380 <gpio_nrfx_pin_configure+0x30>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2398:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    239a:	4619      	mov	r1, r3
    239c:	aa02      	add	r2, sp, #8
    239e:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    23a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    23a4:	f000 fbbc 	bl	2b20 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    23a8:	4b34      	ldr	r3, [pc, #208]	; (247c <gpio_nrfx_pin_configure+0x12c>)
    23aa:	4298      	cmp	r0, r3
    23ac:	d002      	beq.n	23b4 <gpio_nrfx_pin_configure+0x64>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    23ae:	f06f 0015 	mvn.w	r0, #21
    23b2:	e7e5      	b.n	2380 <gpio_nrfx_pin_configure+0x30>
	if (flags & GPIO_OUTPUT) {
    23b4:	05a3      	lsls	r3, r4, #22
    23b6:	d54e      	bpl.n	2456 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    23b8:	4b31      	ldr	r3, [pc, #196]	; (2480 <gpio_nrfx_pin_configure+0x130>)
    23ba:	4a32      	ldr	r2, [pc, #200]	; (2484 <gpio_nrfx_pin_configure+0x134>)
    23bc:	4023      	ands	r3, r4
    23be:	4293      	cmp	r3, r2
    23c0:	d03a      	beq.n	2438 <gpio_nrfx_pin_configure+0xe8>
    23c2:	d80c      	bhi.n	23de <gpio_nrfx_pin_configure+0x8e>
    23c4:	2b06      	cmp	r3, #6
    23c6:	d014      	beq.n	23f2 <gpio_nrfx_pin_configure+0xa2>
    23c8:	d804      	bhi.n	23d4 <gpio_nrfx_pin_configure+0x84>
    23ca:	b193      	cbz	r3, 23f2 <gpio_nrfx_pin_configure+0xa2>
    23cc:	2b02      	cmp	r3, #2
    23ce:	d1ee      	bne.n	23ae <gpio_nrfx_pin_configure+0x5e>
    23d0:	2304      	movs	r3, #4
    23d2:	e00e      	b.n	23f2 <gpio_nrfx_pin_configure+0xa2>
    23d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    23d8:	d1e9      	bne.n	23ae <gpio_nrfx_pin_configure+0x5e>
		*drive = NRF_GPIO_PIN_H0S1;
    23da:	2301      	movs	r3, #1
    23dc:	e009      	b.n	23f2 <gpio_nrfx_pin_configure+0xa2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    23de:	4a2a      	ldr	r2, [pc, #168]	; (2488 <gpio_nrfx_pin_configure+0x138>)
    23e0:	4293      	cmp	r3, r2
    23e2:	d02b      	beq.n	243c <gpio_nrfx_pin_configure+0xec>
    23e4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    23e8:	d02a      	beq.n	2440 <gpio_nrfx_pin_configure+0xf0>
    23ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    23ee:	d1de      	bne.n	23ae <gpio_nrfx_pin_configure+0x5e>
		*drive = NRF_GPIO_PIN_S0H1;
    23f0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    23f2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    23f6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    23fa:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    23fe:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2400:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2404:	bf54      	ite	pl
    2406:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    240a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    240c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    240e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2412:	d517      	bpl.n	2444 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	2101      	movs	r1, #1
    2418:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    241c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2420:	2200      	movs	r2, #0
    2422:	a901      	add	r1, sp, #4
    2424:	4628      	mov	r0, r5
    2426:	f000 fc29 	bl	2c7c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    242a:	4b14      	ldr	r3, [pc, #80]	; (247c <gpio_nrfx_pin_configure+0x12c>)
    242c:	4298      	cmp	r0, r3
    242e:	bf14      	ite	ne
    2430:	f06f 0015 	mvnne.w	r0, #21
    2434:	2000      	moveq	r0, #0
    2436:	e7a3      	b.n	2380 <gpio_nrfx_pin_configure+0x30>
		*drive = NRF_GPIO_PIN_H0D1;
    2438:	2307      	movs	r3, #7
    243a:	e7da      	b.n	23f2 <gpio_nrfx_pin_configure+0xa2>
		*drive = NRF_GPIO_PIN_D0H1;
    243c:	2305      	movs	r3, #5
    243e:	e7d8      	b.n	23f2 <gpio_nrfx_pin_configure+0xa2>
		*drive = NRF_GPIO_PIN_H0H1;
    2440:	2303      	movs	r3, #3
    2442:	e7d6      	b.n	23f2 <gpio_nrfx_pin_configure+0xa2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2444:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2446:	bf41      	itttt	mi
    2448:	687b      	ldrmi	r3, [r7, #4]
    244a:	2101      	movmi	r1, #1
    244c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2450:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2454:	e7e4      	b.n	2420 <gpio_nrfx_pin_configure+0xd0>
	if (flags & GPIO_PULL_UP) {
    2456:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2458:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    245c:	bf54      	ite	pl
    245e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2462:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2464:	461a      	mov	r2, r3
    2466:	a901      	add	r1, sp, #4
    2468:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    246a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    246e:	f000 fb57 	bl	2b20 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2472:	4b02      	ldr	r3, [pc, #8]	; (247c <gpio_nrfx_pin_configure+0x12c>)
    2474:	4298      	cmp	r0, r3
    2476:	d08d      	beq.n	2394 <gpio_nrfx_pin_configure+0x44>
    2478:	e799      	b.n	23ae <gpio_nrfx_pin_configure+0x5e>
    247a:	bf00      	nop
    247c:	0bad0000 	.word	0x0bad0000
    2480:	00f00006 	.word	0x00f00006
    2484:	00100006 	.word	0x00100006
    2488:	00400002 	.word	0x00400002

0000248c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    248c:	4a04      	ldr	r2, [pc, #16]	; (24a0 <sys_clock_timeout_handler+0x14>)
    248e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2490:	1ac8      	subs	r0, r1, r3
    2492:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2496:	4403      	add	r3, r0
    2498:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    249a:	f001 bbb3 	b.w	3c04 <sys_clock_announce>
    249e:	bf00      	nop
    24a0:	20000254 	.word	0x20000254

000024a4 <sys_clock_driver_init>:
	k_spin_unlock(&lock, key);
	return ret;
}

static int sys_clock_driver_init(const struct device *dev)
{
    24a4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    24a6:	4c0f      	ldr	r4, [pc, #60]	; (24e4 <sys_clock_driver_init+0x40>)
    24a8:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    24aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    24ae:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    24b2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    24b6:	4b0c      	ldr	r3, [pc, #48]	; (24e8 <sys_clock_driver_init+0x44>)
    24b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    24c0:	2101      	movs	r1, #1
    24c2:	462a      	mov	r2, r5
    24c4:	2011      	movs	r0, #17
    24c6:	f7ff f9b3 	bl	1830 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    24ca:	2011      	movs	r0, #17
    24cc:	f7ff f992 	bl	17f4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    24d0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    24d2:	4a06      	ldr	r2, [pc, #24]	; (24ec <sys_clock_driver_init+0x48>)
    24d4:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    24d6:	2002      	movs	r0, #2
    24d8:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    24da:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    24dc:	f7ff fe14 	bl	2108 <z_nrf_clock_control_lf_on>

	return 0;
}
    24e0:	4628      	mov	r0, r5
    24e2:	bd38      	pop	{r3, r4, r5, pc}
    24e4:	40011000 	.word	0x40011000
    24e8:	e000e100 	.word	0xe000e100
    24ec:	20000250 	.word	0x20000250

000024f0 <set_absolute_alarm>:
{
    24f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24f4:	0086      	lsls	r6, r0, #2
    24f6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    24fa:	f100 0450 	add.w	r4, r0, #80	; 0x50
    24fe:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    2502:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2504:	b2a4      	uxth	r4, r4
    2506:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    250a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    250e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    2512:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2580 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2516:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    251a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    251e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    2520:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2524:	eba3 0309 	sub.w	r3, r3, r9
    2528:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    252c:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2530:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    2532:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    2536:	d102      	bne.n	253e <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    2538:	2013      	movs	r0, #19
    253a:	f001 ffaa 	bl	4492 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    253e:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    2542:	1aab      	subs	r3, r5, r2
    2544:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    2548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    254c:	bf88      	it	hi
    254e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2550:	2300      	movs	r3, #0
    2552:	6023      	str	r3, [r4, #0]
    2554:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2556:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    255a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    255e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    2562:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    2566:	4599      	cmp	r9, r3
    2568:	d006      	beq.n	2578 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    256a:	1aeb      	subs	r3, r5, r3
    256c:	3b02      	subs	r3, #2
    256e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2576:	d801      	bhi.n	257c <set_absolute_alarm+0x8c>
}
    2578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    257c:	462b      	mov	r3, r5
    257e:	e7cf      	b.n	2520 <set_absolute_alarm+0x30>
    2580:	40011000 	.word	0x40011000

00002584 <rtc_nrf_isr>:
{
    2584:	b570      	push	{r4, r5, r6, lr}
    2586:	4d15      	ldr	r5, [pc, #84]	; (25dc <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    2588:	4c15      	ldr	r4, [pc, #84]	; (25e0 <rtc_nrf_isr+0x5c>)
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    258a:	2600      	movs	r6, #0
    258c:	682b      	ldr	r3, [r5, #0]
    258e:	2000      	movs	r0, #0
    2590:	b106      	cbz	r6, 2594 <rtc_nrf_isr+0x10>
}
    2592:	bd70      	pop	{r4, r5, r6, pc}
    2594:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    2598:	03d2      	lsls	r2, r2, #15
    259a:	d5fa      	bpl.n	2592 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    259c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    25a0:	2a00      	cmp	r2, #0
    25a2:	d0f6      	beq.n	2592 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    25a4:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    25a8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    25ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    25b0:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    25b4:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    25b8:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    25bc:	1a72      	subs	r2, r6, r1
    25be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    25c2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    25c6:	bf88      	it	hi
    25c8:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    25ca:	2601      	movs	r6, #1
			if (handler) {
    25cc:	b11b      	cbz	r3, 25d6 <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    25ce:	686a      	ldr	r2, [r5, #4]
    25d0:	6028      	str	r0, [r5, #0]
    25d2:	4798      	blx	r3
    25d4:	e7da      	b.n	258c <rtc_nrf_isr+0x8>
    25d6:	602b      	str	r3, [r5, #0]
}
    25d8:	e7db      	b.n	2592 <rtc_nrf_isr+0xe>
    25da:	bf00      	nop
    25dc:	20000248 	.word	0x20000248
    25e0:	40011000 	.word	0x40011000

000025e4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    25e4:	4a13      	ldr	r2, [pc, #76]	; (2634 <sys_clock_set_timeout+0x50>)
    25e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    25ea:	bf14      	ite	ne
    25ec:	4603      	movne	r3, r0
    25ee:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    25f0:	3b01      	subs	r3, #1
    25f2:	2b00      	cmp	r3, #0
    25f4:	dd1c      	ble.n	2630 <sys_clock_set_timeout+0x4c>
    25f6:	4293      	cmp	r3, r2
    25f8:	bfa8      	it	ge
    25fa:	4613      	movge	r3, r2
    25fc:	4a0e      	ldr	r2, [pc, #56]	; (2638 <sys_clock_set_timeout+0x54>)
    25fe:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	uint32_t unannounced = counter_sub(counter(), last_count);
    2602:	4a0e      	ldr	r2, [pc, #56]	; (263c <sys_clock_set_timeout+0x58>)
    2604:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2606:	1a40      	subs	r0, r0, r1
		ticks = 0;
    2608:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    260c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    2610:	bf18      	it	ne
    2612:	2300      	movne	r3, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2614:	3201      	adds	r2, #1
    2616:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    2618:	4a09      	ldr	r2, [pc, #36]	; (2640 <sys_clock_set_timeout+0x5c>)
    261a:	480a      	ldr	r0, [pc, #40]	; (2644 <sys_clock_set_timeout+0x60>)
    261c:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    261e:	2000      	movs	r0, #0
    2620:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    2622:	4a04      	ldr	r2, [pc, #16]	; (2634 <sys_clock_set_timeout+0x50>)
    2624:	4293      	cmp	r3, r2
    2626:	bf94      	ite	ls
    2628:	18c9      	addls	r1, r1, r3
    262a:	1889      	addhi	r1, r1, r2
    262c:	f7ff bf60 	b.w	24f0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2630:	2300      	movs	r3, #0
    2632:	e7e3      	b.n	25fc <sys_clock_set_timeout+0x18>
    2634:	007fffff 	.word	0x007fffff
    2638:	40011000 	.word	0x40011000
    263c:	20000254 	.word	0x20000254
    2640:	20000248 	.word	0x20000248
    2644:	0000248d 	.word	0x0000248d

00002648 <sys_clock_elapsed>:
    2648:	4b04      	ldr	r3, [pc, #16]	; (265c <sys_clock_elapsed+0x14>)
    264a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    264e:	4b04      	ldr	r3, [pc, #16]	; (2660 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	1ac0      	subs	r0, r0, r3
}
    2654:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2658:	4770      	bx	lr
    265a:	bf00      	nop
    265c:	40011000 	.word	0x40011000
    2660:	20000254 	.word	0x20000254

00002664 <__NVIC_SystemReset>:
    2664:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2668:	4905      	ldr	r1, [pc, #20]	; (2680 <__NVIC_SystemReset+0x1c>)
    266a:	4b06      	ldr	r3, [pc, #24]	; (2684 <__NVIC_SystemReset+0x20>)
    266c:	68ca      	ldr	r2, [r1, #12]
    266e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2672:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2674:	60cb      	str	r3, [r1, #12]
    2676:	f3bf 8f4f 	dsb	sy
    __NOP();
    267a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    267c:	e7fd      	b.n	267a <__NVIC_SystemReset+0x16>
    267e:	bf00      	nop
    2680:	e000ed00 	.word	0xe000ed00
    2684:	05fa0004 	.word	0x05fa0004

00002688 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2688:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    268c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2690:	2a08      	cmp	r2, #8
    2692:	d106      	bne.n	26a2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2694:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    2698:	2b05      	cmp	r3, #5
    269a:	d802      	bhi.n	26a2 <nrf52_errata_103+0x1a>
    269c:	4a02      	ldr	r2, [pc, #8]	; (26a8 <nrf52_errata_103+0x20>)
    269e:	5cd0      	ldrb	r0, [r2, r3]
    26a0:	4770      	bx	lr
        return false;
    26a2:	2000      	movs	r0, #0
}
    26a4:	4770      	bx	lr
    26a6:	bf00      	nop
    26a8:	000047ab 	.word	0x000047ab

000026ac <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    26ac:	4a02      	ldr	r2, [pc, #8]	; (26b8 <nvmc_wait+0xc>)
    26ae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    26b2:	2b00      	cmp	r3, #0
    26b4:	d0fb      	beq.n	26ae <nvmc_wait+0x2>
}
    26b6:	4770      	bx	lr
    26b8:	4001e000 	.word	0x4001e000

000026bc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    26bc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    26be:	f001 fd36 	bl	412e <nrf52_errata_136>
    26c2:	b140      	cbz	r0, 26d6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    26c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26c8:	2200      	movs	r2, #0
    26ca:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    26ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    26d2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    26d6:	f001 fd2a 	bl	412e <nrf52_errata_136>
    26da:	2800      	cmp	r0, #0
    26dc:	d046      	beq.n	276c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    26de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    26e2:	4b65      	ldr	r3, [pc, #404]	; (2878 <SystemInit+0x1bc>)
    26e4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    26e8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    26ec:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    26f0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    26f4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    26f8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    26fc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2700:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2704:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2708:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    270c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2710:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2714:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2718:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    271c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2720:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2724:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2728:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    272c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2730:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2734:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2738:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    273c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2740:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2744:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2748:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    274c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2750:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2754:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2758:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    275c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2760:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2764:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2768:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    276c:	f7ff ff8c 	bl	2688 <nrf52_errata_103>
    2770:	b118      	cbz	r0, 277a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    2772:	4b42      	ldr	r3, [pc, #264]	; (287c <SystemInit+0x1c0>)
    2774:	4a42      	ldr	r2, [pc, #264]	; (2880 <SystemInit+0x1c4>)
    2776:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    277a:	f7ff ff85 	bl	2688 <nrf52_errata_103>
    277e:	b118      	cbz	r0, 2788 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2780:	4b40      	ldr	r3, [pc, #256]	; (2884 <SystemInit+0x1c8>)
    2782:	22fb      	movs	r2, #251	; 0xfb
    2784:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2788:	f7ff ff7e 	bl	2688 <nrf52_errata_103>
    278c:	b170      	cbz	r0, 27ac <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    278e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2796:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    279a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    279e:	f022 020f 	bic.w	r2, r2, #15
    27a2:	f003 030f 	and.w	r3, r3, #15
    27a6:	4313      	orrs	r3, r2
    27a8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    27ac:	f7ff ff6c 	bl	2688 <nrf52_errata_103>
    27b0:	b120      	cbz	r0, 27bc <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    27b2:	4b35      	ldr	r3, [pc, #212]	; (2888 <SystemInit+0x1cc>)
    27b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    27b8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    27bc:	f001 fcb7 	bl	412e <nrf52_errata_136>
    27c0:	b148      	cbz	r0, 27d6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    27c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    27ca:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    27cc:	bf44      	itt	mi
    27ce:	f06f 0201 	mvnmi.w	r2, #1
    27d2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    27d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    27da:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    27de:	2a08      	cmp	r2, #8
    27e0:	d10e      	bne.n	2800 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    27e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    27e6:	2b05      	cmp	r3, #5
    27e8:	d802      	bhi.n	27f0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    27ea:	4a28      	ldr	r2, [pc, #160]	; (288c <SystemInit+0x1d0>)
    27ec:	5cd3      	ldrb	r3, [r2, r3]
    27ee:	b13b      	cbz	r3, 2800 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    27f0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    27f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    27f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    27fc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    2800:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    2804:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    2808:	07db      	lsls	r3, r3, #31
    280a:	d514      	bpl.n	2836 <SystemInit+0x17a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    280c:	4820      	ldr	r0, [pc, #128]	; (2890 <SystemInit+0x1d4>)
    280e:	2301      	movs	r3, #1
    2810:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    2814:	f7ff ff4a 	bl	26ac <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    2818:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    281c:	f023 0301 	bic.w	r3, r3, #1
    2820:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
    2824:	f7ff ff42 	bl	26ac <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2828:	2300      	movs	r3, #0
    282a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    282e:	f7ff ff3d 	bl	26ac <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    2832:	f7ff ff17 	bl	2664 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2836:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    283a:	2b00      	cmp	r3, #0
    283c:	db03      	blt.n	2846 <SystemInit+0x18a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    283e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2842:	2b00      	cmp	r3, #0
    2844:	da14      	bge.n	2870 <SystemInit+0x1b4>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2846:	4912      	ldr	r1, [pc, #72]	; (2890 <SystemInit+0x1d4>)
    2848:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    284a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    284e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2852:	2412      	movs	r4, #18
    nvmc_wait();
    2854:	f7ff ff2a 	bl	26ac <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2858:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    285c:	f7ff ff26 	bl	26ac <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2860:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2864:	f7ff ff22 	bl	26ac <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2868:	2300      	movs	r3, #0
    286a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    286e:	e7de      	b.n	282e <SystemInit+0x172>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2870:	4b08      	ldr	r3, [pc, #32]	; (2894 <SystemInit+0x1d8>)
    2872:	4a09      	ldr	r2, [pc, #36]	; (2898 <SystemInit+0x1dc>)
    2874:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2876:	bd10      	pop	{r4, pc}
    2878:	4000c000 	.word	0x4000c000
    287c:	40005000 	.word	0x40005000
    2880:	00038148 	.word	0x00038148
    2884:	4000f000 	.word	0x4000f000
    2888:	40029000 	.word	0x40029000
    288c:	000047a5 	.word	0x000047a5
    2890:	4001e000 	.word	0x4001e000
    2894:	20000000 	.word	0x20000000
    2898:	03d09000 	.word	0x03d09000

0000289c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    289c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    289e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    28a0:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    28a2:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    28a6:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    28a8:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    28ac:	d014      	beq.n	28d8 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    28ae:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    28b2:	fa05 f204 	lsl.w	r2, r5, r4
    28b6:	ea23 0202 	bic.w	r2, r3, r2
    28ba:	e850 6f00 	ldrex	r6, [r0]
    28be:	429e      	cmp	r6, r3
    28c0:	d104      	bne.n	28cc <nrfx_flag32_alloc+0x30>
    28c2:	e840 2c00 	strex	ip, r2, [r0]
    28c6:	f1bc 0f00 	cmp.w	ip, #0
    28ca:	d1f6      	bne.n	28ba <nrfx_flag32_alloc+0x1e>
    28cc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    28d0:	d1e6      	bne.n	28a0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    28d2:	4802      	ldr	r0, [pc, #8]	; (28dc <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    28d4:	700c      	strb	r4, [r1, #0]
}
    28d6:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    28d8:	4801      	ldr	r0, [pc, #4]	; (28e0 <nrfx_flag32_alloc+0x44>)
    28da:	e7fc      	b.n	28d6 <nrfx_flag32_alloc+0x3a>
    28dc:	0bad0000 	.word	0x0bad0000
    28e0:	0bad0002 	.word	0x0bad0002

000028e4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    28e4:	6803      	ldr	r3, [r0, #0]
    28e6:	40cb      	lsrs	r3, r1
    28e8:	07db      	lsls	r3, r3, #31
{
    28ea:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    28ec:	d415      	bmi.n	291a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    28ee:	2301      	movs	r3, #1
    28f0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    28f4:	6803      	ldr	r3, [r0, #0]
    28f6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    28fa:	ea41 0203 	orr.w	r2, r1, r3
    28fe:	e850 4f00 	ldrex	r4, [r0]
    2902:	429c      	cmp	r4, r3
    2904:	d104      	bne.n	2910 <nrfx_flag32_free+0x2c>
    2906:	e840 2c00 	strex	ip, r2, [r0]
    290a:	f1bc 0f00 	cmp.w	ip, #0
    290e:	d1f6      	bne.n	28fe <nrfx_flag32_free+0x1a>
    2910:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2914:	d1ee      	bne.n	28f4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    2916:	4802      	ldr	r0, [pc, #8]	; (2920 <nrfx_flag32_free+0x3c>)
}
    2918:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    291a:	4802      	ldr	r0, [pc, #8]	; (2924 <nrfx_flag32_free+0x40>)
    291c:	e7fc      	b.n	2918 <nrfx_flag32_free+0x34>
    291e:	bf00      	nop
    2920:	0bad0000 	.word	0x0bad0000
    2924:	0bad0004 	.word	0x0bad0004

00002928 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2928:	4b04      	ldr	r3, [pc, #16]	; (293c <nrfx_clock_init+0x14>)
    292a:	791a      	ldrb	r2, [r3, #4]
    292c:	b922      	cbnz	r2, 2938 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    292e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2930:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2932:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2934:	4802      	ldr	r0, [pc, #8]	; (2940 <nrfx_clock_init+0x18>)
    2936:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2938:	4802      	ldr	r0, [pc, #8]	; (2944 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    293a:	4770      	bx	lr
    293c:	20000258 	.word	0x20000258
    2940:	0bad0000 	.word	0x0bad0000
    2944:	0bad000c 	.word	0x0bad000c

00002948 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2948:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    294a:	b110      	cbz	r0, 2952 <nrfx_clock_stop+0xa>
    294c:	2801      	cmp	r0, #1
    294e:	d017      	beq.n	2980 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2950:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    2952:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2956:	2302      	movs	r3, #2
    2958:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    295c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    2960:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2964:	2301      	movs	r3, #1
    2966:	60e3      	str	r3, [r4, #12]
    2968:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    296c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    2970:	03db      	lsls	r3, r3, #15
    2972:	d5ed      	bpl.n	2950 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2974:	2001      	movs	r0, #1
    2976:	f001 fbe4 	bl	4142 <nrfx_busy_wait>
    297a:	3d01      	subs	r5, #1
    297c:	d1f6      	bne.n	296c <nrfx_clock_stop+0x24>
    297e:	e7e7      	b.n	2950 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    2980:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2984:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    2986:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    298a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    298e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2992:	6060      	str	r0, [r4, #4]
    2994:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2998:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    299c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    29a0:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    29a2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    29a6:	d505      	bpl.n	29b4 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    29a8:	b123      	cbz	r3, 29b4 <nrfx_clock_stop+0x6c>
    29aa:	2001      	movs	r0, #1
    29ac:	f001 fbc9 	bl	4142 <nrfx_busy_wait>
    29b0:	3d01      	subs	r5, #1
    29b2:	d1f1      	bne.n	2998 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    29b4:	4b01      	ldr	r3, [pc, #4]	; (29bc <nrfx_clock_stop+0x74>)
    29b6:	2200      	movs	r2, #0
    29b8:	715a      	strb	r2, [r3, #5]
    29ba:	e7c9      	b.n	2950 <nrfx_clock_stop+0x8>
    29bc:	20000258 	.word	0x20000258

000029c0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    29c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    29c4:	b510      	push	{r4, lr}
    29c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    29ca:	b16a      	cbz	r2, 29e8 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29cc:	2200      	movs	r2, #0
    29ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    29d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    29d6:	2201      	movs	r2, #1
    29d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    29dc:	4b11      	ldr	r3, [pc, #68]	; (2a24 <nrfx_power_clock_irq_handler+0x64>)
    29de:	7958      	ldrb	r0, [r3, #5]
    29e0:	b910      	cbnz	r0, 29e8 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    29e2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    29e4:	681b      	ldr	r3, [r3, #0]
    29e6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    29e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    29f0:	b172      	cbz	r2, 2a10 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29f2:	2200      	movs	r2, #0
    29f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    29f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    29fc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2a00:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2a04:	0792      	lsls	r2, r2, #30
    2a06:	d104      	bne.n	2a12 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2a08:	2201      	movs	r2, #1
    2a0a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a0e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2a10:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2a12:	2202      	movs	r2, #2
    2a14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2a18:	4b02      	ldr	r3, [pc, #8]	; (2a24 <nrfx_power_clock_irq_handler+0x64>)
}
    2a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	2001      	movs	r0, #1
    2a22:	4718      	bx	r3
    2a24:	20000258 	.word	0x20000258

00002a28 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2a28:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2a2a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    2a2e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    2a30:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    2a32:	6002      	str	r2, [r0, #0]
}
    2a34:	4802      	ldr	r0, [pc, #8]	; (2a40 <nrf_gpio_pin_port_decode+0x18>)
    2a36:	bf18      	it	ne
    2a38:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    2a3c:	4770      	bx	lr
    2a3e:	bf00      	nop
    2a40:	50000300 	.word	0x50000300

00002a44 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2a44:	4b03      	ldr	r3, [pc, #12]	; (2a54 <pin_in_use_by_te+0x10>)
    2a46:	3008      	adds	r0, #8
    2a48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2a4c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2a50:	4770      	bx	lr
    2a52:	bf00      	nop
    2a54:	20000004 	.word	0x20000004

00002a58 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2a58:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a5a:	f100 0308 	add.w	r3, r0, #8
    2a5e:	4c0c      	ldr	r4, [pc, #48]	; (2a90 <call_handler+0x38>)
    2a60:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2a64:	05da      	lsls	r2, r3, #23
{
    2a66:	4605      	mov	r5, r0
    2a68:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a6a:	d507      	bpl.n	2a7c <call_handler+0x24>
    2a6c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2a70:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2a74:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2a78:	6852      	ldr	r2, [r2, #4]
    2a7a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2a7c:	68a3      	ldr	r3, [r4, #8]
    2a7e:	b12b      	cbz	r3, 2a8c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2a80:	68e2      	ldr	r2, [r4, #12]
    2a82:	4631      	mov	r1, r6
    2a84:	4628      	mov	r0, r5
    }
}
    2a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2a8a:	4718      	bx	r3
}
    2a8c:	bd70      	pop	{r4, r5, r6, pc}
    2a8e:	bf00      	nop
    2a90:	20000004 	.word	0x20000004

00002a94 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a94:	4a12      	ldr	r2, [pc, #72]	; (2ae0 <release_handler+0x4c>)
    2a96:	3008      	adds	r0, #8
{
    2a98:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a9a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2a9e:	05d9      	lsls	r1, r3, #23
    2aa0:	d51b      	bpl.n	2ada <release_handler+0x46>
    2aa2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2aa6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2aaa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2aae:	f102 0410 	add.w	r4, r2, #16
    2ab2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2ab4:	f834 3b02 	ldrh.w	r3, [r4], #2
    2ab8:	f413 7f80 	tst.w	r3, #256	; 0x100
    2abc:	d003      	beq.n	2ac6 <release_handler+0x32>
    2abe:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2ac2:	4299      	cmp	r1, r3
    2ac4:	d009      	beq.n	2ada <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ac6:	3001      	adds	r0, #1
    2ac8:	2830      	cmp	r0, #48	; 0x30
    2aca:	d1f3      	bne.n	2ab4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2acc:	2300      	movs	r3, #0
    2ace:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2ad2:	4804      	ldr	r0, [pc, #16]	; (2ae4 <release_handler+0x50>)
}
    2ad4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2ad6:	f7ff bf05 	b.w	28e4 <nrfx_flag32_free>
}
    2ada:	bc10      	pop	{r4}
    2adc:	4770      	bx	lr
    2ade:	bf00      	nop
    2ae0:	20000004 	.word	0x20000004
    2ae4:	20000078 	.word	0x20000078

00002ae8 <pin_handler_trigger_uninit>:
{
    2ae8:	b538      	push	{r3, r4, r5, lr}
    2aea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2aec:	f7ff ffaa 	bl	2a44 <pin_in_use_by_te>
    2af0:	4c09      	ldr	r4, [pc, #36]	; (2b18 <pin_handler_trigger_uninit+0x30>)
    2af2:	f102 0508 	add.w	r5, r2, #8
    2af6:	b140      	cbz	r0, 2b0a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2af8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2afc:	4907      	ldr	r1, [pc, #28]	; (2b1c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2afe:	0b5b      	lsrs	r3, r3, #13
    2b00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2b04:	2000      	movs	r0, #0
    2b06:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2b0a:	4610      	mov	r0, r2
    2b0c:	f7ff ffc2 	bl	2a94 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2b10:	2300      	movs	r3, #0
    2b12:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2b16:	bd38      	pop	{r3, r4, r5, pc}
    2b18:	20000004 	.word	0x20000004
    2b1c:	40006000 	.word	0x40006000

00002b20 <nrfx_gpiote_input_configure>:
{
    2b20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2b24:	4604      	mov	r4, r0
    2b26:	4617      	mov	r7, r2
    2b28:	461d      	mov	r5, r3
    if (p_input_config)
    2b2a:	b321      	cbz	r1, 2b76 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2b2c:	4e4e      	ldr	r6, [pc, #312]	; (2c68 <nrfx_gpiote_input_configure+0x148>)
    2b2e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2b32:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    2b36:	079b      	lsls	r3, r3, #30
    2b38:	d506      	bpl.n	2b48 <nrfx_gpiote_input_configure+0x28>
    2b3a:	f7ff ff83 	bl	2a44 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    2b3e:	b118      	cbz	r0, 2b48 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    2b40:	484a      	ldr	r0, [pc, #296]	; (2c6c <nrfx_gpiote_input_configure+0x14c>)
}
    2b42:	b004      	add	sp, #16
    2b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2b48:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2b4a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2b4e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2b52:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2b56:	f10d 020f 	add.w	r2, sp, #15
    2b5a:	460b      	mov	r3, r1
    2b5c:	4620      	mov	r0, r4
    2b5e:	f10d 010e 	add.w	r1, sp, #14
    2b62:	f001 fb26 	bl	41b2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2b66:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    2b6a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2b6e:	f043 0301 	orr.w	r3, r3, #1
    2b72:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    2b76:	b197      	cbz	r7, 2b9e <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2b78:	4b3b      	ldr	r3, [pc, #236]	; (2c68 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2b7a:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2b7c:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2b7e:	f104 0008 	add.w	r0, r4, #8
    2b82:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    2b86:	078f      	lsls	r7, r1, #30
    2b88:	d50c      	bpl.n	2ba4 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    2b8a:	2a00      	cmp	r2, #0
    2b8c:	d1d8      	bne.n	2b40 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2b8e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    2b92:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2b96:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    2b9a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    2b9e:	bbcd      	cbnz	r5, 2c14 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    2ba0:	4833      	ldr	r0, [pc, #204]	; (2c70 <nrfx_gpiote_input_configure+0x150>)
    2ba2:	e7ce      	b.n	2b42 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2ba4:	f021 0120 	bic.w	r1, r1, #32
    2ba8:	04c9      	lsls	r1, r1, #19
    2baa:	0cc9      	lsrs	r1, r1, #19
    2bac:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    2bb0:	2a00      	cmp	r2, #0
    2bb2:	d0ec      	beq.n	2b8e <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    2bb4:	2e03      	cmp	r6, #3
    2bb6:	d8c3      	bhi.n	2b40 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2bb8:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2bba:	b92e      	cbnz	r6, 2bc8 <nrfx_gpiote_input_configure+0xa8>
    2bbc:	4a2d      	ldr	r2, [pc, #180]	; (2c74 <nrfx_gpiote_input_configure+0x154>)
    2bbe:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    2bc2:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    2bc6:	e7e2      	b.n	2b8e <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2bc8:	00ba      	lsls	r2, r7, #2
    2bca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2bce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2bd2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    2bd6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    2bda:	f02c 0c03 	bic.w	ip, ip, #3
    2bde:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2be2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    2be6:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    2bea:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    2bee:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2bf2:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2bf6:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    2bfa:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    2bfe:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    2c02:	ea4c 0c0e 	orr.w	ip, ip, lr
    2c06:	f041 0120 	orr.w	r1, r1, #32
    2c0a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    2c0e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    2c12:	e7bc      	b.n	2b8e <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2c14:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    2c18:	4620      	mov	r0, r4
    2c1a:	f7ff ff3b 	bl	2a94 <release_handler>
    if (!handler)
    2c1e:	2e00      	cmp	r6, #0
    2c20:	d0be      	beq.n	2ba0 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2c22:	4d11      	ldr	r5, [pc, #68]	; (2c68 <nrfx_gpiote_input_configure+0x148>)
    2c24:	682b      	ldr	r3, [r5, #0]
    2c26:	429e      	cmp	r6, r3
    2c28:	d104      	bne.n	2c34 <nrfx_gpiote_input_configure+0x114>
    2c2a:	686b      	ldr	r3, [r5, #4]
    2c2c:	429f      	cmp	r7, r3
    2c2e:	d101      	bne.n	2c34 <nrfx_gpiote_input_configure+0x114>
    2c30:	2200      	movs	r2, #0
    2c32:	e00a      	b.n	2c4a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2c34:	4810      	ldr	r0, [pc, #64]	; (2c78 <nrfx_gpiote_input_configure+0x158>)
    2c36:	f10d 010f 	add.w	r1, sp, #15
    2c3a:	f7ff fe2f 	bl	289c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2c3e:	4b0c      	ldr	r3, [pc, #48]	; (2c70 <nrfx_gpiote_input_configure+0x150>)
    2c40:	4298      	cmp	r0, r3
    2c42:	f47f af7e 	bne.w	2b42 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    2c46:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    2c4a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    2c4e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2c52:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2c54:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2c56:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    2c5a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2c62:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    2c66:	e79b      	b.n	2ba0 <nrfx_gpiote_input_configure+0x80>
    2c68:	20000004 	.word	0x20000004
    2c6c:	0bad0004 	.word	0x0bad0004
    2c70:	0bad0000 	.word	0x0bad0000
    2c74:	40006000 	.word	0x40006000
    2c78:	20000078 	.word	0x20000078

00002c7c <nrfx_gpiote_output_configure>:
{
    2c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c7e:	4604      	mov	r4, r0
    2c80:	b085      	sub	sp, #20
    2c82:	4615      	mov	r5, r2
    if (p_config)
    2c84:	b319      	cbz	r1, 2cce <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2c86:	4e33      	ldr	r6, [pc, #204]	; (2d54 <nrfx_gpiote_output_configure+0xd8>)
    2c88:	f100 0708 	add.w	r7, r0, #8
    2c8c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2c90:	0793      	lsls	r3, r2, #30
    2c92:	d403      	bmi.n	2c9c <nrfx_gpiote_output_configure+0x20>
    2c94:	f7ff fed6 	bl	2a44 <pin_in_use_by_te>
    2c98:	2800      	cmp	r0, #0
    2c9a:	d158      	bne.n	2d4e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2c9c:	f012 0f1c 	tst.w	r2, #28
    2ca0:	d002      	beq.n	2ca8 <nrfx_gpiote_output_configure+0x2c>
    2ca2:	784b      	ldrb	r3, [r1, #1]
    2ca4:	2b01      	cmp	r3, #1
    2ca6:	d052      	beq.n	2d4e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2ca8:	2301      	movs	r3, #1
    2caa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    2cae:	2300      	movs	r3, #0
    2cb0:	e9cd 1300 	strd	r1, r3, [sp]
    2cb4:	1c4a      	adds	r2, r1, #1
    2cb6:	1c8b      	adds	r3, r1, #2
    2cb8:	4620      	mov	r0, r4
    2cba:	f10d 010f 	add.w	r1, sp, #15
    2cbe:	f001 fa78 	bl	41b2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2cc2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2cc6:	f043 0303 	orr.w	r3, r3, #3
    2cca:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    2cce:	b915      	cbnz	r5, 2cd6 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    2cd0:	4821      	ldr	r0, [pc, #132]	; (2d58 <nrfx_gpiote_output_configure+0xdc>)
}
    2cd2:	b005      	add	sp, #20
    2cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2cd6:	4e1f      	ldr	r6, [pc, #124]	; (2d54 <nrfx_gpiote_output_configure+0xd8>)
    2cd8:	f104 0708 	add.w	r7, r4, #8
    2cdc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2ce0:	0783      	lsls	r3, r0, #30
    2ce2:	d534      	bpl.n	2d4e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    2ce4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    2ce8:	4661      	mov	r1, ip
    2cea:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2cec:	f020 0020 	bic.w	r0, r0, #32
    2cf0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2cf4:	04c0      	lsls	r0, r0, #19
    2cf6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    2cfa:	0cc0      	lsrs	r0, r0, #19
    2cfc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2d00:	2300      	movs	r3, #0
    2d02:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2d06:	786a      	ldrb	r2, [r5, #1]
    2d08:	2a00      	cmp	r2, #0
    2d0a:	d0e1      	beq.n	2cd0 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    2d0c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    2d10:	78ad      	ldrb	r5, [r5, #2]
    2d12:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    2d16:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2d1a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2d1e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    2d22:	0223      	lsls	r3, r4, #8
    2d24:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2d28:	0412      	lsls	r2, r2, #16
    2d2a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2d2e:	ea43 030e 	orr.w	r3, r3, lr
    2d32:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2d34:	052a      	lsls	r2, r5, #20
    2d36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2d3a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2d3e:	4313      	orrs	r3, r2
    2d40:	f040 0020 	orr.w	r0, r0, #32
    2d44:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2d48:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2d4c:	e7c0      	b.n	2cd0 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    2d4e:	4803      	ldr	r0, [pc, #12]	; (2d5c <nrfx_gpiote_output_configure+0xe0>)
    2d50:	e7bf      	b.n	2cd2 <nrfx_gpiote_output_configure+0x56>
    2d52:	bf00      	nop
    2d54:	20000004 	.word	0x20000004
    2d58:	0bad0000 	.word	0x0bad0000
    2d5c:	0bad0004 	.word	0x0bad0004

00002d60 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2d60:	4b01      	ldr	r3, [pc, #4]	; (2d68 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    2d62:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    2d66:	4770      	bx	lr
    2d68:	20000004 	.word	0x20000004

00002d6c <nrfx_gpiote_channel_get>:
{
    2d6c:	b508      	push	{r3, lr}
    2d6e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2d70:	f7ff fe68 	bl	2a44 <pin_in_use_by_te>
    2d74:	b138      	cbz	r0, 2d86 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2d76:	4b05      	ldr	r3, [pc, #20]	; (2d8c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    2d78:	4805      	ldr	r0, [pc, #20]	; (2d90 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2d7a:	3208      	adds	r2, #8
    2d7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2d80:	0b5b      	lsrs	r3, r3, #13
    2d82:	700b      	strb	r3, [r1, #0]
}
    2d84:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2d86:	4803      	ldr	r0, [pc, #12]	; (2d94 <nrfx_gpiote_channel_get+0x28>)
    2d88:	e7fc      	b.n	2d84 <nrfx_gpiote_channel_get+0x18>
    2d8a:	bf00      	nop
    2d8c:	20000004 	.word	0x20000004
    2d90:	0bad0000 	.word	0x0bad0000
    2d94:	0bad0004 	.word	0x0bad0004

00002d98 <nrfx_gpiote_init>:
{
    2d98:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2d9a:	4c0f      	ldr	r4, [pc, #60]	; (2dd8 <nrfx_gpiote_init+0x40>)
    2d9c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    2da0:	b9bd      	cbnz	r5, 2dd2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2da2:	2260      	movs	r2, #96	; 0x60
    2da4:	4629      	mov	r1, r5
    2da6:	f104 0010 	add.w	r0, r4, #16
    2daa:	f001 f8b5 	bl	3f18 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2dae:	2006      	movs	r0, #6
    2db0:	f7fe fd20 	bl	17f4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2db4:	4b09      	ldr	r3, [pc, #36]	; (2ddc <nrfx_gpiote_init+0x44>)
    return err_code;
    2db6:	480a      	ldr	r0, [pc, #40]	; (2de0 <nrfx_gpiote_init+0x48>)
    2db8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    2dbc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2dc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2dc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2dc8:	2301      	movs	r3, #1
    2dca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2dce:	6763      	str	r3, [r4, #116]	; 0x74
}
    2dd0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    2dd2:	4804      	ldr	r0, [pc, #16]	; (2de4 <nrfx_gpiote_init+0x4c>)
    2dd4:	e7fc      	b.n	2dd0 <nrfx_gpiote_init+0x38>
    2dd6:	bf00      	nop
    2dd8:	20000004 	.word	0x20000004
    2ddc:	40006000 	.word	0x40006000
    2de0:	0bad0000 	.word	0x0bad0000
    2de4:	0bad0005 	.word	0x0bad0005

00002de8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2de8:	4b03      	ldr	r3, [pc, #12]	; (2df8 <nrfx_gpiote_is_init+0x10>)
    2dea:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    2dee:	3800      	subs	r0, #0
    2df0:	bf18      	it	ne
    2df2:	2001      	movne	r0, #1
    2df4:	4770      	bx	lr
    2df6:	bf00      	nop
    2df8:	20000004 	.word	0x20000004

00002dfc <nrfx_gpiote_channel_free>:
{
    2dfc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2dfe:	4801      	ldr	r0, [pc, #4]	; (2e04 <nrfx_gpiote_channel_free+0x8>)
    2e00:	f7ff bd70 	b.w	28e4 <nrfx_flag32_free>
    2e04:	20000074 	.word	0x20000074

00002e08 <nrfx_gpiote_channel_alloc>:
{
    2e08:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2e0a:	4801      	ldr	r0, [pc, #4]	; (2e10 <nrfx_gpiote_channel_alloc+0x8>)
    2e0c:	f7ff bd46 	b.w	289c <nrfx_flag32_alloc>
    2e10:	20000074 	.word	0x20000074

00002e14 <nrfx_gpiote_trigger_enable>:
{
    2e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2e16:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2e18:	f7ff fe14 	bl	2a44 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e1c:	f104 0208 	add.w	r2, r4, #8
    2e20:	4b1e      	ldr	r3, [pc, #120]	; (2e9c <nrfx_gpiote_trigger_enable+0x88>)
    2e22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2e26:	b1e8      	cbz	r0, 2e64 <nrfx_gpiote_trigger_enable+0x50>
    2e28:	f013 0502 	ands.w	r5, r3, #2
    2e2c:	d11a      	bne.n	2e64 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2e2e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    2e30:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    2e32:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    2e36:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    2e3a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2e3e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e42:	6005      	str	r5, [r0, #0]
    2e44:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2e46:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2e4a:	f040 0001 	orr.w	r0, r0, #1
    2e4e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    2e52:	b129      	cbz	r1, 2e60 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    2e54:	2201      	movs	r2, #1
    2e56:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    2e5a:	4a11      	ldr	r2, [pc, #68]	; (2ea0 <nrfx_gpiote_trigger_enable+0x8c>)
    2e5c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2e60:	b003      	add	sp, #12
    2e62:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2e64:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2e68:	2b04      	cmp	r3, #4
    2e6a:	d012      	beq.n	2e92 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2e6c:	2b05      	cmp	r3, #5
    2e6e:	d012      	beq.n	2e96 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e70:	a801      	add	r0, sp, #4
    2e72:	9401      	str	r4, [sp, #4]
    2e74:	f7ff fdd8 	bl	2a28 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2e78:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    2e7a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2e7e:	40d9      	lsrs	r1, r3
    2e80:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2e84:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2e86:	4620      	mov	r0, r4
}
    2e88:	b003      	add	sp, #12
    2e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2e8e:	f001 b9d7 	b.w	4240 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2e92:	2103      	movs	r1, #3
    2e94:	e7f7      	b.n	2e86 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2e96:	2102      	movs	r1, #2
    2e98:	e7f5      	b.n	2e86 <nrfx_gpiote_trigger_enable+0x72>
    2e9a:	bf00      	nop
    2e9c:	20000004 	.word	0x20000004
    2ea0:	40006000 	.word	0x40006000

00002ea4 <nrfx_gpiote_trigger_disable>:
{
    2ea4:	b508      	push	{r3, lr}
    2ea6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2ea8:	f7ff fdcc 	bl	2a44 <pin_in_use_by_te>
    2eac:	b1c0      	cbz	r0, 2ee0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2eae:	f102 0108 	add.w	r1, r2, #8
    2eb2:	4b0e      	ldr	r3, [pc, #56]	; (2eec <nrfx_gpiote_trigger_disable+0x48>)
    2eb4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2eb8:	0799      	lsls	r1, r3, #30
    2eba:	d411      	bmi.n	2ee0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2ebc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2ebe:	2201      	movs	r2, #1
    2ec0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    2ec2:	009b      	lsls	r3, r3, #2
    2ec4:	490a      	ldr	r1, [pc, #40]	; (2ef0 <nrfx_gpiote_trigger_disable+0x4c>)
    2ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2eca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2ece:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2ed2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2ed6:	f022 0203 	bic.w	r2, r2, #3
    2eda:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    2ede:	bd08      	pop	{r3, pc}
    2ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2ee4:	2100      	movs	r1, #0
    2ee6:	4610      	mov	r0, r2
    2ee8:	f001 b9aa 	b.w	4240 <nrf_gpio_cfg_sense_set>
    2eec:	20000004 	.word	0x20000004
    2ef0:	40006000 	.word	0x40006000

00002ef4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2ef4:	4b0e      	ldr	r3, [pc, #56]	; (2f30 <nrfx_gpiote_pin_uninit+0x3c>)
    2ef6:	f100 0208 	add.w	r2, r0, #8
{
    2efa:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2efc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    2f00:	07db      	lsls	r3, r3, #31
{
    2f02:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    2f04:	d511      	bpl.n	2f2a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    2f06:	f7ff ffcd 	bl	2ea4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    2f0a:	4620      	mov	r0, r4
    2f0c:	f7ff fdec 	bl	2ae8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f10:	a801      	add	r0, sp, #4
    2f12:	9401      	str	r4, [sp, #4]
    2f14:	f7ff fd88 	bl	2a28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2f18:	9b01      	ldr	r3, [sp, #4]
    2f1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2f1e:	2202      	movs	r2, #2
    2f20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    2f24:	4803      	ldr	r0, [pc, #12]	; (2f34 <nrfx_gpiote_pin_uninit+0x40>)
}
    2f26:	b002      	add	sp, #8
    2f28:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2f2a:	4803      	ldr	r0, [pc, #12]	; (2f38 <nrfx_gpiote_pin_uninit+0x44>)
    2f2c:	e7fb      	b.n	2f26 <nrfx_gpiote_pin_uninit+0x32>
    2f2e:	bf00      	nop
    2f30:	20000004 	.word	0x20000004
    2f34:	0bad0000 	.word	0x0bad0000
    2f38:	0bad0004 	.word	0x0bad0004

00002f3c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    2f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f40:	4b64      	ldr	r3, [pc, #400]	; (30d4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    2f42:	4865      	ldr	r0, [pc, #404]	; (30d8 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2f44:	4965      	ldr	r1, [pc, #404]	; (30dc <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    2f46:	2600      	movs	r6, #0
{
    2f48:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    2f4a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f4c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f4e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    2f50:	b135      	cbz	r5, 2f60 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    2f52:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    2f56:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f58:	bf1e      	ittt	ne
    2f5a:	601c      	strne	r4, [r3, #0]
    2f5c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    2f5e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2f60:	3304      	adds	r3, #4
    2f62:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    2f64:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2f68:	d1f1      	bne.n	2f4e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f6a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 30d8 <nrfx_gpiote_irq_handler+0x19c>
    2f6e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    2f72:	2b00      	cmp	r3, #0
    2f74:	f000 8091 	beq.w	309a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    2f78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2f7c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    2f80:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2f82:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    2f86:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    2f8a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    2f8c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2f90:	2700      	movs	r7, #0
            while (latch[i])
    2f92:	f10d 0910 	add.w	r9, sp, #16
    2f96:	017b      	lsls	r3, r7, #5
    2f98:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    2f9a:	f04f 0a01 	mov.w	sl, #1
    2f9e:	e049      	b.n	3034 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    2fa0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2fa2:	4a4f      	ldr	r2, [pc, #316]	; (30e0 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    2fa4:	fa94 f4a4 	rbit	r4, r4
    2fa8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    2fac:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2fae:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    2fb2:	08e0      	lsrs	r0, r4, #3
    2fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    2fb8:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    2fba:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    2fbe:	fa0a fc02 	lsl.w	ip, sl, r2
    2fc2:	f819 2000 	ldrb.w	r2, [r9, r0]
    2fc6:	ea22 020c 	bic.w	r2, r2, ip
    2fca:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fce:	a803      	add	r0, sp, #12
    2fd0:	f3c3 0582 	ubfx	r5, r3, #2, #3
    2fd4:	0899      	lsrs	r1, r3, #2
    2fd6:	f7ff fd27 	bl	2a28 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2fda:	9a03      	ldr	r2, [sp, #12]
    2fdc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    2fe0:	074b      	lsls	r3, r1, #29
    2fe2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2fe6:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    2fe8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    2fec:	d529      	bpl.n	3042 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    2fee:	4620      	mov	r0, r4
    2ff0:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2ff2:	b2d5      	uxtb	r5, r2
    2ff4:	f7ff fd30 	bl	2a58 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2ff8:	a803      	add	r0, sp, #12
    2ffa:	9403      	str	r4, [sp, #12]
    2ffc:	f7ff fd14 	bl	2a28 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3000:	9b03      	ldr	r3, [sp, #12]
    3002:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3006:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    300a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    300e:	429d      	cmp	r5, r3
    3010:	d107      	bne.n	3022 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3012:	2100      	movs	r1, #0
    3014:	4620      	mov	r0, r4
    3016:	f001 f913 	bl	4240 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    301a:	4629      	mov	r1, r5
    301c:	4620      	mov	r0, r4
    301e:	f001 f90f 	bl	4240 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3022:	a803      	add	r0, sp, #12
    3024:	9403      	str	r4, [sp, #12]
    3026:	f7ff fcff 	bl	2a28 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    302a:	9b03      	ldr	r3, [sp, #12]
    302c:	fa0a f303 	lsl.w	r3, sl, r3
    3030:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    3034:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    3038:	2c00      	cmp	r4, #0
    303a:	d1b1      	bne.n	2fa0 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    303c:	b9cf      	cbnz	r7, 3072 <nrfx_gpiote_irq_handler+0x136>
    303e:	2701      	movs	r7, #1
    3040:	e7a9      	b.n	2f96 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3042:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3044:	bf0c      	ite	eq
    3046:	2103      	moveq	r1, #3
    3048:	2102      	movne	r1, #2
    304a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    304c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    304e:	f001 f8f7 	bl	4240 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3052:	2d03      	cmp	r5, #3
    3054:	d004      	beq.n	3060 <nrfx_gpiote_irq_handler+0x124>
    3056:	9a01      	ldr	r2, [sp, #4]
    3058:	2a02      	cmp	r2, #2
    305a:	d106      	bne.n	306a <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    305c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    305e:	d1e0      	bne.n	3022 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    3060:	4659      	mov	r1, fp
    3062:	4620      	mov	r0, r4
    3064:	f7ff fcf8 	bl	2a58 <call_handler>
    3068:	e7db      	b.n	3022 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    306a:	2a03      	cmp	r2, #3
    306c:	d1d9      	bne.n	3022 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    306e:	2d02      	cmp	r5, #2
    3070:	e7f5      	b.n	305e <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3072:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    3076:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    307a:	491a      	ldr	r1, [pc, #104]	; (30e4 <nrfx_gpiote_irq_handler+0x1a8>)
    307c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3080:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3084:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3086:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    308a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    308e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3090:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    3094:	4313      	orrs	r3, r2
    3096:	f47f af7b 	bne.w	2f90 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    309a:	2401      	movs	r4, #1
    while (mask)
    309c:	b916      	cbnz	r6, 30a4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    309e:	b007      	add	sp, #28
    30a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    30a4:	fa96 f3a6 	rbit	r3, r6
    30a8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    30ac:	fa04 f203 	lsl.w	r2, r4, r3
    30b0:	009b      	lsls	r3, r3, #2
    30b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    30b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    30ba:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    30be:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    30c2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    30c6:	f3c0 2005 	ubfx	r0, r0, #8, #6
    30ca:	f3c1 4101 	ubfx	r1, r1, #16, #2
    30ce:	f7ff fcc3 	bl	2a58 <call_handler>
    30d2:	e7e3      	b.n	309c <nrfx_gpiote_irq_handler+0x160>
    30d4:	40006100 	.word	0x40006100
    30d8:	40006000 	.word	0x40006000
    30dc:	40006120 	.word	0x40006120
    30e0:	20000004 	.word	0x20000004
    30e4:	50000300 	.word	0x50000300

000030e8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    30e8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    30ea:	2300      	movs	r3, #0
{
    30ec:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    30ee:	2201      	movs	r2, #1
    30f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    30f4:	220f      	movs	r2, #15
    30f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    30fa:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    30fc:	4c0c      	ldr	r4, [pc, #48]	; (3130 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    30fe:	4b0d      	ldr	r3, [pc, #52]	; (3134 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    3100:	490d      	ldr	r1, [pc, #52]	; (3138 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3102:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    3104:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3108:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    310c:	f44f 75b0 	mov.w	r5, #352	; 0x160
    3110:	9300      	str	r3, [sp, #0]
    3112:	fb05 1100 	mla	r1, r5, r0, r1
    3116:	4b09      	ldr	r3, [pc, #36]	; (313c <init_idle_thread+0x54>)
    3118:	f44f 72a0 	mov.w	r2, #320	; 0x140
    311c:	4620      	mov	r0, r4
    311e:	f000 f8a5 	bl	326c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3122:	7b63      	ldrb	r3, [r4, #13]
    3124:	f023 0304 	bic.w	r3, r3, #4
    3128:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    312a:	b007      	add	sp, #28
    312c:	bd30      	pop	{r4, r5, pc}
    312e:	bf00      	nop
    3130:	20000098 	.word	0x20000098
    3134:	20000260 	.word	0x20000260
    3138:	200006c0 	.word	0x200006c0
    313c:	00003389 	.word	0x00003389

00003140 <bg_thread_main>:
{
    3140:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3142:	4b0a      	ldr	r3, [pc, #40]	; (316c <bg_thread_main+0x2c>)
    3144:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3146:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3148:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    314a:	f000 fdcf 	bl	3cec <z_sys_init_run_level>
	boot_banner();
    314e:	f001 f9a6 	bl	449e <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3152:	2003      	movs	r0, #3
    3154:	f000 fdca 	bl	3cec <z_sys_init_run_level>
	z_init_static_threads();
    3158:	f000 f8ba 	bl	32d0 <z_init_static_threads>
	main();
    315c:	f001 f99d 	bl	449a <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3160:	4a03      	ldr	r2, [pc, #12]	; (3170 <bg_thread_main+0x30>)
    3162:	7b13      	ldrb	r3, [r2, #12]
    3164:	f023 0301 	bic.w	r3, r3, #1
    3168:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    316a:	bd08      	pop	{r3, pc}
    316c:	20000299 	.word	0x20000299
    3170:	20000118 	.word	0x20000118

00003174 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3174:	4802      	ldr	r0, [pc, #8]	; (3180 <z_bss_zero+0xc>)
    3176:	4a03      	ldr	r2, [pc, #12]	; (3184 <z_bss_zero+0x10>)
    3178:	2100      	movs	r1, #0
    317a:	1a12      	subs	r2, r2, r0
    317c:	f000 becc 	b.w	3f18 <memset>
    3180:	20000098 	.word	0x20000098
    3184:	2000029c 	.word	0x2000029c

00003188 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3188:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    318a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 324c <z_cstart+0xc4>
    318e:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3190:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3194:	4d2e      	ldr	r5, [pc, #184]	; (3250 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3196:	4e2f      	ldr	r6, [pc, #188]	; (3254 <z_cstart+0xcc>)
    3198:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    319a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3258 <z_cstart+0xd0>
    319e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    31a2:	2400      	movs	r4, #0
    31a4:	616b      	str	r3, [r5, #20]
    31a6:	23e0      	movs	r3, #224	; 0xe0
    31a8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    31ac:	77ec      	strb	r4, [r5, #31]
    31ae:	762c      	strb	r4, [r5, #24]
    31b0:	766c      	strb	r4, [r5, #25]
    31b2:	76ac      	strb	r4, [r5, #26]
    31b4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    31b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    31ba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    31be:	626b      	str	r3, [r5, #36]	; 0x24
    31c0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    31c4:	f7fe fd26 	bl	1c14 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    31c8:	f7fe faf6 	bl	17b8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    31cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31d0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    31d2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    31d4:	f7fe fdfc 	bl	1dd0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    31d8:	f7fe fd64 	bl	1ca4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    31dc:	f240 1301 	movw	r3, #257	; 0x101
    31e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    31e4:	ab06      	add	r3, sp, #24
    31e6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    31e8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    31ec:	f001 f958 	bl	44a0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    31f0:	4620      	mov	r0, r4
    31f2:	f000 fd7b 	bl	3cec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    31f6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    31f8:	4d18      	ldr	r5, [pc, #96]	; (325c <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    31fa:	f000 fd77 	bl	3cec <z_sys_init_run_level>
	z_sched_init();
    31fe:	f000 fb1b 	bl	3838 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3202:	4b17      	ldr	r3, [pc, #92]	; (3260 <z_cstart+0xd8>)
    3204:	9305      	str	r3, [sp, #20]
    3206:	2301      	movs	r3, #1
    3208:	4916      	ldr	r1, [pc, #88]	; (3264 <z_cstart+0xdc>)
    320a:	9400      	str	r4, [sp, #0]
    320c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3210:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3214:	464b      	mov	r3, r9
    3216:	e9cd 4401 	strd	r4, r4, [sp, #4]
    321a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    321c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    321e:	f000 f825 	bl	326c <z_setup_new_thread>
    3222:	7b6a      	ldrb	r2, [r5, #13]
    3224:	4607      	mov	r7, r0
    3226:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    322a:	4628      	mov	r0, r5
    322c:	736a      	strb	r2, [r5, #13]
    322e:	f001 f878 	bl	4322 <z_ready_thread>
		init_idle_thread(i);
    3232:	4620      	mov	r0, r4
    3234:	f7ff ff58 	bl	30e8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3238:	4b0b      	ldr	r3, [pc, #44]	; (3268 <z_cstart+0xe0>)
    323a:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    323c:	464a      	mov	r2, r9
    323e:	4639      	mov	r1, r7
    3240:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    3242:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3244:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3248:	f7fe fbb8 	bl	19bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    324c:	20001040 	.word	0x20001040
    3250:	e000ed00 	.word	0xe000ed00
    3254:	20000260 	.word	0x20000260
    3258:	00003141 	.word	0x00003141
    325c:	20000118 	.word	0x20000118
    3260:	000047b1 	.word	0x000047b1
    3264:	200002a0 	.word	0x200002a0
    3268:	20000098 	.word	0x20000098

0000326c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    326c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3270:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3272:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3274:	2604      	movs	r6, #4
    3276:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3278:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    327a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    327c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3280:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3282:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3284:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    328a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    328c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3290:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3292:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3296:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    329a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    329c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    329e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    32a0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    32a4:	9202      	str	r2, [sp, #8]
    32a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    32a8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    32aa:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    32ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    32ae:	9200      	str	r2, [sp, #0]
    32b0:	4642      	mov	r2, r8
{
    32b2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    32b4:	f7fe fb50 	bl	1958 <arch_new_thread>
	if (!_current) {
    32b8:	4b04      	ldr	r3, [pc, #16]	; (32cc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    32ba:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    32bc:	689b      	ldr	r3, [r3, #8]
    32be:	b103      	cbz	r3, 32c2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    32c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    32c2:	6723      	str	r3, [r4, #112]	; 0x70
}
    32c4:	4640      	mov	r0, r8
    32c6:	b004      	add	sp, #16
    32c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32cc:	20000260 	.word	0x20000260

000032d0 <z_init_static_threads>:
{
    32d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    32d4:	4c29      	ldr	r4, [pc, #164]	; (337c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    32d6:	4d2a      	ldr	r5, [pc, #168]	; (3380 <z_init_static_threads+0xb0>)
{
    32d8:	b087      	sub	sp, #28
    32da:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    32dc:	42ae      	cmp	r6, r5
    32de:	f104 0430 	add.w	r4, r4, #48	; 0x30
    32e2:	d30f      	bcc.n	3304 <z_init_static_threads+0x34>
	k_sched_lock();
    32e4:	f000 f906 	bl	34f4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    32e8:	4c24      	ldr	r4, [pc, #144]	; (337c <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    32ea:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3384 <z_init_static_threads+0xb4>
		} else {
			return (t * to_hz + off) / from_hz;
    32ee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    32f2:	f240 37e7 	movw	r7, #999	; 0x3e7
    32f6:	42ac      	cmp	r4, r5
    32f8:	d320      	bcc.n	333c <z_init_static_threads+0x6c>
}
    32fa:	b007      	add	sp, #28
    32fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3300:	f000 ba7e 	b.w	3800 <k_sched_unlock>
		z_setup_new_thread(
    3304:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3308:	9305      	str	r3, [sp, #20]
    330a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    330e:	9304      	str	r3, [sp, #16]
    3310:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3314:	9303      	str	r3, [sp, #12]
    3316:	f854 3c18 	ldr.w	r3, [r4, #-24]
    331a:	9302      	str	r3, [sp, #8]
    331c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3320:	9301      	str	r3, [sp, #4]
    3322:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3326:	9300      	str	r3, [sp, #0]
    3328:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    332c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3330:	f7ff ff9c 	bl	326c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3334:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3338:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    333a:	e7ce      	b.n	32da <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    333c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    333e:	1c5a      	adds	r2, r3, #1
    3340:	d00d      	beq.n	335e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3342:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3346:	2100      	movs	r1, #0
    3348:	4638      	mov	r0, r7
    334a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    334e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3352:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3356:	d104      	bne.n	3362 <z_init_static_threads+0x92>
	z_sched_start(thread);
    3358:	4640      	mov	r0, r8
    335a:	f000 f9af 	bl	36bc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    335e:	3430      	adds	r4, #48	; 0x30
    3360:	e7c9      	b.n	32f6 <z_init_static_threads+0x26>
    3362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3366:	2300      	movs	r3, #0
    3368:	f7fd feca 	bl	1100 <__aeabi_uldivmod>
    336c:	4602      	mov	r2, r0
    336e:	460b      	mov	r3, r1
    3370:	f108 0018 	add.w	r0, r8, #24
    3374:	4649      	mov	r1, r9
    3376:	f000 fbcb 	bl	3b10 <z_add_timeout>
    337a:	e7f0      	b.n	335e <z_init_static_threads+0x8e>
    337c:	20000094 	.word	0x20000094
    3380:	20000094 	.word	0x20000094
    3384:	00004343 	.word	0x00004343

00003388 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3388:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    338a:	4c09      	ldr	r4, [pc, #36]	; (33b0 <idle+0x28>)
	__asm__ volatile(
    338c:	f04f 0220 	mov.w	r2, #32
    3390:	f3ef 8311 	mrs	r3, BASEPRI
    3394:	f382 8812 	msr	BASEPRI_MAX, r2
    3398:	f3bf 8f6f 	isb	sy
    339c:	f001 f84b 	bl	4436 <z_get_next_timeout_expiry>
    33a0:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    33a2:	f7fe f989 	bl	16b8 <pm_system_suspend>
    33a6:	2800      	cmp	r0, #0
    33a8:	d1f0      	bne.n	338c <idle+0x4>
	arch_cpu_idle();
    33aa:	f7fe fa0b 	bl	17c4 <arch_cpu_idle>
}
    33ae:	e7ed      	b.n	338c <idle+0x4>
    33b0:	20000260 	.word	0x20000260

000033b4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    33b4:	b538      	push	{r3, r4, r5, lr}
    33b6:	4604      	mov	r4, r0
    33b8:	f04f 0320 	mov.w	r3, #32
    33bc:	f3ef 8511 	mrs	r5, BASEPRI
    33c0:	f383 8812 	msr	BASEPRI_MAX, r3
    33c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    33c8:	f001 f807 	bl	43da <z_unpend_first_thread>

	if (thread != NULL) {
    33cc:	b148      	cbz	r0, 33e2 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    33ce:	2200      	movs	r2, #0
    33d0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    33d2:	f000 ffa6 	bl	4322 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    33d6:	4629      	mov	r1, r5
    33d8:	4805      	ldr	r0, [pc, #20]	; (33f0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    33da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    33de:	f000 b877 	b.w	34d0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    33e2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    33e6:	429a      	cmp	r2, r3
    33e8:	bf18      	it	ne
    33ea:	3301      	addne	r3, #1
    33ec:	60a3      	str	r3, [r4, #8]
}
    33ee:	e7f2      	b.n	33d6 <z_impl_k_sem_give+0x22>
    33f0:	2000029a 	.word	0x2000029a

000033f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    33f4:	b513      	push	{r0, r1, r4, lr}
    33f6:	f04f 0420 	mov.w	r4, #32
    33fa:	f3ef 8111 	mrs	r1, BASEPRI
    33fe:	f384 8812 	msr	BASEPRI_MAX, r4
    3402:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3406:	6884      	ldr	r4, [r0, #8]
    3408:	b144      	cbz	r4, 341c <z_impl_k_sem_take+0x28>
		sem->count--;
    340a:	3c01      	subs	r4, #1
    340c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    340e:	f381 8811 	msr	BASEPRI, r1
    3412:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3416:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3418:	b002      	add	sp, #8
    341a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    341c:	ea52 0403 	orrs.w	r4, r2, r3
    3420:	d106      	bne.n	3430 <z_impl_k_sem_take+0x3c>
    3422:	f381 8811 	msr	BASEPRI, r1
    3426:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    342a:	f06f 000f 	mvn.w	r0, #15
    342e:	e7f3      	b.n	3418 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3430:	e9cd 2300 	strd	r2, r3, [sp]
    3434:	4602      	mov	r2, r0
    3436:	4802      	ldr	r0, [pc, #8]	; (3440 <z_impl_k_sem_take+0x4c>)
    3438:	f000 f99c 	bl	3774 <z_pend_curr>
	return ret;
    343c:	e7ec      	b.n	3418 <z_impl_k_sem_take+0x24>
    343e:	bf00      	nop
    3440:	2000029a 	.word	0x2000029a

00003444 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3444:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3446:	4c08      	ldr	r4, [pc, #32]	; (3468 <z_reset_time_slice+0x24>)
    3448:	6823      	ldr	r3, [r4, #0]
    344a:	b15b      	cbz	r3, 3464 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    344c:	f7ff f8fc 	bl	2648 <sys_clock_elapsed>
    3450:	4603      	mov	r3, r0
    3452:	6820      	ldr	r0, [r4, #0]
    3454:	4a05      	ldr	r2, [pc, #20]	; (346c <z_reset_time_slice+0x28>)
    3456:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    3458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    345c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    345e:	2100      	movs	r1, #0
    3460:	f000 bff9 	b.w	4456 <z_set_timeout_expiry>
}
    3464:	bd10      	pop	{r4, pc}
    3466:	bf00      	nop
    3468:	20000290 	.word	0x20000290
    346c:	20000260 	.word	0x20000260

00003470 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3472:	4604      	mov	r4, r0
    3474:	460d      	mov	r5, r1
	__asm__ volatile(
    3476:	f04f 0320 	mov.w	r3, #32
    347a:	f3ef 8611 	mrs	r6, BASEPRI
    347e:	f383 8812 	msr	BASEPRI_MAX, r3
    3482:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3486:	4b0f      	ldr	r3, [pc, #60]	; (34c4 <k_sched_time_slice_set+0x54>)
    3488:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    348a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    348e:	f240 30e7 	movw	r0, #999	; 0x3e7
    3492:	6119      	str	r1, [r3, #16]
    3494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3498:	2300      	movs	r3, #0
    349a:	fbe4 0107 	umlal	r0, r1, r4, r7
    349e:	f7fd fe2f 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    34a2:	2c00      	cmp	r4, #0
    34a4:	4b08      	ldr	r3, [pc, #32]	; (34c8 <k_sched_time_slice_set+0x58>)
    34a6:	dc09      	bgt.n	34bc <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    34a8:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    34aa:	4b08      	ldr	r3, [pc, #32]	; (34cc <k_sched_time_slice_set+0x5c>)
    34ac:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    34ae:	f7ff ffc9 	bl	3444 <z_reset_time_slice>
	__asm__ volatile(
    34b2:	f386 8811 	msr	BASEPRI, r6
    34b6:	f3bf 8f6f 	isb	sy
	}
}
    34ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    34bc:	2802      	cmp	r0, #2
    34be:	bfb8      	it	lt
    34c0:	2002      	movlt	r0, #2
    34c2:	e7f1      	b.n	34a8 <k_sched_time_slice_set+0x38>
    34c4:	20000260 	.word	0x20000260
    34c8:	20000290 	.word	0x20000290
    34cc:	2000028c 	.word	0x2000028c

000034d0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    34d0:	b949      	cbnz	r1, 34e6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    34d2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    34d6:	b930      	cbnz	r0, 34e6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    34d8:	4b05      	ldr	r3, [pc, #20]	; (34f0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    34da:	69da      	ldr	r2, [r3, #28]
    34dc:	689b      	ldr	r3, [r3, #8]
    34de:	429a      	cmp	r2, r3
    34e0:	d001      	beq.n	34e6 <z_reschedule+0x16>
	ret = arch_swap(key);
    34e2:	f7fe b9e5 	b.w	18b0 <arch_swap>
    34e6:	f381 8811 	msr	BASEPRI, r1
    34ea:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    34ee:	4770      	bx	lr
    34f0:	20000260 	.word	0x20000260

000034f4 <k_sched_lock>:
	__asm__ volatile(
    34f4:	f04f 0320 	mov.w	r3, #32
    34f8:	f3ef 8111 	mrs	r1, BASEPRI
    34fc:	f383 8812 	msr	BASEPRI_MAX, r3
    3500:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3504:	4b04      	ldr	r3, [pc, #16]	; (3518 <k_sched_lock+0x24>)
    3506:	689a      	ldr	r2, [r3, #8]
    3508:	7bd3      	ldrb	r3, [r2, #15]
    350a:	3b01      	subs	r3, #1
    350c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    350e:	f381 8811 	msr	BASEPRI, r1
    3512:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3516:	4770      	bx	lr
    3518:	20000260 	.word	0x20000260

0000351c <update_cache>:
{
    351c:	b538      	push	{r3, r4, r5, lr}
    351e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3520:	480c      	ldr	r0, [pc, #48]	; (3554 <update_cache+0x38>)
    3522:	4d0d      	ldr	r5, [pc, #52]	; (3558 <update_cache+0x3c>)
    3524:	f000 fef7 	bl	4316 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3528:	4604      	mov	r4, r0
    352a:	b900      	cbnz	r0, 352e <update_cache+0x12>
    352c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    352e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3530:	b94a      	cbnz	r2, 3546 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    3532:	7b5a      	ldrb	r2, [r3, #13]
    3534:	06d2      	lsls	r2, r2, #27
    3536:	d106      	bne.n	3546 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3538:	69a2      	ldr	r2, [r4, #24]
    353a:	b922      	cbnz	r2, 3546 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    353c:	89da      	ldrh	r2, [r3, #14]
    353e:	2a7f      	cmp	r2, #127	; 0x7f
    3540:	d901      	bls.n	3546 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    3542:	61eb      	str	r3, [r5, #28]
}
    3544:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3546:	429c      	cmp	r4, r3
    3548:	d001      	beq.n	354e <update_cache+0x32>
			z_reset_time_slice();
    354a:	f7ff ff7b 	bl	3444 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    354e:	61ec      	str	r4, [r5, #28]
}
    3550:	e7f8      	b.n	3544 <update_cache+0x28>
    3552:	bf00      	nop
    3554:	20000280 	.word	0x20000280
    3558:	20000260 	.word	0x20000260

0000355c <move_thread_to_end_of_prio_q>:
{
    355c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    355e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3562:	7b43      	ldrb	r3, [r0, #13]
    3564:	2a00      	cmp	r2, #0
{
    3566:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3568:	da04      	bge.n	3574 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    356a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    356e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3570:	f000 fea9 	bl	42c6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3574:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3576:	4a15      	ldr	r2, [pc, #84]	; (35cc <move_thread_to_end_of_prio_q+0x70>)
    3578:	f063 037f 	orn	r3, r3, #127	; 0x7f
    357c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    357e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3582:	f102 0520 	add.w	r5, r2, #32
    3586:	42ab      	cmp	r3, r5
    3588:	d01b      	beq.n	35c2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    358a:	b1d3      	cbz	r3, 35c2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    358c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3590:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    3594:	4286      	cmp	r6, r0
    3596:	d00f      	beq.n	35b8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    3598:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    359a:	2800      	cmp	r0, #0
    359c:	dd0c      	ble.n	35b8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    359e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    35a0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    35a4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    35a6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    35a8:	6890      	ldr	r0, [r2, #8]
    35aa:	1a43      	subs	r3, r0, r1
    35ac:	4258      	negs	r0, r3
}
    35ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    35b2:	4158      	adcs	r0, r3
    35b4:	f7ff bfb2 	b.w	351c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    35b8:	42a3      	cmp	r3, r4
    35ba:	d002      	beq.n	35c2 <move_thread_to_end_of_prio_q+0x66>
    35bc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    35be:	2b00      	cmp	r3, #0
    35c0:	d1e6      	bne.n	3590 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    35c2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    35c6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    35c8:	6251      	str	r1, [r2, #36]	; 0x24
}
    35ca:	e7ed      	b.n	35a8 <move_thread_to_end_of_prio_q+0x4c>
    35cc:	20000260 	.word	0x20000260

000035d0 <z_time_slice>:
{
    35d0:	b538      	push	{r3, r4, r5, lr}
    35d2:	4601      	mov	r1, r0
	__asm__ volatile(
    35d4:	f04f 0320 	mov.w	r3, #32
    35d8:	f3ef 8411 	mrs	r4, BASEPRI
    35dc:	f383 8812 	msr	BASEPRI_MAX, r3
    35e0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    35e4:	4b15      	ldr	r3, [pc, #84]	; (363c <z_time_slice+0x6c>)
    35e6:	4a16      	ldr	r2, [pc, #88]	; (3640 <z_time_slice+0x70>)
    35e8:	6898      	ldr	r0, [r3, #8]
    35ea:	6815      	ldr	r5, [r2, #0]
    35ec:	42a8      	cmp	r0, r5
    35ee:	d106      	bne.n	35fe <z_time_slice+0x2e>
			z_reset_time_slice();
    35f0:	f7ff ff28 	bl	3444 <z_reset_time_slice>
	__asm__ volatile(
    35f4:	f384 8811 	msr	BASEPRI, r4
    35f8:	f3bf 8f6f 	isb	sy
}
    35fc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    35fe:	2500      	movs	r5, #0
    3600:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    3602:	4a10      	ldr	r2, [pc, #64]	; (3644 <z_time_slice+0x74>)
    3604:	6812      	ldr	r2, [r2, #0]
    3606:	b1ba      	cbz	r2, 3638 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    3608:	89c2      	ldrh	r2, [r0, #14]
    360a:	2a7f      	cmp	r2, #127	; 0x7f
    360c:	d814      	bhi.n	3638 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    360e:	7b42      	ldrb	r2, [r0, #13]
    3610:	06d2      	lsls	r2, r2, #27
    3612:	d111      	bne.n	3638 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3614:	4a0c      	ldr	r2, [pc, #48]	; (3648 <z_time_slice+0x78>)
    3616:	f990 500e 	ldrsb.w	r5, [r0, #14]
    361a:	6812      	ldr	r2, [r2, #0]
    361c:	4295      	cmp	r5, r2
    361e:	db0b      	blt.n	3638 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    3620:	4a0a      	ldr	r2, [pc, #40]	; (364c <z_time_slice+0x7c>)
    3622:	4290      	cmp	r0, r2
    3624:	d008      	beq.n	3638 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    3626:	691a      	ldr	r2, [r3, #16]
    3628:	428a      	cmp	r2, r1
    362a:	dc02      	bgt.n	3632 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    362c:	f7ff ff96 	bl	355c <move_thread_to_end_of_prio_q>
    3630:	e7de      	b.n	35f0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    3632:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    3634:	611a      	str	r2, [r3, #16]
    3636:	e7dd      	b.n	35f4 <z_time_slice+0x24>
    3638:	2200      	movs	r2, #0
    363a:	e7fb      	b.n	3634 <z_time_slice+0x64>
    363c:	20000260 	.word	0x20000260
    3640:	20000288 	.word	0x20000288
    3644:	20000290 	.word	0x20000290
    3648:	2000028c 	.word	0x2000028c
    364c:	20000098 	.word	0x20000098

00003650 <ready_thread>:
{
    3650:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3652:	f990 200d 	ldrsb.w	r2, [r0, #13]
    3656:	7b43      	ldrb	r3, [r0, #13]
    3658:	2a00      	cmp	r2, #0
    365a:	db2a      	blt.n	36b2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    365c:	06da      	lsls	r2, r3, #27
    365e:	d128      	bne.n	36b2 <ready_thread+0x62>
    3660:	6982      	ldr	r2, [r0, #24]
    3662:	bb32      	cbnz	r2, 36b2 <ready_thread+0x62>
	return list->head == list;
    3664:	4a14      	ldr	r2, [pc, #80]	; (36b8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3666:	f063 037f 	orn	r3, r3, #127	; 0x7f
    366a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    366c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3670:	f102 0520 	add.w	r5, r2, #32
    3674:	42ab      	cmp	r3, r5
    3676:	d017      	beq.n	36a8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3678:	b1b3      	cbz	r3, 36a8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    367a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    367e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3682:	428e      	cmp	r6, r1
    3684:	d00b      	beq.n	369e <ready_thread+0x4e>
		return b2 - b1;
    3686:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3688:	2900      	cmp	r1, #0
    368a:	dd08      	ble.n	369e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    368c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    368e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3692:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3694:	6058      	str	r0, [r3, #4]
}
    3696:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3698:	2000      	movs	r0, #0
    369a:	f7ff bf3f 	b.w	351c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    369e:	42a3      	cmp	r3, r4
    36a0:	d002      	beq.n	36a8 <ready_thread+0x58>
    36a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    36a4:	2b00      	cmp	r3, #0
    36a6:	d1ea      	bne.n	367e <ready_thread+0x2e>
	node->prev = tail;
    36a8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    36ac:	6020      	str	r0, [r4, #0]
	list->tail = node;
    36ae:	6250      	str	r0, [r2, #36]	; 0x24
}
    36b0:	e7f1      	b.n	3696 <ready_thread+0x46>
}
    36b2:	bc70      	pop	{r4, r5, r6}
    36b4:	4770      	bx	lr
    36b6:	bf00      	nop
    36b8:	20000260 	.word	0x20000260

000036bc <z_sched_start>:
{
    36bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    36be:	f04f 0220 	mov.w	r2, #32
    36c2:	f3ef 8411 	mrs	r4, BASEPRI
    36c6:	f382 8812 	msr	BASEPRI_MAX, r2
    36ca:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    36ce:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    36d0:	0751      	lsls	r1, r2, #29
    36d2:	d404      	bmi.n	36de <z_sched_start+0x22>
	__asm__ volatile(
    36d4:	f384 8811 	msr	BASEPRI, r4
    36d8:	f3bf 8f6f 	isb	sy
}
    36dc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    36de:	f022 0204 	bic.w	r2, r2, #4
    36e2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    36e4:	f7ff ffb4 	bl	3650 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    36e8:	4621      	mov	r1, r4
    36ea:	4802      	ldr	r0, [pc, #8]	; (36f4 <z_sched_start+0x38>)
}
    36ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    36f0:	f7ff beee 	b.w	34d0 <z_reschedule>
    36f4:	2000029a 	.word	0x2000029a

000036f8 <unready_thread>:
{
    36f8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    36fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    36fe:	7b43      	ldrb	r3, [r0, #13]
    3700:	2a00      	cmp	r2, #0
{
    3702:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3704:	da04      	bge.n	3710 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    370a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    370c:	f000 fddb 	bl	42c6 <sys_dlist_remove>
	update_cache(thread == _current);
    3710:	4b04      	ldr	r3, [pc, #16]	; (3724 <unready_thread+0x2c>)
    3712:	6898      	ldr	r0, [r3, #8]
    3714:	1a43      	subs	r3, r0, r1
    3716:	4258      	negs	r0, r3
    3718:	4158      	adcs	r0, r3
}
    371a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    371e:	f7ff befd 	b.w	351c <update_cache>
    3722:	bf00      	nop
    3724:	20000260 	.word	0x20000260

00003728 <pend>:
{
    3728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    372c:	4606      	mov	r6, r0
    372e:	4615      	mov	r5, r2
    3730:	461c      	mov	r4, r3
	__asm__ volatile(
    3732:	f04f 0320 	mov.w	r3, #32
    3736:	f3ef 8711 	mrs	r7, BASEPRI
    373a:	f383 8812 	msr	BASEPRI_MAX, r3
    373e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3742:	f000 fe20 	bl	4386 <add_to_waitq_locked>
	__asm__ volatile(
    3746:	f387 8811 	msr	BASEPRI, r7
    374a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    374e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3752:	bf08      	it	eq
    3754:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3758:	d008      	beq.n	376c <pend+0x44>
    375a:	462a      	mov	r2, r5
    375c:	4623      	mov	r3, r4
    375e:	f106 0018 	add.w	r0, r6, #24
    3762:	4903      	ldr	r1, [pc, #12]	; (3770 <pend+0x48>)
}
    3764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3768:	f000 b9d2 	b.w	3b10 <z_add_timeout>
    376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3770:	00004343 	.word	0x00004343

00003774 <z_pend_curr>:
{
    3774:	b510      	push	{r4, lr}
	pending_current = _current;
    3776:	4b07      	ldr	r3, [pc, #28]	; (3794 <z_pend_curr+0x20>)
    3778:	6898      	ldr	r0, [r3, #8]
    377a:	4b07      	ldr	r3, [pc, #28]	; (3798 <z_pend_curr+0x24>)
{
    377c:	460c      	mov	r4, r1
	pending_current = _current;
    377e:	6018      	str	r0, [r3, #0]
{
    3780:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    3782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3786:	f7ff ffcf 	bl	3728 <pend>
    378a:	4620      	mov	r0, r4
}
    378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3790:	f7fe b88e 	b.w	18b0 <arch_swap>
    3794:	20000260 	.word	0x20000260
    3798:	20000288 	.word	0x20000288

0000379c <z_impl_k_thread_suspend>:
{
    379c:	b570      	push	{r4, r5, r6, lr}
    379e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    37a0:	3018      	adds	r0, #24
    37a2:	f000 fe32 	bl	440a <z_abort_timeout>
	__asm__ volatile(
    37a6:	f04f 0320 	mov.w	r3, #32
    37aa:	f3ef 8611 	mrs	r6, BASEPRI
    37ae:	f383 8812 	msr	BASEPRI_MAX, r3
    37b2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    37b6:	f994 200d 	ldrsb.w	r2, [r4, #13]
    37ba:	7b63      	ldrb	r3, [r4, #13]
    37bc:	2a00      	cmp	r2, #0
    37be:	da05      	bge.n	37cc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    37c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    37c4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    37c6:	4620      	mov	r0, r4
    37c8:	f000 fd7d 	bl	42c6 <sys_dlist_remove>
		update_cache(thread == _current);
    37cc:	4d0b      	ldr	r5, [pc, #44]	; (37fc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    37ce:	7b63      	ldrb	r3, [r4, #13]
    37d0:	68a8      	ldr	r0, [r5, #8]
    37d2:	f043 0310 	orr.w	r3, r3, #16
    37d6:	7363      	strb	r3, [r4, #13]
    37d8:	1b03      	subs	r3, r0, r4
    37da:	4258      	negs	r0, r3
    37dc:	4158      	adcs	r0, r3
    37de:	f7ff fe9d 	bl	351c <update_cache>
	__asm__ volatile(
    37e2:	f386 8811 	msr	BASEPRI, r6
    37e6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    37ea:	68ab      	ldr	r3, [r5, #8]
    37ec:	42a3      	cmp	r3, r4
    37ee:	d103      	bne.n	37f8 <z_impl_k_thread_suspend+0x5c>
}
    37f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    37f4:	f000 bd85 	b.w	4302 <z_reschedule_unlocked>
}
    37f8:	bd70      	pop	{r4, r5, r6, pc}
    37fa:	bf00      	nop
    37fc:	20000260 	.word	0x20000260

00003800 <k_sched_unlock>:
{
    3800:	b510      	push	{r4, lr}
	__asm__ volatile(
    3802:	f04f 0320 	mov.w	r3, #32
    3806:	f3ef 8411 	mrs	r4, BASEPRI
    380a:	f383 8812 	msr	BASEPRI_MAX, r3
    380e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3812:	4b08      	ldr	r3, [pc, #32]	; (3834 <k_sched_unlock+0x34>)
    3814:	689a      	ldr	r2, [r3, #8]
    3816:	7bd3      	ldrb	r3, [r2, #15]
    3818:	3301      	adds	r3, #1
    381a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    381c:	2000      	movs	r0, #0
    381e:	f7ff fe7d 	bl	351c <update_cache>
	__asm__ volatile(
    3822:	f384 8811 	msr	BASEPRI, r4
    3826:	f3bf 8f6f 	isb	sy
}
    382a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    382e:	f000 bd68 	b.w	4302 <z_reschedule_unlocked>
    3832:	bf00      	nop
    3834:	20000260 	.word	0x20000260

00003838 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <_flash_used>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    383a:	2100      	movs	r1, #0
    383c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3840:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3844:	4608      	mov	r0, r1
    3846:	f7ff be13 	b.w	3470 <k_sched_time_slice_set>
    384a:	bf00      	nop
    384c:	20000260 	.word	0x20000260

00003850 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    3850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3852:	f04f 0320 	mov.w	r3, #32
    3856:	f3ef 8511 	mrs	r5, BASEPRI
    385a:	f383 8812 	msr	BASEPRI_MAX, r3
    385e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3862:	491a      	ldr	r1, [pc, #104]	; (38cc <z_impl_k_yield+0x7c>)
    3864:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3866:	7b43      	ldrb	r3, [r0, #13]
    3868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    386c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    386e:	f000 fd2a 	bl	42c6 <sys_dlist_remove>
	}
	queue_thread(_current);
    3872:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3874:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3876:	4608      	mov	r0, r1
    3878:	f062 027f 	orn	r2, r2, #127	; 0x7f
    387c:	735a      	strb	r2, [r3, #13]
    387e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3882:	4282      	cmp	r2, r0
    3884:	d01c      	beq.n	38c0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3886:	b1da      	cbz	r2, 38c0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    3888:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    388a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    388e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    3892:	42a6      	cmp	r6, r4
    3894:	d00f      	beq.n	38b6 <z_impl_k_yield+0x66>
		return b2 - b1;
    3896:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3898:	2c00      	cmp	r4, #0
    389a:	dd0c      	ble.n	38b6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    389c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    389e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    38a2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    38a4:	6053      	str	r3, [r2, #4]
	update_cache(1);
    38a6:	2001      	movs	r0, #1
    38a8:	f7ff fe38 	bl	351c <update_cache>
    38ac:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    38ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    38b2:	f7fd bffd 	b.w	18b0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    38b6:	42ba      	cmp	r2, r7
    38b8:	d002      	beq.n	38c0 <z_impl_k_yield+0x70>
    38ba:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    38bc:	2a00      	cmp	r2, #0
    38be:	d1e6      	bne.n	388e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    38c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    38c2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    38c6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    38c8:	624b      	str	r3, [r1, #36]	; 0x24
}
    38ca:	e7ec      	b.n	38a6 <z_impl_k_yield+0x56>
    38cc:	20000260 	.word	0x20000260

000038d0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    38d0:	ea50 0301 	orrs.w	r3, r0, r1
{
    38d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38d8:	4605      	mov	r5, r0
    38da:	460e      	mov	r6, r1
	if (ticks == 0) {
    38dc:	d103      	bne.n	38e6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    38de:	f7ff ffb7 	bl	3850 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    38e2:	2000      	movs	r0, #0
    38e4:	e033      	b.n	394e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    38e6:	f06f 0401 	mvn.w	r4, #1
    38ea:	1a24      	subs	r4, r4, r0
    38ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    38f0:	eb63 0301 	sbc.w	r3, r3, r1
    38f4:	2c01      	cmp	r4, #1
    38f6:	f173 0300 	sbcs.w	r3, r3, #0
    38fa:	da02      	bge.n	3902 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    38fc:	f000 fdc5 	bl	448a <sys_clock_tick_get_32>
    3900:	1944      	adds	r4, r0, r5
    3902:	f04f 0320 	mov.w	r3, #32
    3906:	f3ef 8811 	mrs	r8, BASEPRI
    390a:	f383 8812 	msr	BASEPRI_MAX, r3
    390e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3912:	4f10      	ldr	r7, [pc, #64]	; (3954 <z_tick_sleep+0x84>)
    3914:	4b10      	ldr	r3, [pc, #64]	; (3958 <z_tick_sleep+0x88>)
    3916:	68b8      	ldr	r0, [r7, #8]
    3918:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    391a:	f7ff feed 	bl	36f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    391e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3920:	490e      	ldr	r1, [pc, #56]	; (395c <z_tick_sleep+0x8c>)
    3922:	462a      	mov	r2, r5
    3924:	4633      	mov	r3, r6
    3926:	3018      	adds	r0, #24
    3928:	f000 f8f2 	bl	3b10 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    392c:	68ba      	ldr	r2, [r7, #8]
    392e:	7b53      	ldrb	r3, [r2, #13]
    3930:	f043 0310 	orr.w	r3, r3, #16
    3934:	7353      	strb	r3, [r2, #13]
    3936:	4640      	mov	r0, r8
    3938:	f7fd ffba 	bl	18b0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    393c:	f000 fda5 	bl	448a <sys_clock_tick_get_32>
    3940:	1a20      	subs	r0, r4, r0
    3942:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3946:	2801      	cmp	r0, #1
    3948:	f173 0300 	sbcs.w	r3, r3, #0
    394c:	dbc9      	blt.n	38e2 <z_tick_sleep+0x12>
}
    394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3952:	bf00      	nop
    3954:	20000260 	.word	0x20000260
    3958:	20000288 	.word	0x20000288
    395c:	00004343 	.word	0x00004343

00003960 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3960:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3964:	bf08      	it	eq
    3966:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    396a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    396c:	d106      	bne.n	397c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    396e:	4b08      	ldr	r3, [pc, #32]	; (3990 <z_impl_k_sleep+0x30>)
    3970:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3972:	f7ff ff13 	bl	379c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    397a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    397c:	f7ff ffa8 	bl	38d0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    3980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3984:	fb80 0303 	smull	r0, r3, r0, r3
    3988:	0bc0      	lsrs	r0, r0, #15
    398a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    398e:	e7f4      	b.n	397a <z_impl_k_sleep+0x1a>
    3990:	20000260 	.word	0x20000260

00003994 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3994:	4b01      	ldr	r3, [pc, #4]	; (399c <z_impl_z_current_get+0x8>)
    3996:	6898      	ldr	r0, [r3, #8]
    3998:	4770      	bx	lr
    399a:	bf00      	nop
    399c:	20000260 	.word	0x20000260

000039a0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    39a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39a4:	4604      	mov	r4, r0
    39a6:	f04f 0320 	mov.w	r3, #32
    39aa:	f3ef 8611 	mrs	r6, BASEPRI
    39ae:	f383 8812 	msr	BASEPRI_MAX, r3
    39b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    39b6:	7b43      	ldrb	r3, [r0, #13]
    39b8:	071a      	lsls	r2, r3, #28
    39ba:	d505      	bpl.n	39c8 <z_thread_abort+0x28>
	__asm__ volatile(
    39bc:	f386 8811 	msr	BASEPRI, r6
    39c0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    39c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    39c8:	f023 0220 	bic.w	r2, r3, #32
    39cc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    39d0:	09d2      	lsrs	r2, r2, #7
    39d2:	d120      	bne.n	3a16 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    39d4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    39d6:	68a3      	ldr	r3, [r4, #8]
    39d8:	b113      	cbz	r3, 39e0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    39da:	4620      	mov	r0, r4
    39dc:	f000 fc7b 	bl	42d6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    39e0:	f104 0018 	add.w	r0, r4, #24
    39e4:	f000 fd11 	bl	440a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    39e8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    39ec:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    39f0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39f2:	42bd      	cmp	r5, r7
    39f4:	d000      	beq.n	39f8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    39f6:	b9b5      	cbnz	r5, 3a26 <z_thread_abort+0x86>
		update_cache(1);
    39f8:	2001      	movs	r0, #1
    39fa:	f7ff fd8f 	bl	351c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    39fe:	4b10      	ldr	r3, [pc, #64]	; (3a40 <z_thread_abort+0xa0>)
    3a00:	689b      	ldr	r3, [r3, #8]
    3a02:	42a3      	cmp	r3, r4
    3a04:	d1da      	bne.n	39bc <z_thread_abort+0x1c>
    3a06:	f3ef 8305 	mrs	r3, IPSR
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d1d6      	bne.n	39bc <z_thread_abort+0x1c>
    3a0e:	4630      	mov	r0, r6
    3a10:	f7fd ff4e 	bl	18b0 <arch_swap>
	return ret;
    3a14:	e7d2      	b.n	39bc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a16:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3a1a:	f043 0308 	orr.w	r3, r3, #8
    3a1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3a20:	f000 fc51 	bl	42c6 <sys_dlist_remove>
}
    3a24:	e7d7      	b.n	39d6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    3a26:	4628      	mov	r0, r5
    3a28:	f000 fc55 	bl	42d6 <unpend_thread_no_timeout>
    3a2c:	f105 0018 	add.w	r0, r5, #24
    3a30:	f000 fceb 	bl	440a <z_abort_timeout>
    3a34:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3a38:	4628      	mov	r0, r5
    3a3a:	f7ff fe09 	bl	3650 <ready_thread>
    3a3e:	e7d7      	b.n	39f0 <z_thread_abort+0x50>
    3a40:	20000260 	.word	0x20000260

00003a44 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3a44:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    3a46:	4806      	ldr	r0, [pc, #24]	; (3a60 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    3a48:	4a06      	ldr	r2, [pc, #24]	; (3a64 <z_data_copy+0x20>)
    3a4a:	4907      	ldr	r1, [pc, #28]	; (3a68 <z_data_copy+0x24>)
    3a4c:	1a12      	subs	r2, r2, r0
    3a4e:	f000 fa58 	bl	3f02 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3a56:	4a05      	ldr	r2, [pc, #20]	; (3a6c <z_data_copy+0x28>)
    3a58:	4905      	ldr	r1, [pc, #20]	; (3a70 <z_data_copy+0x2c>)
    3a5a:	4806      	ldr	r0, [pc, #24]	; (3a74 <z_data_copy+0x30>)
    3a5c:	f000 ba51 	b.w	3f02 <memcpy>
    3a60:	20000000 	.word	0x20000000
    3a64:	20000094 	.word	0x20000094
    3a68:	000047b8 	.word	0x000047b8
    3a6c:	00000000 	.word	0x00000000
    3a70:	000047b8 	.word	0x000047b8
    3a74:	20000000 	.word	0x20000000

00003a78 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3a78:	4b03      	ldr	r3, [pc, #12]	; (3a88 <elapsed+0x10>)
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	b90b      	cbnz	r3, 3a82 <elapsed+0xa>
    3a7e:	f7fe bde3 	b.w	2648 <sys_clock_elapsed>
}
    3a82:	2000      	movs	r0, #0
    3a84:	4770      	bx	lr
    3a86:	bf00      	nop
    3a88:	20000294 	.word	0x20000294

00003a8c <next_timeout>:
	return list->head == list;
    3a8c:	4b11      	ldr	r3, [pc, #68]	; (3ad4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    3a8e:	b510      	push	{r4, lr}
    3a90:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a92:	429c      	cmp	r4, r3
    3a94:	bf08      	it	eq
    3a96:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3a98:	f7ff ffee 	bl	3a78 <elapsed>
    3a9c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    3a9e:	b16c      	cbz	r4, 3abc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3aa0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    3aa4:	1ac0      	subs	r0, r0, r3
    3aa6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3aaa:	2801      	cmp	r0, #1
    3aac:	f173 0200 	sbcs.w	r2, r3, #0
    3ab0:	db0d      	blt.n	3ace <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3ab2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    3ab6:	f173 0300 	sbcs.w	r3, r3, #0
    3aba:	db01      	blt.n	3ac0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    3abc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3ac0:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <next_timeout+0x4c>)
    3ac2:	691b      	ldr	r3, [r3, #16]
    3ac4:	b113      	cbz	r3, 3acc <next_timeout+0x40>
    3ac6:	4298      	cmp	r0, r3
    3ac8:	bfa8      	it	ge
    3aca:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3acc:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3ace:	2000      	movs	r0, #0
    3ad0:	e7f6      	b.n	3ac0 <next_timeout+0x34>
    3ad2:	bf00      	nop
    3ad4:	20000080 	.word	0x20000080
    3ad8:	20000260 	.word	0x20000260

00003adc <remove_timeout>:
{
    3adc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    3ade:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3ae0:	b168      	cbz	r0, 3afe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3ae2:	4a0a      	ldr	r2, [pc, #40]	; (3b0c <remove_timeout+0x30>)
    3ae4:	6852      	ldr	r2, [r2, #4]
    3ae6:	4290      	cmp	r0, r2
    3ae8:	d009      	beq.n	3afe <remove_timeout+0x22>
	if (next(t) != NULL) {
    3aea:	b143      	cbz	r3, 3afe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3aec:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3af0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3af4:	1912      	adds	r2, r2, r4
    3af6:	eb41 0105 	adc.w	r1, r1, r5
    3afa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    3afe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    3b00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3b02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3b04:	2300      	movs	r3, #0
	node->prev = NULL;
    3b06:	e9c0 3300 	strd	r3, r3, [r0]
}
    3b0a:	bd30      	pop	{r4, r5, pc}
    3b0c:	20000080 	.word	0x20000080

00003b10 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3b14:	bf08      	it	eq
    3b16:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1c:	4604      	mov	r4, r0
    3b1e:	461f      	mov	r7, r3
    3b20:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b22:	d067      	beq.n	3bf4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3b24:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3b26:	f04f 0320 	mov.w	r3, #32
    3b2a:	f3ef 8611 	mrs	r6, BASEPRI
    3b2e:	f383 8812 	msr	BASEPRI_MAX, r3
    3b32:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    3b36:	f06f 0201 	mvn.w	r2, #1
    3b3a:	1b53      	subs	r3, r2, r5
    3b3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    3b40:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3b44:	2b00      	cmp	r3, #0
    3b46:	db1b      	blt.n	3b80 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3b48:	4b2b      	ldr	r3, [pc, #172]	; (3bf8 <z_add_timeout+0xe8>)
    3b4a:	e9d3 1300 	ldrd	r1, r3, [r3]
    3b4e:	1a52      	subs	r2, r2, r1
    3b50:	eb6c 0303 	sbc.w	r3, ip, r3
    3b54:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    3b56:	eb63 0307 	sbc.w	r3, r3, r7
    3b5a:	2d01      	cmp	r5, #1
    3b5c:	f173 0200 	sbcs.w	r2, r3, #0
    3b60:	bfbc      	itt	lt
    3b62:	2501      	movlt	r5, #1
    3b64:	2300      	movlt	r3, #0
    3b66:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    3b6a:	4824      	ldr	r0, [pc, #144]	; (3bfc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    3b6c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b70:	4283      	cmp	r3, r0
    3b72:	d118      	bne.n	3ba6 <z_add_timeout+0x96>
	node->prev = tail;
    3b74:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    3b78:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    3b7c:	6044      	str	r4, [r0, #4]
}
    3b7e:	e026      	b.n	3bce <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    3b80:	f7ff ff7a 	bl	3a78 <elapsed>
    3b84:	3501      	adds	r5, #1
    3b86:	f147 0700 	adc.w	r7, r7, #0
    3b8a:	182d      	adds	r5, r5, r0
    3b8c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    3b90:	e9c4 5704 	strd	r5, r7, [r4, #16]
    3b94:	e7e9      	b.n	3b6a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    3b96:	1a52      	subs	r2, r2, r1
    3b98:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    3b9c:	459c      	cmp	ip, r3
    3b9e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    3ba2:	d0e7      	beq.n	3b74 <z_add_timeout+0x64>
    3ba4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	d0e4      	beq.n	3b74 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    3baa:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    3bae:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    3bb2:	428a      	cmp	r2, r1
    3bb4:	eb75 0e07 	sbcs.w	lr, r5, r7
    3bb8:	daed      	bge.n	3b96 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    3bba:	1a8a      	subs	r2, r1, r2
    3bbc:	eb67 0505 	sbc.w	r5, r7, r5
    3bc0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    3bc4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3bc6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3bca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3bcc:	605c      	str	r4, [r3, #4]
	return list->head == list;
    3bce:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bd0:	4283      	cmp	r3, r0
    3bd2:	d00b      	beq.n	3bec <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3bd4:	429c      	cmp	r4, r3
    3bd6:	d109      	bne.n	3bec <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3bd8:	f7ff ff58 	bl	3a8c <next_timeout>

			if (next_time == 0 ||
    3bdc:	b118      	cbz	r0, 3be6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    3bde:	4b08      	ldr	r3, [pc, #32]	; (3c00 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    3be0:	691b      	ldr	r3, [r3, #16]
    3be2:	4283      	cmp	r3, r0
    3be4:	d002      	beq.n	3bec <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    3be6:	2100      	movs	r1, #0
    3be8:	f7fe fcfc 	bl	25e4 <sys_clock_set_timeout>
	__asm__ volatile(
    3bec:	f386 8811 	msr	BASEPRI, r6
    3bf0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bf6:	bf00      	nop
    3bf8:	20000198 	.word	0x20000198
    3bfc:	20000080 	.word	0x20000080
    3c00:	20000260 	.word	0x20000260

00003c04 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3c08:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3c0a:	f7ff fce1 	bl	35d0 <z_time_slice>
	__asm__ volatile(
    3c0e:	f04f 0320 	mov.w	r3, #32
    3c12:	f3ef 8411 	mrs	r4, BASEPRI
    3c16:	f383 8812 	msr	BASEPRI_MAX, r3
    3c1a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3c1e:	4e24      	ldr	r6, [pc, #144]	; (3cb0 <sys_clock_announce+0xac>)
	return list->head == list;
    3c20:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3cb4 <sys_clock_announce+0xb0>
    3c24:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3c26:	4d24      	ldr	r5, [pc, #144]	; (3cb8 <sys_clock_announce+0xb4>)
    3c28:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3c2c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c2e:	4540      	cmp	r0, r8
		curr_tick += dt;
    3c30:	e9d5 1e00 	ldrd	r1, lr, [r5]
    3c34:	ea4f 77e2 	mov.w	r7, r2, asr #31
    3c38:	d00b      	beq.n	3c52 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3c3a:	b150      	cbz	r0, 3c52 <sys_clock_announce+0x4e>
    3c3c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    3c40:	429a      	cmp	r2, r3
    3c42:	eb77 090c 	sbcs.w	r9, r7, ip
    3c46:	da16      	bge.n	3c76 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3c48:	1a9b      	subs	r3, r3, r2
    3c4a:	eb6c 0c07 	sbc.w	ip, ip, r7
    3c4e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    3c52:	1852      	adds	r2, r2, r1
    3c54:	eb4e 0707 	adc.w	r7, lr, r7
    3c58:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    3c5c:	2500      	movs	r5, #0
    3c5e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3c60:	f7ff ff14 	bl	3a8c <next_timeout>
    3c64:	4629      	mov	r1, r5
    3c66:	f7fe fcbd 	bl	25e4 <sys_clock_set_timeout>
	__asm__ volatile(
    3c6a:	f384 8811 	msr	BASEPRI, r4
    3c6e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3c76:	1859      	adds	r1, r3, r1
    3c78:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    3c7c:	1ad3      	subs	r3, r2, r3
    3c7e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    3c80:	2200      	movs	r2, #0
    3c82:	2300      	movs	r3, #0
    3c84:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    3c88:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    3c8c:	f7ff ff26 	bl	3adc <remove_timeout>
    3c90:	f384 8811 	msr	BASEPRI, r4
    3c94:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3c98:	6883      	ldr	r3, [r0, #8]
    3c9a:	4798      	blx	r3
	__asm__ volatile(
    3c9c:	f04f 0320 	mov.w	r3, #32
    3ca0:	f3ef 8411 	mrs	r4, BASEPRI
    3ca4:	f383 8812 	msr	BASEPRI_MAX, r3
    3ca8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3cac:	e7bc      	b.n	3c28 <sys_clock_announce+0x24>
    3cae:	bf00      	nop
    3cb0:	20000294 	.word	0x20000294
    3cb4:	20000080 	.word	0x20000080
    3cb8:	20000198 	.word	0x20000198

00003cbc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3cbc:	b510      	push	{r4, lr}
    3cbe:	f04f 0320 	mov.w	r3, #32
    3cc2:	f3ef 8411 	mrs	r4, BASEPRI
    3cc6:	f383 8812 	msr	BASEPRI_MAX, r3
    3cca:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    3cce:	f7fe fcbb 	bl	2648 <sys_clock_elapsed>
    3cd2:	4a05      	ldr	r2, [pc, #20]	; (3ce8 <sys_clock_tick_get+0x2c>)
    3cd4:	e9d2 3100 	ldrd	r3, r1, [r2]
    3cd8:	18c0      	adds	r0, r0, r3
    3cda:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    3cde:	f384 8811 	msr	BASEPRI, r4
    3ce2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3ce6:	bd10      	pop	{r4, pc}
    3ce8:	20000198 	.word	0x20000198

00003cec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3cec:	4b0e      	ldr	r3, [pc, #56]	; (3d28 <z_sys_init_run_level+0x3c>)
{
    3cee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3cf0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3cf4:	3001      	adds	r0, #1
    3cf6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3cfa:	42a6      	cmp	r6, r4
    3cfc:	d800      	bhi.n	3d00 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3d00:	e9d4 3500 	ldrd	r3, r5, [r4]
    3d04:	4628      	mov	r0, r5
    3d06:	4798      	blx	r3
		if (dev != NULL) {
    3d08:	b165      	cbz	r5, 3d24 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    3d0a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3d0c:	b130      	cbz	r0, 3d1c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3d0e:	2800      	cmp	r0, #0
    3d10:	bfb8      	it	lt
    3d12:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3d14:	28ff      	cmp	r0, #255	; 0xff
    3d16:	bfa8      	it	ge
    3d18:	20ff      	movge	r0, #255	; 0xff
    3d1a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3d1c:	785a      	ldrb	r2, [r3, #1]
    3d1e:	f042 0201 	orr.w	r2, r2, #1
    3d22:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3d24:	3408      	adds	r4, #8
    3d26:	e7e8      	b.n	3cfa <z_sys_init_run_level+0xe>
    3d28:	00004768 	.word	0x00004768

00003d2c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    3d2c:	4770      	bx	lr

00003d2e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3d2e:	4603      	mov	r3, r0
    3d30:	b158      	cbz	r0, 3d4a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3d32:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3d34:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3d38:	2a01      	cmp	r2, #1
    3d3a:	d003      	beq.n	3d44 <sys_notify_validate+0x16>
    3d3c:	2a03      	cmp	r2, #3
    3d3e:	d104      	bne.n	3d4a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3d40:	6802      	ldr	r2, [r0, #0]
    3d42:	b112      	cbz	r2, 3d4a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3d44:	2000      	movs	r0, #0
    3d46:	6098      	str	r0, [r3, #8]
    3d48:	4770      	bx	lr
		return -EINVAL;
    3d4a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    3d4e:	4770      	bx	lr

00003d50 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3d50:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3d52:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    3d54:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    3d58:	2a03      	cmp	r2, #3
    3d5a:	f04f 0200 	mov.w	r2, #0
{
    3d5e:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3d60:	bf0c      	ite	eq
    3d62:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    3d64:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3d66:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3d68:	4770      	bx	lr

00003d6a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3d6a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3d6c:	f013 0307 	ands.w	r3, r3, #7
    3d70:	d105      	bne.n	3d7e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3d72:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    3d74:	2b00      	cmp	r3, #0
    3d76:	bf0c      	ite	eq
    3d78:	2000      	moveq	r0, #0
    3d7a:	2003      	movne	r0, #3
    3d7c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3d7e:	2b02      	cmp	r3, #2
    3d80:	d105      	bne.n	3d8e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3d82:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    3d84:	2b00      	cmp	r3, #0
    3d86:	bf14      	ite	ne
    3d88:	2000      	movne	r0, #0
    3d8a:	2004      	moveq	r0, #4
    3d8c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3d8e:	2b01      	cmp	r3, #1
    3d90:	d105      	bne.n	3d9e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3d92:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    3d94:	2b00      	cmp	r3, #0
    3d96:	bf0c      	ite	eq
    3d98:	2000      	moveq	r0, #0
    3d9a:	2005      	movne	r0, #5
    3d9c:	4770      	bx	lr
	int evt = EVT_NOP;
    3d9e:	2000      	movs	r0, #0
}
    3da0:	4770      	bx	lr

00003da2 <notify_one>:
{
    3da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3da6:	460d      	mov	r5, r1
    3da8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3daa:	4619      	mov	r1, r3
    3dac:	1d28      	adds	r0, r5, #4
{
    3dae:	4690      	mov	r8, r2
    3db0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3db2:	f7ff ffcd 	bl	3d50 <sys_notify_finalize>
	if (cb) {
    3db6:	4604      	mov	r4, r0
    3db8:	b138      	cbz	r0, 3dca <notify_one+0x28>
		cb(mgr, cli, state, res);
    3dba:	4633      	mov	r3, r6
    3dbc:	4642      	mov	r2, r8
    3dbe:	4629      	mov	r1, r5
    3dc0:	4638      	mov	r0, r7
    3dc2:	46a4      	mov	ip, r4
}
    3dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    3dc8:	4760      	bx	ip
}
    3dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003dce <transition_complete>:
{
    3dce:	b410      	push	{r4}
	__asm__ volatile(
    3dd0:	f04f 0420 	mov.w	r4, #32
    3dd4:	f3ef 8211 	mrs	r2, BASEPRI
    3dd8:	f384 8812 	msr	BASEPRI_MAX, r4
    3ddc:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3de0:	6141      	str	r1, [r0, #20]
}
    3de2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3de4:	2101      	movs	r1, #1
    3de6:	f7fd baf9 	b.w	13dc <process_event>

00003dea <validate_args>:
{
    3dea:	b510      	push	{r4, lr}
    3dec:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3dee:	b140      	cbz	r0, 3e02 <validate_args+0x18>
    3df0:	b139      	cbz	r1, 3e02 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    3df2:	1d08      	adds	r0, r1, #4
    3df4:	f7ff ff9b 	bl	3d2e <sys_notify_validate>
	if ((rv == 0)
    3df8:	b928      	cbnz	r0, 3e06 <validate_args+0x1c>
	    && ((cli->notify.flags
    3dfa:	68a3      	ldr	r3, [r4, #8]
    3dfc:	f033 0303 	bics.w	r3, r3, #3
    3e00:	d001      	beq.n	3e06 <validate_args+0x1c>
		rv = -EINVAL;
    3e02:	f06f 0015 	mvn.w	r0, #21
}
    3e06:	bd10      	pop	{r4, pc}

00003e08 <onoff_manager_init>:
{
    3e08:	b538      	push	{r3, r4, r5, lr}
    3e0a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3e0c:	4605      	mov	r5, r0
    3e0e:	b158      	cbz	r0, 3e28 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3e10:	b151      	cbz	r1, 3e28 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3e12:	680b      	ldr	r3, [r1, #0]
    3e14:	b143      	cbz	r3, 3e28 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3e16:	684b      	ldr	r3, [r1, #4]
    3e18:	b133      	cbz	r3, 3e28 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3e1a:	221c      	movs	r2, #28
    3e1c:	2100      	movs	r1, #0
    3e1e:	f000 f87b 	bl	3f18 <memset>
    3e22:	612c      	str	r4, [r5, #16]
	return 0;
    3e24:	2000      	movs	r0, #0
}
    3e26:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3e28:	f06f 0015 	mvn.w	r0, #21
    3e2c:	e7fb      	b.n	3e26 <onoff_manager_init+0x1e>

00003e2e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3e2e:	b570      	push	{r4, r5, r6, lr}
    3e30:	4604      	mov	r4, r0
    3e32:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3e34:	f7ff ffd9 	bl	3dea <validate_args>

	if (rv < 0) {
    3e38:	1e05      	subs	r5, r0, #0
    3e3a:	db31      	blt.n	3ea0 <onoff_request+0x72>
    3e3c:	f04f 0320 	mov.w	r3, #32
    3e40:	f3ef 8111 	mrs	r1, BASEPRI
    3e44:	f383 8812 	msr	BASEPRI_MAX, r3
    3e48:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3e4c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e4e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3e50:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3e54:	42ab      	cmp	r3, r5
    3e56:	f000 0207 	and.w	r2, r0, #7
    3e5a:	d02e      	beq.n	3eba <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3e5c:	2a02      	cmp	r2, #2
    3e5e:	d10e      	bne.n	3e7e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3e60:	3301      	adds	r3, #1
    3e62:	8363      	strh	r3, [r4, #26]
	rv = state;
    3e64:	4615      	mov	r5, r2
		notify = true;
    3e66:	2301      	movs	r3, #1
	__asm__ volatile(
    3e68:	f381 8811 	msr	BASEPRI, r1
    3e6c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3e70:	b1b3      	cbz	r3, 3ea0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    3e72:	2300      	movs	r3, #0
    3e74:	4631      	mov	r1, r6
    3e76:	4620      	mov	r0, r4
    3e78:	f7ff ff93 	bl	3da2 <notify_one>
    3e7c:	e010      	b.n	3ea0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    3e7e:	0783      	lsls	r3, r0, #30
    3e80:	d001      	beq.n	3e86 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    3e82:	2a06      	cmp	r2, #6
    3e84:	d10e      	bne.n	3ea4 <onoff_request+0x76>
	parent->next = child;
    3e86:	2300      	movs	r3, #0
    3e88:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3e8a:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3e8c:	b993      	cbnz	r3, 3eb4 <onoff_request+0x86>
	list->head = node;
    3e8e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3e92:	4615      	mov	r5, r2
    3e94:	b962      	cbnz	r2, 3eb0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3e96:	460a      	mov	r2, r1
    3e98:	4620      	mov	r0, r4
    3e9a:	2102      	movs	r1, #2
    3e9c:	f7fd fa9e 	bl	13dc <process_event>
		}
	}

	return rv;
}
    3ea0:	4628      	mov	r0, r5
    3ea2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    3ea4:	2a05      	cmp	r2, #5
    3ea6:	bf0c      	ite	eq
    3ea8:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    3eac:	f06f 0504 	mvnne.w	r5, #4
    3eb0:	2300      	movs	r3, #0
    3eb2:	e7d9      	b.n	3e68 <onoff_request+0x3a>
	parent->next = child;
    3eb4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    3eb6:	6066      	str	r6, [r4, #4]
}
    3eb8:	e7eb      	b.n	3e92 <onoff_request+0x64>
		rv = -EAGAIN;
    3eba:	f06f 050a 	mvn.w	r5, #10
    3ebe:	e7f7      	b.n	3eb0 <onoff_request+0x82>

00003ec0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3ec0:	4604      	mov	r4, r0
    3ec2:	b508      	push	{r3, lr}
    3ec4:	4608      	mov	r0, r1
    3ec6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    3ec8:	461a      	mov	r2, r3
    3eca:	47a0      	blx	r4
	return z_impl_z_current_get();
    3ecc:	f7ff fd62 	bl	3994 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    3ed0:	f7fd fed6 	bl	1c80 <z_impl_k_thread_abort>

00003ed4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3ed4:	4770      	bx	lr

00003ed6 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    3ed6:	2200      	movs	r2, #0
    3ed8:	e9c0 2200 	strd	r2, r2, [r0]
    3edc:	6082      	str	r2, [r0, #8]
}
    3ede:	4770      	bx	lr

00003ee0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3ee0:	f000 b9c9 	b.w	4276 <z_fatal_error>

00003ee4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3ee4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3ee6:	6800      	ldr	r0, [r0, #0]
    3ee8:	f000 b9c5 	b.w	4276 <z_fatal_error>

00003eec <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    3eec:	2100      	movs	r1, #0
    3eee:	2001      	movs	r0, #1
    3ef0:	f7ff bff6 	b.w	3ee0 <z_arm_fatal_error>

00003ef4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3ef4:	b508      	push	{r3, lr}
	handler();
    3ef6:	f7fd fcb3 	bl	1860 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    3efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    3efe:	f7fd bd93 	b.w	1a28 <z_arm_exc_exit>

00003f02 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    3f02:	b510      	push	{r4, lr}
    3f04:	1e43      	subs	r3, r0, #1
    3f06:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    3f08:	4291      	cmp	r1, r2
    3f0a:	d100      	bne.n	3f0e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3f0c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    3f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
    3f12:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3f16:	e7f7      	b.n	3f08 <memcpy+0x6>

00003f18 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    3f18:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    3f1a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    3f1c:	4603      	mov	r3, r0
	while (n > 0) {
    3f1e:	4293      	cmp	r3, r2
    3f20:	d100      	bne.n	3f24 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3f22:	4770      	bx	lr
		*(d_byte++) = c_byte;
    3f24:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3f28:	e7f9      	b.n	3f1e <memset+0x6>

00003f2a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3f2a:	b084      	sub	sp, #16
    3f2c:	ab04      	add	r3, sp, #16
    3f2e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3f32:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3f36:	2b06      	cmp	r3, #6
    3f38:	d108      	bne.n	3f4c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    3f3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f3e:	2201      	movs	r2, #1
    3f40:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    3f44:	f3bf 8f4f 	dsb	sy
        __WFE();
    3f48:	bf20      	wfe
    while (true)
    3f4a:	e7fd      	b.n	3f48 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3f4c:	b004      	add	sp, #16
    3f4e:	4770      	bx	lr

00003f50 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    3f50:	b084      	sub	sp, #16
    3f52:	ab04      	add	r3, sp, #16
    3f54:	e903 0007 	stmdb	r3, {r0, r1, r2}
    3f58:	2300      	movs	r3, #0
    3f5a:	f383 8811 	msr	BASEPRI, r3
    3f5e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    3f62:	b004      	add	sp, #16
    3f64:	4770      	bx	lr

00003f66 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3f66:	6903      	ldr	r3, [r0, #16]
    3f68:	b2c9      	uxtb	r1, r1
    3f6a:	220c      	movs	r2, #12
    3f6c:	fb01 3302 	mla	r3, r1, r2, r3
    3f70:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    3f72:	f000 0007 	and.w	r0, r0, #7
    3f76:	4770      	bx	lr

00003f78 <set_on_state>:
	__asm__ volatile(
    3f78:	f04f 0320 	mov.w	r3, #32
    3f7c:	f3ef 8211 	mrs	r2, BASEPRI
    3f80:	f383 8812 	msr	BASEPRI_MAX, r3
    3f84:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    3f88:	6803      	ldr	r3, [r0, #0]
    3f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3f8e:	f043 0302 	orr.w	r3, r3, #2
    3f92:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    3f94:	f382 8811 	msr	BASEPRI, r2
    3f98:	f3bf 8f6f 	isb	sy
}
    3f9c:	4770      	bx	lr

00003f9e <stop>:
{
    3f9e:	4603      	mov	r3, r0
    3fa0:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    3fa2:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    3fa4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    3fa6:	f04f 0420 	mov.w	r4, #32
    3faa:	f3ef 8611 	mrs	r6, BASEPRI
    3fae:	f384 8812 	msr	BASEPRI_MAX, r4
    3fb2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3fb6:	250c      	movs	r5, #12
    3fb8:	fb05 0401 	mla	r4, r5, r1, r0
    3fbc:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3fbe:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    3fc2:	d001      	beq.n	3fc8 <stop+0x2a>
    3fc4:	42a2      	cmp	r2, r4
    3fc6:	d110      	bne.n	3fea <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3fc8:	fb05 0001 	mla	r0, r5, r1, r0
    3fcc:	2201      	movs	r2, #1
    3fce:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    3fd0:	2000      	movs	r0, #0
	__asm__ volatile(
    3fd2:	f386 8811 	msr	BASEPRI, r6
    3fd6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3fda:	b928      	cbnz	r0, 3fe8 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    3fdc:	685b      	ldr	r3, [r3, #4]
    3fde:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    3fe2:	684b      	ldr	r3, [r1, #4]
    3fe4:	4798      	blx	r3
	return 0;
    3fe6:	2000      	movs	r0, #0
}
    3fe8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    3fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fee:	e7f0      	b.n	3fd2 <stop+0x34>

00003ff0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    3ff0:	2280      	movs	r2, #128	; 0x80
    3ff2:	f7ff bfd4 	b.w	3f9e <stop>

00003ff6 <async_start>:
{
    3ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ff8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    3ffa:	6904      	ldr	r4, [r0, #16]
{
    3ffc:	4605      	mov	r5, r0
    3ffe:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4000:	f04f 0020 	mov.w	r0, #32
    4004:	f3ef 8c11 	mrs	ip, BASEPRI
    4008:	f380 8812 	msr	BASEPRI_MAX, r0
    400c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4010:	260c      	movs	r6, #12
    4012:	fb06 4601 	mla	r6, r6, r1, r4
    4016:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4018:	f000 0e07 	and.w	lr, r0, #7
    401c:	f1be 0f01 	cmp.w	lr, #1
    4020:	d111      	bne.n	4046 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4022:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    4024:	2600      	movs	r6, #0
	__asm__ volatile(
    4026:	f38c 8811 	msr	BASEPRI, ip
    402a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    402e:	b946      	cbnz	r6, 4042 <async_start+0x4c>
	subdata->cb = cb;
    4030:	200c      	movs	r0, #12
    4032:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    4036:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    403a:	686b      	ldr	r3, [r5, #4]
    403c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4040:	4798      	blx	r3
}
    4042:	4630      	mov	r0, r6
    4044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4046:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    404a:	4287      	cmp	r7, r0
    404c:	bf14      	ite	ne
    404e:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    4052:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    4056:	e7e6      	b.n	4026 <async_start+0x30>

00004058 <api_start>:
{
    4058:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    405a:	2480      	movs	r4, #128	; 0x80
    405c:	9400      	str	r4, [sp, #0]
    405e:	f7ff ffca 	bl	3ff6 <async_start>
}
    4062:	b002      	add	sp, #8
    4064:	bd10      	pop	{r4, pc}

00004066 <onoff_started_callback>:
	return &data->mgr[type];
    4066:	6900      	ldr	r0, [r0, #16]
{
    4068:	b410      	push	{r4}
	return &data->mgr[type];
    406a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    406c:	241c      	movs	r4, #28
    406e:	fb03 0004 	mla	r0, r3, r4, r0
    4072:	2100      	movs	r1, #0
}
    4074:	bc10      	pop	{r4}
	notify(mgr, 0);
    4076:	4710      	bx	r2

00004078 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4078:	2000      	movs	r0, #0
    407a:	f000 b86e 	b.w	415a <nrfx_clock_start>

0000407e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    407e:	2000      	movs	r0, #0
    4080:	f7fe bc62 	b.w	2948 <nrfx_clock_stop>

00004084 <blocking_start_callback>:
{
    4084:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4086:	f7ff b995 	b.w	33b4 <z_impl_k_sem_give>

0000408a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    408a:	6843      	ldr	r3, [r0, #4]
    408c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    408e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4092:	600b      	str	r3, [r1, #0]
}
    4094:	2000      	movs	r0, #0
    4096:	4770      	bx	lr

00004098 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4098:	6843      	ldr	r3, [r0, #4]
    409a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    409c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    40a0:	4042      	eors	r2, r0
    40a2:	400a      	ands	r2, r1
    40a4:	4042      	eors	r2, r0
    p_reg->OUT = value;
    40a6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    40aa:	2000      	movs	r0, #0
    40ac:	4770      	bx	lr

000040ae <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    40ae:	6843      	ldr	r3, [r0, #4]
    40b0:	685b      	ldr	r3, [r3, #4]
}
    40b2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    40b4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    40b8:	4770      	bx	lr

000040ba <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    40ba:	6843      	ldr	r3, [r0, #4]
    40bc:	685b      	ldr	r3, [r3, #4]
}
    40be:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    40c0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    40c4:	4770      	bx	lr

000040c6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    40c6:	6843      	ldr	r3, [r0, #4]
    40c8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    40ca:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    40ce:	404b      	eors	r3, r1
    p_reg->OUT = value;
    40d0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    40d4:	2000      	movs	r0, #0
    40d6:	4770      	bx	lr

000040d8 <gpio_nrfx_manage_callback>:
	return port->data;
    40d8:	6903      	ldr	r3, [r0, #16]
	return list->head;
    40da:	6858      	ldr	r0, [r3, #4]
{
    40dc:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    40de:	b158      	cbz	r0, 40f8 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    40e0:	2400      	movs	r4, #0
    40e2:	4281      	cmp	r1, r0
    40e4:	d112      	bne.n	410c <gpio_nrfx_manage_callback+0x34>
	return node->next;
    40e6:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    40e8:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    40ea:	b954      	cbnz	r4, 4102 <gpio_nrfx_manage_callback+0x2a>
    40ec:	428d      	cmp	r5, r1
	list->head = node;
    40ee:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    40f0:	d100      	bne.n	40f4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    40f2:	6098      	str	r0, [r3, #8]
	parent->next = child;
    40f4:	2000      	movs	r0, #0
    40f6:	6008      	str	r0, [r1, #0]
	if (set) {
    40f8:	b96a      	cbnz	r2, 4116 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    40fa:	2000      	movs	r0, #0
}
    40fc:	bd30      	pop	{r4, r5, pc}
    40fe:	4628      	mov	r0, r5
    4100:	e7ef      	b.n	40e2 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    4102:	428d      	cmp	r5, r1
	parent->next = child;
    4104:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4106:	bf08      	it	eq
    4108:	609c      	streq	r4, [r3, #8]
}
    410a:	e7f3      	b.n	40f4 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    410c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    410e:	4604      	mov	r4, r0
    4110:	2d00      	cmp	r5, #0
    4112:	d1f4      	bne.n	40fe <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4114:	b13a      	cbz	r2, 4126 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    4116:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    4118:	685a      	ldr	r2, [r3, #4]
    411a:	600a      	str	r2, [r1, #0]
	list->head = node;
    411c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    411e:	2800      	cmp	r0, #0
    4120:	d1eb      	bne.n	40fa <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4122:	6099      	str	r1, [r3, #8]
}
    4124:	e7ea      	b.n	40fc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4126:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    412a:	e7e7      	b.n	40fc <gpio_nrfx_manage_callback+0x24>

0000412c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    412c:	4770      	bx	lr

0000412e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    412e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4132:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    4136:	f1a0 0308 	sub.w	r3, r0, #8
    413a:	4258      	negs	r0, r3
    413c:	4158      	adcs	r0, r3
    413e:	4770      	bx	lr

00004140 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4140:	4700      	bx	r0

00004142 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4142:	f000 b9a6 	b.w	4492 <z_impl_k_busy_wait>

00004146 <nrfx_clock_enable>:
{
    4146:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4148:	2000      	movs	r0, #0
    414a:	f7fd fb63 	bl	1814 <arch_irq_is_enabled>
    414e:	b918      	cbnz	r0, 4158 <nrfx_clock_enable+0x12>
}
    4150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4154:	f7fd bb4e 	b.w	17f4 <arch_irq_enable>
    4158:	bd08      	pop	{r3, pc}

0000415a <nrfx_clock_start>:
    switch (domain)
    415a:	b110      	cbz	r0, 4162 <nrfx_clock_start+0x8>
    415c:	2801      	cmp	r0, #1
    415e:	d01d      	beq.n	419c <nrfx_clock_start+0x42>
    4160:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4166:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    416a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    416e:	03c9      	lsls	r1, r1, #15
    4170:	d512      	bpl.n	4198 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4172:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4176:	2a01      	cmp	r2, #1
    4178:	d10e      	bne.n	4198 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    417a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    417e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4182:	2200      	movs	r2, #0
    4184:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4188:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    418c:	2202      	movs	r2, #2
    418e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4192:	2201      	movs	r2, #1
    4194:	609a      	str	r2, [r3, #8]
}
    4196:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    4198:	2200      	movs	r2, #0
    419a:	e7ee      	b.n	417a <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    419c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41a0:	2200      	movs	r2, #0
    41a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    41a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    41aa:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41ae:	6018      	str	r0, [r3, #0]
}
    41b0:	4770      	bx	lr

000041b2 <nrf_gpio_reconfigure>:
{
    41b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    41b4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41b6:	a801      	add	r0, sp, #4
{
    41b8:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    41bc:	4617      	mov	r7, r2
    41be:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41c0:	f7fe fc32 	bl	2a28 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    41c4:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    41c6:	2f00      	cmp	r7, #0
    41c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    41cc:	bf14      	ite	ne
    41ce:	2302      	movne	r3, #2
    41d0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    41d2:	2900      	cmp	r1, #0
    41d4:	bf18      	it	ne
    41d6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    41da:	2d00      	cmp	r5, #0
    41dc:	bf14      	ite	ne
    41de:	f04f 0c0c 	movne.w	ip, #12
    41e2:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    41e6:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    41e8:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    41ec:	bf14      	ite	ne
    41ee:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    41f2:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    41f6:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    41f8:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    41fc:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4200:	bf14      	ite	ne
    4202:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    4206:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    420a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    420e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4212:	b101      	cbz	r1, 4216 <nrf_gpio_reconfigure+0x64>
    4214:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4216:	b10f      	cbz	r7, 421c <nrf_gpio_reconfigure+0x6a>
    4218:	783f      	ldrb	r7, [r7, #0]
    421a:	007f      	lsls	r7, r7, #1
    421c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    421e:	b10d      	cbz	r5, 4224 <nrf_gpio_reconfigure+0x72>
    4220:	782d      	ldrb	r5, [r5, #0]
    4222:	00ad      	lsls	r5, r5, #2
    4224:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4226:	b10c      	cbz	r4, 422c <nrf_gpio_reconfigure+0x7a>
    4228:	7822      	ldrb	r2, [r4, #0]
    422a:	0214      	lsls	r4, r2, #8
    422c:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    422e:	b10e      	cbz	r6, 4234 <nrf_gpio_reconfigure+0x82>
    4230:	7836      	ldrb	r6, [r6, #0]
    4232:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4234:	432c      	orrs	r4, r5
    4236:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    4238:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    423c:	b003      	add	sp, #12
    423e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004240 <nrf_gpio_cfg_sense_set>:
{
    4240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4242:	f10d 030f 	add.w	r3, sp, #15
    4246:	9301      	str	r3, [sp, #4]
    4248:	2300      	movs	r3, #0
{
    424a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    424e:	9300      	str	r3, [sp, #0]
    4250:	461a      	mov	r2, r3
    4252:	4619      	mov	r1, r3
    4254:	f7ff ffad 	bl	41b2 <nrf_gpio_reconfigure>
}
    4258:	b005      	add	sp, #20
    425a:	f85d fb04 	ldr.w	pc, [sp], #4

0000425e <arch_system_halt>:
	__asm__ volatile(
    425e:	f04f 0220 	mov.w	r2, #32
    4262:	f3ef 8311 	mrs	r3, BASEPRI
    4266:	f382 8812 	msr	BASEPRI_MAX, r2
    426a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    426e:	e7fe      	b.n	426e <arch_system_halt+0x10>

00004270 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    4270:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    4272:	f7ff fff4 	bl	425e <arch_system_halt>

00004276 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4278:	4605      	mov	r5, r0
    427a:	460e      	mov	r6, r1
    427c:	f04f 0320 	mov.w	r3, #32
    4280:	f3ef 8711 	mrs	r7, BASEPRI
    4284:	f383 8812 	msr	BASEPRI_MAX, r3
    4288:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    428c:	f7ff fb82 	bl	3994 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4290:	4631      	mov	r1, r6
    4292:	4604      	mov	r4, r0
    4294:	4628      	mov	r0, r5
    4296:	f7ff ffeb 	bl	4270 <k_sys_fatal_error_handler>
	__asm__ volatile(
    429a:	f387 8811 	msr	BASEPRI, r7
    429e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    42a2:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    42a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    42a8:	f7fd bcea 	b.w	1c80 <z_impl_k_thread_abort>

000042ac <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    42ac:	f3ef 8005 	mrs	r0, IPSR
}
    42b0:	3800      	subs	r0, #0
    42b2:	bf18      	it	ne
    42b4:	2001      	movne	r0, #1
    42b6:	4770      	bx	lr

000042b8 <z_pm_save_idle_exit>:
{
    42b8:	b508      	push	{r3, lr}
	pm_system_resume();
    42ba:	f7fd f9b9 	bl	1630 <pm_system_resume>
}
    42be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    42c2:	f7ff bf33 	b.w	412c <sys_clock_idle_exit>

000042c6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    42c6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    42ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    42cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42ce:	2300      	movs	r3, #0
	node->prev = NULL;
    42d0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    42d4:	4770      	bx	lr

000042d6 <unpend_thread_no_timeout>:
{
    42d6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    42d8:	f7ff fff5 	bl	42c6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    42dc:	7b43      	ldrb	r3, [r0, #13]
    42de:	f023 0302 	bic.w	r3, r3, #2
    42e2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    42e4:	2300      	movs	r3, #0
    42e6:	6083      	str	r3, [r0, #8]
}
    42e8:	bd08      	pop	{r3, pc}

000042ea <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    42ea:	4603      	mov	r3, r0
    42ec:	b920      	cbnz	r0, 42f8 <z_reschedule_irqlock+0xe>
    42ee:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    42f2:	b90a      	cbnz	r2, 42f8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    42f4:	f7fd badc 	b.w	18b0 <arch_swap>
    42f8:	f383 8811 	msr	BASEPRI, r3
    42fc:	f3bf 8f6f 	isb	sy
}
    4300:	4770      	bx	lr

00004302 <z_reschedule_unlocked>:
	__asm__ volatile(
    4302:	f04f 0320 	mov.w	r3, #32
    4306:	f3ef 8011 	mrs	r0, BASEPRI
    430a:	f383 8812 	msr	BASEPRI_MAX, r3
    430e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4312:	f7ff bfea 	b.w	42ea <z_reschedule_irqlock>

00004316 <z_priq_dumb_best>:
{
    4316:	4603      	mov	r3, r0
	return list->head == list;
    4318:	6800      	ldr	r0, [r0, #0]
}
    431a:	4283      	cmp	r3, r0
    431c:	bf08      	it	eq
    431e:	2000      	moveq	r0, #0
    4320:	4770      	bx	lr

00004322 <z_ready_thread>:
{
    4322:	b510      	push	{r4, lr}
    4324:	f04f 0320 	mov.w	r3, #32
    4328:	f3ef 8411 	mrs	r4, BASEPRI
    432c:	f383 8812 	msr	BASEPRI_MAX, r3
    4330:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4334:	f7ff f98c 	bl	3650 <ready_thread>
	__asm__ volatile(
    4338:	f384 8811 	msr	BASEPRI, r4
    433c:	f3bf 8f6f 	isb	sy
}
    4340:	bd10      	pop	{r4, pc}

00004342 <z_thread_timeout>:
{
    4342:	b510      	push	{r4, lr}
    4344:	4601      	mov	r1, r0
	__asm__ volatile(
    4346:	f04f 0320 	mov.w	r3, #32
    434a:	f3ef 8411 	mrs	r4, BASEPRI
    434e:	f383 8812 	msr	BASEPRI_MAX, r3
    4352:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4356:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    435a:	f013 0f28 	tst.w	r3, #40	; 0x28
    435e:	d10d      	bne.n	437c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    4360:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4364:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    4366:	b10b      	cbz	r3, 436c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    4368:	f7ff ffb5 	bl	42d6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    436c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    4370:	f023 0314 	bic.w	r3, r3, #20
    4374:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    4378:	f7ff f96a 	bl	3650 <ready_thread>
	__asm__ volatile(
    437c:	f384 8811 	msr	BASEPRI, r4
    4380:	f3bf 8f6f 	isb	sy
}
    4384:	bd10      	pop	{r4, pc}

00004386 <add_to_waitq_locked>:
{
    4386:	b538      	push	{r3, r4, r5, lr}
    4388:	4604      	mov	r4, r0
    438a:	460d      	mov	r5, r1
	unready_thread(thread);
    438c:	f7ff f9b4 	bl	36f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4390:	7b63      	ldrb	r3, [r4, #13]
    4392:	f043 0302 	orr.w	r3, r3, #2
    4396:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4398:	b195      	cbz	r5, 43c0 <add_to_waitq_locked+0x3a>
    439a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    439c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    439e:	429d      	cmp	r5, r3
    43a0:	d015      	beq.n	43ce <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43a2:	b1a3      	cbz	r3, 43ce <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    43a4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    43a8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    43ac:	4291      	cmp	r1, r2
    43ae:	d008      	beq.n	43c2 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    43b0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    43b2:	2a00      	cmp	r2, #0
    43b4:	dd05      	ble.n	43c2 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    43b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    43b8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    43bc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    43be:	605c      	str	r4, [r3, #4]
}
    43c0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    43c2:	686a      	ldr	r2, [r5, #4]
    43c4:	4293      	cmp	r3, r2
    43c6:	d002      	beq.n	43ce <add_to_waitq_locked+0x48>
    43c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43ca:	2b00      	cmp	r3, #0
    43cc:	d1ec      	bne.n	43a8 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    43ce:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    43d0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    43d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    43d6:	606c      	str	r4, [r5, #4]
}
    43d8:	e7f2      	b.n	43c0 <add_to_waitq_locked+0x3a>

000043da <z_unpend_first_thread>:
{
    43da:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    43dc:	f04f 0320 	mov.w	r3, #32
    43e0:	f3ef 8511 	mrs	r5, BASEPRI
    43e4:	f383 8812 	msr	BASEPRI_MAX, r3
    43e8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    43ec:	f7ff ff93 	bl	4316 <z_priq_dumb_best>
		if (thread != NULL) {
    43f0:	4604      	mov	r4, r0
    43f2:	b120      	cbz	r0, 43fe <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    43f4:	f7ff ff6f 	bl	42d6 <unpend_thread_no_timeout>
    43f8:	3018      	adds	r0, #24
    43fa:	f000 f806 	bl	440a <z_abort_timeout>
	__asm__ volatile(
    43fe:	f385 8811 	msr	BASEPRI, r5
    4402:	f3bf 8f6f 	isb	sy
}
    4406:	4620      	mov	r0, r4
    4408:	bd38      	pop	{r3, r4, r5, pc}

0000440a <z_abort_timeout>:
{
    440a:	b510      	push	{r4, lr}
	__asm__ volatile(
    440c:	f04f 0220 	mov.w	r2, #32
    4410:	f3ef 8411 	mrs	r4, BASEPRI
    4414:	f382 8812 	msr	BASEPRI_MAX, r2
    4418:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    441c:	6803      	ldr	r3, [r0, #0]
    441e:	b13b      	cbz	r3, 4430 <z_abort_timeout+0x26>
			remove_timeout(to);
    4420:	f7ff fb5c 	bl	3adc <remove_timeout>
			ret = 0;
    4424:	2000      	movs	r0, #0
	__asm__ volatile(
    4426:	f384 8811 	msr	BASEPRI, r4
    442a:	f3bf 8f6f 	isb	sy
}
    442e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4430:	f06f 0015 	mvn.w	r0, #21
    4434:	e7f7      	b.n	4426 <z_abort_timeout+0x1c>

00004436 <z_get_next_timeout_expiry>:
{
    4436:	b510      	push	{r4, lr}
	__asm__ volatile(
    4438:	f04f 0320 	mov.w	r3, #32
    443c:	f3ef 8411 	mrs	r4, BASEPRI
    4440:	f383 8812 	msr	BASEPRI_MAX, r3
    4444:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4448:	f7ff fb20 	bl	3a8c <next_timeout>
	__asm__ volatile(
    444c:	f384 8811 	msr	BASEPRI, r4
    4450:	f3bf 8f6f 	isb	sy
}
    4454:	bd10      	pop	{r4, pc}

00004456 <z_set_timeout_expiry>:
{
    4456:	b570      	push	{r4, r5, r6, lr}
    4458:	4604      	mov	r4, r0
    445a:	460d      	mov	r5, r1
	__asm__ volatile(
    445c:	f04f 0320 	mov.w	r3, #32
    4460:	f3ef 8611 	mrs	r6, BASEPRI
    4464:	f383 8812 	msr	BASEPRI_MAX, r3
    4468:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    446c:	f7ff fb0e 	bl	3a8c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4470:	2801      	cmp	r0, #1
    4472:	dd05      	ble.n	4480 <z_set_timeout_expiry+0x2a>
    4474:	42a0      	cmp	r0, r4
    4476:	db03      	blt.n	4480 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4478:	4629      	mov	r1, r5
    447a:	4620      	mov	r0, r4
    447c:	f7fe f8b2 	bl	25e4 <sys_clock_set_timeout>
	__asm__ volatile(
    4480:	f386 8811 	msr	BASEPRI, r6
    4484:	f3bf 8f6f 	isb	sy
}
    4488:	bd70      	pop	{r4, r5, r6, pc}

0000448a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    448a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    448c:	f7ff fc16 	bl	3cbc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4490:	bd08      	pop	{r3, pc}

00004492 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4492:	b108      	cbz	r0, 4498 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4494:	f7fd bcfc 	b.w	1e90 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4498:	4770      	bx	lr

0000449a <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
    449a:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
    449c:	4770      	bx	lr

0000449e <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    449e:	4770      	bx	lr

000044a0 <z_device_state_init>:
}
    44a0:	4770      	bx	lr
	...

000044a4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    44a4:	f7fe b90a 	b.w	26bc <SystemInit>
